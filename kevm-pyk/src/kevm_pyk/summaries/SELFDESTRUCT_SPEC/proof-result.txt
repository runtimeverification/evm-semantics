Proof SELFDESTRUCT_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ SELFDESTRUCT ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1
┃  │
┃  ├─ 3
┃  │   k: #next [ SELFDESTRUCT ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024
┃  │
┃  ├─ 4
┃  │   k: #next [ SELFDESTRUCT ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 10 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool _STATIC_CELL:Bool )
┃  ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 )
┃  ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 )
┃  │
┃  ├─ 5
┃  │   k: #next [ SELFDESTRUCT ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (1 step)
┃  ├─ 7
┃  │   k: #addr [ SELFDESTRUCT ] ~> #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_C ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  ├─ 11
┃  ┃  │   k: #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (1 step)
┃  ┃  ├─ 13 (split)
┃  ┃  │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     _USEGAS_CELL:Bool
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 16
┃  ┃  ┃  │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (3 steps)
┃  ┃  ┃  ├─ 23
┃  ┃  ┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W0:Int modInt pow160 ) ) ~>  ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (1 step)
┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 24
┃  ┃  ┃  ┃  │   k: Cselfdestruct ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ( W0:Int modInt  ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  │  (1 step)
┃  ┃  ┃  ┃  ├─ 41 (split)
┃  ┃  ┃  ┃  │   k: #accountNonexistent ( ( W0:Int modInt pow160 ) ) ~> #freezerCselfdestruct1_ ( _S ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃  ┃     _Gen29:NonceCell ==K <nonce>
  NONCE:Int
</nonce>
┃  ┃  ┃  ┃  ┃  ┃     _Gen25:CodeCell ==K <code>
  CODE:AccountCode
</code>
┃  ┃  ┃  ┃  ┃  ┃     ACCTFROM:Int ==Int ( W0:Int modInt pow160 )
┃  ┃  ┃  ┃  ┃  ┃     _ID_CELL:Account ==K ( W0:Int modInt pow160 )
┃  ┃  ┃  ┃  ┃  ┃     ( notBool <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) )
┃  ┃  ┃  ┃  ┃  ┃     _ACCOUNTS_CELL:AccountCellMap ==K ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account>
_DotVar8:AccountCellMap )
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  └─ 53 (leaf, pending)
┃  ┃  ┃  ┃  ┃      k: #accountNonexistent ( ( W0:Int modInt pow160 ) ) ~> #freezerCselfdestruct1_ ( _S ...
┃  ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃  ┃     ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( AC3_:AccountCellMap ) )
┃  ┃  ┃  ┃  ┃  ┃     ( notBool ACCTFROM:Int ==Int ( W0:Int modInt pow160 ) )
┃  ┃  ┃  ┃  ┃  ┃     ( notBool <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( AC3_:AccountCellMap ) )
┃  ┃  ┃  ┃  ┃  ┃     _DotVar8:AccountCellMap ==K ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account>
AC3_:AccountCellMap )
┃  ┃  ┃  ┃  ┃  ┃     _ACCOUNTS_CELL:AccountCellMap ==K ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account>
( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
AC3_:AccountCellMap ) )
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  └─ 54 (leaf, pending)
┃  ┃  ┃  ┃  ┃      k: #accountNonexistent ( ( W0:Int modInt pow160 ) ) ~> #freezerCselfdestruct1_ ( _S ...
┃  ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃  ┃     ┃ constraint: true
┃  ┃  ┃  ┃     │
┃  ┃  ┃  ┃     └─ 55 (leaf, pending)
┃  ┃  ┃  ┃         k: #accountNonexistent ( ( W0:Int modInt pow160 ) ) ~> #freezerCselfdestruct1_ ( _S ...
┃  ┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓
┃  ┃  ┃     │
┃  ┃  ┃     ├─ 25
┃  ┃  ┃     │   k: #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W0:Int modInt pow160 ) ) ~>  ...
┃  ┃  ┃     │   pc: _PC_CELL:Int
┃  ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     ┃
┃  ┃  ┃     ┃ (1 step)
┃  ┃  ┃     ┣━━┓
┃  ┃  ┃     ┃  │
┃  ┃  ┃     ┃  └─ 36 (leaf, pending)
┃  ┃  ┃     ┃      k: Cselfdestruct ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ( W0:Int modInt  ...
┃  ┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     ┃
┃  ┃  ┃     ┗━━┓
┃  ┃  ┃        │
┃  ┃  ┃        └─ 37 (leaf, pending)
┃  ┃  ┃            k: #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W0:Int modInt pow160 ) ) ~>  ...
┃  ┃  ┃            pc: _PC_CELL:Int
┃  ┃  ┃            callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃  ┃     │
┃  ┃     ├─ 17
┃  ┃     │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (1 step)
┃  ┃     ├─ 26
┃  ┃     │   k: SELFDESTRUCT ( W0:Int modInt pow160 ) ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃
┃  ┃     ┃ (1 step)
┃  ┃     ┣━━┓
┃  ┃     ┃  │
┃  ┃     ┃  ├─ 27
┃  ┃     ┃  │   k: #touchAccounts ACCT:Int ( W0:Int modInt pow160 ) ~> #accessAccounts ( W0:Int mod ...
┃  ┃     ┃  │   pc: _PC_CELL:Int
┃  ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃  │
┃  ┃     ┃  │  (4 steps)
┃  ┃     ┃  └─ 42 (leaf, pending)
┃  ┃     ┃      k: #transferFunds ACCT:Int ( W0:Int modInt pow160 ) BALFROM:Int ~> #end EVMC_SUCCES ...
┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃
┃  ┃     ┣━━┓
┃  ┃     ┃  │
┃  ┃     ┃  ├─ 28
┃  ┃     ┃  │   k: #touchAccounts ( W0:Int modInt pow160 ) ~> #accessAccounts ( W0:Int modInt pow16 ...
┃  ┃     ┃  │   pc: _PC_CELL:Int
┃  ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃  │
┃  ┃     ┃  │  (4 steps)
┃  ┃     ┃  └─ 50 (leaf, pending)
┃  ┃     ┃      k: #halt ~> _K_CELL:K
┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃     ┃      statusCode: EVMC_SUCCESS
┃  ┃     ┃
┃  ┃     ┗━━┓
┃  ┃        │
┃  ┃        ├─ 29
┃  ┃        │   k: SELFDESTRUCT ( W0:Int modInt pow160 ) ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃  ┃        │   pc: _PC_CELL:Int
┃  ┃        │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃        ┃
┃  ┃        ┃ (1 step)
┃  ┃        ┣━━┓
┃  ┃        ┃  │
┃  ┃        ┃  └─ 43 (leaf, pending)
┃  ┃        ┃      k: #touchAccounts ACCT0:Int ( W0:Int modInt pow160 ) ~> #accessAccounts ( W0:Int mo ...
┃  ┃        ┃      pc: _PC_CELL:Int
┃  ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃        ┃
┃  ┃        ┣━━┓
┃  ┃        ┃  │
┃  ┃        ┃  └─ 44 (leaf, pending)
┃  ┃        ┃      k: #touchAccounts ( W0:Int modInt pow160 ) ~> #accessAccounts ( W0:Int modInt pow16 ...
┃  ┃        ┃      pc: _PC_CELL:Int
┃  ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃        ┃
┃  ┃        ┗━━┓
┃  ┃           │
┃  ┃           └─ 45 (leaf, pending)
┃  ┃               k: SELFDESTRUCT ( W0:Int modInt pow160 ) ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃  ┃               pc: _PC_CELL:Int
┃  ┃               callDepth: _CALLDEPTH_CELL:Int
┃  ┃               statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     ├─ 12
┃     │   k: #addr [ SELFDESTRUCT ] ~> #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_C ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (1 step)
┃     ┣━━┓
┃     ┃  │
┃     ┃  ├─ 14
┃     ┃  │   k: #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  │
┃     ┃  │  (1 step)
┃     ┃  ├─ 18 (split)
┃     ┃  │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┃ (branch)
┃     ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃     _USEGAS_CELL:Bool
┃     ┃  ┃  │
┃     ┃  ┃  ├─ 21
┃     ┃  ┃  │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  │
┃     ┃  ┃  │  (3 steps)
┃     ┃  ┃  ├─ 33
┃     ┃  ┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W1:Int modInt pow160 ) ) ~>  ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┃ (1 step)
┃     ┃  ┃  ┣━━┓
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  └─ 39 (leaf, pending)
┃     ┃  ┃  ┃      k: Cselfdestruct ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ( W1:Int modInt  ...
┃     ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┗━━┓
┃     ┃  ┃     │
┃     ┃  ┃     └─ 40 (leaf, pending)
┃     ┃  ┃         k: #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W1:Int modInt pow160 ) ) ~>  ...
┃     ┃  ┃         pc: _PC_CELL:Int
┃     ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┗━━┓ subst: .Subst
┃     ┃     ┃ constraint:
┃     ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃     ┃     │
┃     ┃     ├─ 22
┃     ┃     │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     │
┃     ┃     │  (1 step)
┃     ┃     ├─ 38
┃     ┃     │   k: SELFDESTRUCT ( W1:Int modInt pow160 ) ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┃ (1 step)
┃     ┃     ┣━━┓
┃     ┃     ┃  │
┃     ┃     ┃  └─ 47 (leaf, pending)
┃     ┃     ┃      k: #touchAccounts ACCT:Int ( W1:Int modInt pow160 ) ~> #accessAccounts ( W1:Int mod ...
┃     ┃     ┃      pc: _PC_CELL:Int
┃     ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┣━━┓
┃     ┃     ┃  │
┃     ┃     ┃  └─ 48 (leaf, pending)
┃     ┃     ┃      k: #touchAccounts ( W1:Int modInt pow160 ) ~> #accessAccounts ( W1:Int modInt pow16 ...
┃     ┃     ┃      pc: _PC_CELL:Int
┃     ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┗━━┓
┃     ┃        │
┃     ┃        └─ 49 (leaf, pending)
┃     ┃            k: SELFDESTRUCT ( W1:Int modInt pow160 ) ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃     ┃            pc: _PC_CELL:Int
┃     ┃            callDepth: _CALLDEPTH_CELL:Int
┃     ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓
┃        │
┃        ├─ 15
┃        │   k: #addr [ SELFDESTRUCT ] ~> #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_C ...
┃        │   pc: _PC_CELL:Int
┃        │   callDepth: _CALLDEPTH_CELL:Int
┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┃ (1 step)
┃        ┣━━┓
┃        ┃  │
┃        ┃  ├─ 19
┃        ┃  │   k: #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃        ┃  │   pc: _PC_CELL:Int
┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  │
┃        ┃  │  (1 step)
┃        ┃  ├─ 30 (split)
┃        ┃  │   k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W2:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃        ┃  │   pc: _PC_CELL:Int
┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃
┃        ┃  ┃ (branch)
┃        ┃  ┣━━┓ subst: .Subst
┃        ┃  ┃  ┃ constraint:
┃        ┃  ┃  ┃     _USEGAS_CELL:Bool
┃        ┃  ┃  │
┃        ┃  ┃  └─ 34 (leaf, pending)
┃        ┃  ┃      k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W2:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃        ┃  ┃      pc: _PC_CELL:Int
┃        ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃
┃        ┃  ┗━━┓ subst: .Subst
┃        ┃     ┃ constraint:
┃        ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃        ┃     │
┃        ┃     └─ 35 (leaf, pending)
┃        ┃         k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W2:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃        ┃         pc: _PC_CELL:Int
┃        ┃         callDepth: _CALLDEPTH_CELL:Int
┃        ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┗━━┓
┃           │
┃           ├─ 20
┃           │   k: #addr [ SELFDESTRUCT ] ~> #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_C ...
┃           │   pc: _PC_CELL:Int
┃           │   callDepth: _CALLDEPTH_CELL:Int
┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┃ (1 step)
┃           ┣━━┓
┃           ┃  │
┃           ┃  ├─ 31
┃           ┃  │   k: #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃           ┃  │   pc: _PC_CELL:Int
┃           ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  │
┃           ┃  │  (1 step)
┃           ┃  └─ 46 (leaf, pending)
┃           ┃      k: #gas [ SELFDESTRUCT , SELFDESTRUCT ( W3:Int modInt pow160 ) ] ~> SELFDESTRUCT (  ...
┃           ┃      pc: _PC_CELL:Int
┃           ┃      callDepth: _CALLDEPTH_CELL:Int
┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┗━━┓
┃              │
┃              ├─ 32
┃              │   k: #addr [ SELFDESTRUCT ] ~> #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_C ...
┃              │   pc: _PC_CELL:Int
┃              │   callDepth: _CALLDEPTH_CELL:Int
┃              │   statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃
┃              ┃ (1 step)
┃              ┣━━┓
┃              ┃  │
┃              ┃  └─ 51 (leaf, pending)
┃              ┃      k: #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_CELL:K
┃              ┃      pc: _PC_CELL:Int
┃              ┃      callDepth: _CALLDEPTH_CELL:Int
┃              ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃
┃              ┗━━┓
┃                 │
┃                 └─ 52 (leaf, pending)
┃                     k: #addr [ SELFDESTRUCT ] ~> #exec [ SELFDESTRUCT ] ~> #pc [ SELFDESTRUCT ] ~> _K_C ...
┃                     pc: _PC_CELL:Int
┃                     callDepth: _CALLDEPTH_CELL:Int
┃                     statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     _STATIC_CELL:Bool
   ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 )
   ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 )
   │
   ├─ 6
   │   k: #next [ SELFDESTRUCT ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 9 (leaf, terminal)
       k: #halt ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals false }
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } ) ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #next [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals true }
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } ) ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SELFDESTRUCT ]
      ~> #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) } ) ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) } ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W0:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SELFDESTRUCT ]
      ~> #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _WS:WordStack . #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } ) ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W1:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SELFDESTRUCT ]
      ~> #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } )
#And #Not ( #Exists _WS:WordStack . #Exists W1:Int . { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) } ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W2:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W2:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W2:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SELFDESTRUCT ]
      ~> #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } )
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) } )
#And #Not ( #Exists _WS:WordStack . #Exists W2:Int . { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) } ) ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W0:Int modInt pow160 ) )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      Cselfdestruct ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ( W0:Int modInt pow160 ) ) , BAL:Int )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen25:CodeCell
            _Gen26:StorageCell
            _Gen27:OrigStorageCell
            _Gen28:TransientStorageCell
            _Gen29:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W0:Int modInt pow160 ) )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen25:CodeCell . #Exists _Gen26:StorageCell . #Exists _Gen27:OrigStorageCell . #Exists _Gen28:TransientStorageCell . #Exists _Gen29:NonceCell . #Exists ACCTFROM:Int . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCTFROM:Int } ) ) ) ) ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      #touchAccounts ACCT:Int ( W0:Int modInt pow160 )
      ~> #accessAccounts ( W0:Int modInt pow160 )
      ~> #transferFunds ACCT:Int ( W0:Int modInt pow160 ) BALFROM:Int
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ACCT:Int )
          </selfDestruct>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            <balance>
              BALFROM:Int
            </balance>
            _Gen26:CodeCell
            _Gen27:StorageCell
            _Gen28:OrigStorageCell
            _Gen29:TransientStorageCell
            _Gen30:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ACCT:Int ==Int ( W0:Int modInt pow160 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      #touchAccounts ( W0:Int modInt pow160 )
      ~> #accessAccounts ( W0:Int modInt pow160 )
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ( W0:Int modInt pow160 )
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ( W0:Int modInt pow160 ) )
          </selfDestruct>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ( W0:Int modInt pow160 )
            </acctID>
            <balance>
              0
            </balance>
            _Gen27:CodeCell
            _Gen28:StorageCell
            _Gen29:OrigStorageCell
            _Gen30:TransientStorageCell
            _Gen31:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { true #Equals ( notBool <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
  ...
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen0:Int . #Exists _Gen27:CodeCell . #Exists _Gen28:StorageCell . #Exists _Gen29:OrigStorageCell . #Exists _Gen30:TransientStorageCell . #Exists _Gen31:NonceCell . ( { false #Equals <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    _Gen0:Int
  </balance>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) } ) ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen26:CodeCell . #Exists _Gen27:StorageCell . #Exists _Gen28:OrigStorageCell . #Exists _Gen29:TransientStorageCell . #Exists _Gen30:NonceCell . #Exists ACCT:Int . #Exists BALFROM:Int . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Not ( { ACCT:Int #Equals ( W0:Int modInt pow160 ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W2:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W2:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W2:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W2:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W3:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W3:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W3:Int ) }
#And ( { true #Equals ( notBool W2:Int ==Int W3:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W3:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SELFDESTRUCT ]
      ~> #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } )
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) } )
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) } )
#And #Not ( #Exists _WS:WordStack . #Exists W3:Int . { _WORDSTACK_CELL:WordStack #Equals ( W3:Int : _WS:WordStack ) } ) ) ) ) ) ) ) )



Node 33:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W1:Int modInt pow160 ) )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 34:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W2:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W2:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W2:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W2:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 35:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W2:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W2:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W2:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W2:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 36:

( <generatedTop>
  <kevm>
    <k>
      Cselfdestruct ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ( W0:Int modInt pow160 ) ) , BAL0:Int )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM0:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM0:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM0:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen30:CodeCell
            _Gen31:StorageCell
            _Gen32:OrigStorageCell
            _Gen33:TransientStorageCell
            _Gen34:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM0:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen30:CodeCell
  _Gen31:StorageCell
  _Gen32:OrigStorageCell
  _Gen33:TransientStorageCell
  _Gen34:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And #Not ( ( { ACCTFROM:Int #Equals ACCTFROM0:Int }
#And #Exists _DotVar9:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar9:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  ...
</account>
_DotVar9:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCTFROM0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen30:CodeCell
  _Gen31:StorageCell
  _Gen32:OrigStorageCell
  _Gen33:TransientStorageCell
  _Gen34:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 37:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W0:Int modInt pow160 ) )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen30:CodeCell . #Exists _Gen31:StorageCell . #Exists _Gen32:OrigStorageCell . #Exists _Gen33:TransientStorageCell . #Exists _Gen34:NonceCell . #Exists ACCTFROM0:Int . #Exists BAL0:Int . ( { false #Equals <acctID>
  ACCTFROM0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen30:CodeCell
  _Gen31:StorageCell
  _Gen32:OrigStorageCell
  _Gen33:TransientStorageCell
  _Gen34:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCTFROM0:Int } ) ) ) ) ) ) ) ) ) )



Node 38:

( <generatedTop>
  <kevm>
    <k>
      SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 39:

( <generatedTop>
  <kevm>
    <k>
      Cselfdestruct ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ( W1:Int modInt pow160 ) ) , BAL:Int )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen25:CodeCell
            _Gen26:StorageCell
            _Gen27:OrigStorageCell
            _Gen28:TransientStorageCell
            _Gen29:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 40:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SELFDESTRUCT ( W1:Int modInt pow160 ) )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W1:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen25:CodeCell . #Exists _Gen26:StorageCell . #Exists _Gen27:OrigStorageCell . #Exists _Gen28:TransientStorageCell . #Exists _Gen29:NonceCell . #Exists ACCTFROM:Int . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCTFROM:Int } ) ) ) ) ) ) ) ) ) )



Node 41:

( <generatedTop>
  <kevm>
    <k>
      #accountNonexistent ( ( W0:Int modInt pow160 ) )
      ~> #freezerCselfdestruct1_ ( _SCHEDULE_CELL:Schedule ~> .K , BAL:Int ~> .K )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen25:CodeCell
            _Gen26:StorageCell
            _Gen27:OrigStorageCell
            _Gen28:TransientStorageCell
            _Gen29:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) )



Node 42:

( <generatedTop>
  <kevm>
    <k>
      #transferFunds ACCT:Int ( W0:Int modInt pow160 ) BALFROM:Int
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <touchedAccounts>
          _TOUCHEDACCOUNTS_CELL:Set |Set SetItem ( ACCT:Int ) |Set SetItem ( ( W0:Int modInt pow160 ) )
        </touchedAccounts>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ACCT:Int )
          </selfDestruct>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( W0:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            <balance>
              BALFROM:Int
            </balance>
            _Gen26:CodeCell
            _Gen27:StorageCell
            _Gen28:OrigStorageCell
            _Gen29:TransientStorageCell
            _Gen30:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ACCT:Int ==Int ( W0:Int modInt pow160 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 43:

( <generatedTop>
  <kevm>
    <k>
      #touchAccounts ACCT0:Int ( W0:Int modInt pow160 )
      ~> #accessAccounts ( W0:Int modInt pow160 )
      ~> #transferFunds ACCT0:Int ( W0:Int modInt pow160 ) BALFROM0:Int
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ACCT0:Int )
          </selfDestruct>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            <balance>
              BALFROM0:Int
            </balance>
            _Gen32:CodeCell
            _Gen33:StorageCell
            _Gen34:OrigStorageCell
            _Gen35:TransientStorageCell
            _Gen36:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ACCT0:Int ==Int ( W0:Int modInt pow160 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BALFROM0:Int
  </balance>
  _Gen32:CodeCell
  _Gen33:StorageCell
  _Gen34:OrigStorageCell
  _Gen35:TransientStorageCell
  _Gen36:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar9:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar9:AccountCellMap ) }
#And ( { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar9:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BALFROM0:Int
  </balance>
  _Gen32:CodeCell
  _Gen33:StorageCell
  _Gen34:OrigStorageCell
  _Gen35:TransientStorageCell
  _Gen36:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And #Not ( { ACCT:Int #Equals ( W0:Int modInt pow160 ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 44:

( <generatedTop>
  <kevm>
    <k>
      #touchAccounts ( W0:Int modInt pow160 )
      ~> #accessAccounts ( W0:Int modInt pow160 )
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ( W0:Int modInt pow160 )
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ( W0:Int modInt pow160 ) )
          </selfDestruct>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ( W0:Int modInt pow160 )
            </acctID>
            <balance>
              0
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals false }
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { false #Equals #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 }
#And ( { false #Equals ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 }
#And ( { false #Equals <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    _Gen32:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And ( #Not ( ( { _Gen0:Int #Equals _Gen32:Int }
#And ( { _Gen27:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen28:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen29:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen30:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And { _Gen31:NonceCell #Equals _Gen37:NonceCell } ) ) ) ) ) )
#And #Not ( ( { ACCT:Int #Equals ( W0:Int modInt pow160 ) }
#And #Exists _DotVar9:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar9:AccountCellMap ) }
#And ( { ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    _Gen32:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
  ...
</account>
_DotVar9:AccountCellMap ) }
#And #Not ( { ACCT:Int #Equals ( W0:Int modInt pow160 ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 45:

( <generatedTop>
  <kevm>
    <k>
      SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals false }
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { false #Equals #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 }
#And ( { false #Equals ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 }
#And ( #Not ( ( { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    _Gen0:Int
  </balance>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And #Not ( { ACCT:Int #Equals ( W0:Int modInt pow160 ) } ) ) ) ) )
#And ( #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen0:Int . #Exists _Gen27:CodeCell . #Exists _Gen28:StorageCell . #Exists _Gen29:OrigStorageCell . #Exists _Gen30:TransientStorageCell . #Exists _Gen31:NonceCell . ( { false #Equals <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    _Gen0:Int
  </balance>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) } ) ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen26:CodeCell . #Exists _Gen27:StorageCell . #Exists _Gen28:OrigStorageCell . #Exists _Gen29:TransientStorageCell . #Exists _Gen30:NonceCell . #Exists ACCT:Int . #Exists BALFROM:Int . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Not ( { ACCT:Int #Equals ( W0:Int modInt pow160 ) } ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 46:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFDESTRUCT , SELFDESTRUCT ( W3:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W3:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W3:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W3:Int ) }
#And ( { true #Equals ( notBool W2:Int ==Int W3:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W3:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 47:

( <generatedTop>
  <kevm>
    <k>
      #touchAccounts ACCT:Int ( W1:Int modInt pow160 )
      ~> #accessAccounts ( W1:Int modInt pow160 )
      ~> #transferFunds ACCT:Int ( W1:Int modInt pow160 ) BALFROM:Int
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ACCT:Int )
          </selfDestruct>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            <balance>
              BALFROM:Int
            </balance>
            _Gen26:CodeCell
            _Gen27:StorageCell
            _Gen28:OrigStorageCell
            _Gen29:TransientStorageCell
            _Gen30:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ACCT:Int ==Int ( W1:Int modInt pow160 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) ) )



Node 48:

( <generatedTop>
  <kevm>
    <k>
      #touchAccounts ( W1:Int modInt pow160 )
      ~> #accessAccounts ( W1:Int modInt pow160 )
      ~> #end EVMC_SUCCESS
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ( W1:Int modInt pow160 )
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ( W1:Int modInt pow160 ) )
          </selfDestruct>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ( W1:Int modInt pow160 )
            </acctID>
            <balance>
              0
            </balance>
            _Gen27:CodeCell
            _Gen28:StorageCell
            _Gen29:OrigStorageCell
            _Gen30:TransientStorageCell
            _Gen31:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _ID_CELL:Account #Equals ( W1:Int modInt pow160 ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { true #Equals ( notBool <acctID>
  ( W1:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W1:Int modInt pow160 )
  </acctID>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
  ...
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 49:

( <generatedTop>
  <kevm>
    <k>
      SELFDESTRUCT ( W1:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen0:Int . #Exists _Gen27:CodeCell . #Exists _Gen28:StorageCell . #Exists _Gen29:OrigStorageCell . #Exists _Gen30:TransientStorageCell . #Exists _Gen31:NonceCell . ( { false #Equals <acctID>
  ( W1:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W1:Int modInt pow160 )
  </acctID>
  <balance>
    _Gen0:Int
  </balance>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ( W1:Int modInt pow160 ) } ) ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen26:CodeCell . #Exists _Gen27:StorageCell . #Exists _Gen28:OrigStorageCell . #Exists _Gen29:TransientStorageCell . #Exists _Gen30:NonceCell . #Exists ACCT:Int . #Exists BALFROM:Int . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Not ( { ACCT:Int #Equals ( W1:Int modInt pow160 ) } ) ) ) ) ) ) ) ) ) ) ) ) )



Node 50:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <statusCode>
          EVMC_SUCCESS
        </statusCode>
        <touchedAccounts>
          _TOUCHEDACCOUNTS_CELL:Set |Set SetItem ( ( W0:Int modInt pow160 ) )
        </touchedAccounts>
        <callState>
          <id>
            ( W0:Int modInt pow160 )
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set |Set SetItem ( ( W0:Int modInt pow160 ) )
          </selfDestruct>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( W0:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ( W0:Int modInt pow160 )
            </acctID>
            <balance>
              0
            </balance>
            _Gen27:CodeCell
            _Gen28:StorageCell
            _Gen29:OrigStorageCell
            _Gen30:TransientStorageCell
            _Gen31:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { true #Equals ( notBool <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
  ...
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) )



Node 51:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W4:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool W0:Int ==Int W4:Int ) }
#And ( { true #Equals ( notBool W1:Int ==Int W4:Int ) }
#And ( { true #Equals ( notBool W2:Int ==Int W4:Int ) }
#And ( { true #Equals ( notBool W3:Int ==Int W4:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W4:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 52:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SELFDESTRUCT ]
      ~> #exec [ SELFDESTRUCT ]
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } )
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) } )
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) } )
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W3:Int : _WS:WordStack ) } )
#And #Not ( #Exists _WS:WordStack . #Exists W4:Int . { _WORDSTACK_CELL:WordStack #Equals ( W4:Int : _WS:WordStack ) } ) ) ) ) ) ) ) ) )



Node 53:

( <generatedTop>
  <kevm>
    <k>
      #accountNonexistent ( ( W0:Int modInt pow160 ) )
      ~> #freezerCselfdestruct1_ ( _SCHEDULE_CELL:Schedule ~> .K , BAL:Int ~> .K )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen25:CodeCell
            _Gen26:StorageCell
            _Gen27:OrigStorageCell
            _Gen28:TransientStorageCell
            _Gen29:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _Gen29:NonceCell #Equals <nonce>
  NONCE:Int
</nonce> }
#And ( { _Gen25:CodeCell #Equals <code>
  CODE:AccountCode
</code> }
#And ( { ACCTFROM:Int #Equals ( W0:Int modInt pow160 ) }
#And ( { _ID_CELL:Account #Equals ( W0:Int modInt pow160 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { false #Equals <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 54:

( <generatedTop>
  <kevm>
    <k>
      #accountNonexistent ( ( W0:Int modInt pow160 ) )
      ~> #freezerCselfdestruct1_ ( _SCHEDULE_CELL:Schedule ~> .K , BAL:Int ~> .K )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen25:CodeCell
            _Gen26:StorageCell
            _Gen27:OrigStorageCell
            _Gen28:TransientStorageCell
            _Gen29:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( AC3_:AccountCellMap ) }
#And ( #Not ( { ACCTFROM:Int #Equals ( W0:Int modInt pow160 ) } )
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { false #Equals <acctID>
  ( W0:Int modInt pow160 )
</acctID> in_keys ( AC3_:AccountCellMap ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And ( { _DotVar8:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account>
AC3_:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( W0:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account>
( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
AC3_:AccountCellMap ) ) } ) ) ) ) ) ) ) ) ) ) ) ) )



Node 55:

( <generatedTop>
  <kevm>
    <k>
      #accountNonexistent ( ( W0:Int modInt pow160 ) )
      ~> #freezerCselfdestruct1_ ( _SCHEDULE_CELL:Schedule ~> .K , BAL:Int ~> .K )
      ~> #deductGas
      ~> #access [ SELFDESTRUCT , SELFDESTRUCT ( W0:Int modInt pow160 ) ]
      ~> SELFDESTRUCT ( W0:Int modInt pow160 )
      ~> #pc [ SELFDESTRUCT ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <selfDestruct>
            _SELFDESTRUCT_CELL:Set
          </selfDestruct>
          <refund>
            #if ACCTFROM:Int in _SELFDESTRUCT_CELL:Set #then _REFUND_CELL:Int #else chop ( ( _REFUND_CELL:Int +Int Rselfdestruct < _SCHEDULE_CELL:Schedule > ) ) #fi
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen25:CodeCell
            _Gen26:StorageCell
            _Gen27:OrigStorageCell
            _Gen28:TransientStorageCell
            _Gen29:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) )




Proof LOG_1_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ LOG ( 1 ) ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WS:WordStack , 1 ) <Int 3
┃  │
┃  ├─ 3
┃  │   k: #next [ LOG ( 1 ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 7 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool _STATIC_CELL:Bool )
┃  ┃     3 <=Int #sizeWordStack ( _WS:WordStack , 1 )
┃  │
┃  ├─ 4
┃  │   k: #next [ LOG ( 1 ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  ├─ 6
┃  │   k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  ├─ 9 (split)
┃  ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     _USEGAS_CELL:Bool
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 11
┃  ┃  ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (4 steps)
┃  ┃  ┃  ├─ 22 (split)
┃  ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 23
┃  ┃  ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  │  (3 steps)
┃  ┃  ┃  ┃  ├─ 35 (split)
┃  ┃  ┃  ┃  │   k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃  ┃     ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  ├─ 41
┃  ┃  ┃  ┃  ┃  │   k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃  ┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  │  (2 steps)
┃  ┃  ┃  ┃  ┃  └─ 58 (leaf, pending)
┃  ┃  ┃  ┃  ┃      k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃  ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃  ┃     ┃ constraint:
┃  ┃  ┃  ┃     ┃     _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
┃  ┃  ┃  ┃     │
┃  ┃  ┃  ┃     └─ 42 (leaf, pending)
┃  ┃  ┃  ┃         k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃  ┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃     ┃ constraint:
┃  ┃  ┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃  ┃     │
┃  ┃  ┃     ├─ 24
┃  ┃  ┃     │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃  ┃     │   pc: _PC_CELL:Int
┃  ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     │
┃  ┃  ┃     │  (6 steps)
┃  ┃  ┃     └─ 49 (leaf, terminal)
┃  ┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃  ┃     │
┃  ┃     ├─ 12
┃  ┃     │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (1 step)
┃  ┃     ├─ 19
┃  ┃     │   k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃
┃  ┃     ┃ (1 step)
┃  ┃     ┣━━┓
┃  ┃     ┃  │
┃  ┃     ┃  └─ 20 (leaf, pending)
┃  ┃     ┃      k: #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃
┃  ┃     ┗━━┓
┃  ┃        │
┃  ┃        └─ 21 (stuck, leaf)
┃  ┃            k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃  ┃            pc: _PC_CELL:Int
┃  ┃            callDepth: _CALLDEPTH_CELL:Int
┃  ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     ├─ 10
┃     │   k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (1 step)
┃     ┣━━┓
┃     ┃  │
┃     ┃  ├─ 13 (split)
┃     ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┃ (branch)
┃     ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃     _USEGAS_CELL:Bool
┃     ┃  ┃  │
┃     ┃  ┃  ├─ 15
┃     ┃  ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  │
┃     ┃  ┃  │  (4 steps)
┃     ┃  ┃  ├─ 30 (split)
┃     ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┃ (branch)
┃     ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  ├─ 33
┃     ┃  ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃     ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  │  (3 steps)
┃     ┃  ┃  ┃  ├─ 46 (split)
┃     ┃  ┃  ┃  │   k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃     ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  ┃
┃     ┃  ┃  ┃  ┃ (branch)
┃     ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃  ┃  ┃     ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃     ┃  ┃  ┃  ┃  │
┃     ┃  ┃  ┃  ┃  └─ 56 (leaf, pending)
┃     ┃  ┃  ┃  ┃      k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃     ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  ┃
┃     ┃  ┃  ┃  ┗━━┓ subst: .Subst
┃     ┃  ┃  ┃     ┃ constraint:
┃     ┃  ┃  ┃     ┃     _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
┃     ┃  ┃  ┃     │
┃     ┃  ┃  ┃     └─ 57 (leaf, pending)
┃     ┃  ┃  ┃         k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃     ┃  ┃  ┃         pc: _PC_CELL:Int
┃     ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┗━━┓ subst: .Subst
┃     ┃  ┃     ┃ constraint:
┃     ┃  ┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃     ┃  ┃     │
┃     ┃  ┃     ├─ 34
┃     ┃  ┃     │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃     ┃  ┃     │   pc: _PC_CELL:Int
┃     ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃     │
┃     ┃  ┃     │  (6 steps)
┃     ┃  ┃     └─ 61 (leaf, pending)
┃     ┃  ┃         k: #halt ~> _K_CELL:K
┃     ┃  ┃         pc: _PC_CELL:Int
┃     ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃     ┃  ┃
┃     ┃  ┗━━┓ subst: .Subst
┃     ┃     ┃ constraint:
┃     ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃     ┃     │
┃     ┃     ├─ 16
┃     ┃     │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     │
┃     ┃     │  (1 step)
┃     ┃     ├─ 29
┃     ┃     │   k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┃ (1 step)
┃     ┃     ┣━━┓
┃     ┃     ┃  │
┃     ┃     ┃  └─ 31 (leaf, pending)
┃     ┃     ┃      k: #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃     ┃     ┃      pc: _PC_CELL:Int
┃     ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┗━━┓
┃     ┃        │
┃     ┃        └─ 32 (stuck, leaf)
┃     ┃            k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃     ┃            pc: _PC_CELL:Int
┃     ┃            callDepth: _CALLDEPTH_CELL:Int
┃     ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓
┃        │
┃        ├─ 14
┃        │   k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃        │   pc: _PC_CELL:Int
┃        │   callDepth: _CALLDEPTH_CELL:Int
┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┃ (1 step)
┃        ┣━━┓
┃        ┃  │
┃        ┃  ├─ 17 (split)
┃        ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃        ┃  │   pc: _PC_CELL:Int
┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃
┃        ┃  ┃ (branch)
┃        ┃  ┣━━┓ subst: .Subst
┃        ┃  ┃  ┃ constraint:
┃        ┃  ┃  ┃     _USEGAS_CELL:Bool
┃        ┃  ┃  │
┃        ┃  ┃  ├─ 25
┃        ┃  ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃        ┃  ┃  │   pc: _PC_CELL:Int
┃        ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃  │
┃        ┃  ┃  │  (4 steps)
┃        ┃  ┃  ├─ 43 (split)
┃        ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃        ┃  ┃  │   pc: _PC_CELL:Int
┃        ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃  ┃
┃        ┃  ┃  ┃ (branch)
┃        ┃  ┃  ┣━━┓ subst: .Subst
┃        ┃  ┃  ┃  ┃ constraint:
┃        ┃  ┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃        ┃  ┃  ┃  │
┃        ┃  ┃  ┃  ├─ 51
┃        ┃  ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃        ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃        ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃  ┃  │
┃        ┃  ┃  ┃  │  (3 steps)
┃        ┃  ┃  ┃  └─ 66 (leaf, pending)
┃        ┃  ┃  ┃      k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃        ┃  ┃  ┃      pc: _PC_CELL:Int
┃        ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃  ┃
┃        ┃  ┃  ┗━━┓ subst: .Subst
┃        ┃  ┃     ┃ constraint:
┃        ┃  ┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃        ┃  ┃     │
┃        ┃  ┃     └─ 52 (leaf, pending)
┃        ┃  ┃         k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃        ┃  ┃         pc: _PC_CELL:Int
┃        ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃
┃        ┃  ┗━━┓ subst: .Subst
┃        ┃     ┃ constraint:
┃        ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃        ┃     │
┃        ┃     ├─ 26
┃        ┃     │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃        ┃     │   pc: _PC_CELL:Int
┃        ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃     │
┃        ┃     │  (1 step)
┃        ┃     ├─ 38
┃        ┃     │   k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃        ┃     │   pc: _PC_CELL:Int
┃        ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃     ┃
┃        ┃     ┃ (1 step)
┃        ┃     ┣━━┓
┃        ┃     ┃  │
┃        ┃     ┃  └─ 44 (leaf, pending)
┃        ┃     ┃      k: #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃        ┃     ┃      pc: _PC_CELL:Int
┃        ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃        ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃     ┃
┃        ┃     ┗━━┓
┃        ┃        │
┃        ┃        └─ 45 (stuck, leaf)
┃        ┃            k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃        ┃            pc: _PC_CELL:Int
┃        ┃            callDepth: _CALLDEPTH_CELL:Int
┃        ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┗━━┓
┃           │
┃           ├─ 18
┃           │   k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃           │   pc: _PC_CELL:Int
┃           │   callDepth: _CALLDEPTH_CELL:Int
┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┃ (1 step)
┃           ┣━━┓
┃           ┃  │
┃           ┃  ├─ 27 (split)
┃           ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃           ┃  │   pc: _PC_CELL:Int
┃           ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃
┃           ┃  ┃ (branch)
┃           ┃  ┣━━┓ subst: .Subst
┃           ┃  ┃  ┃ constraint:
┃           ┃  ┃  ┃     _USEGAS_CELL:Bool
┃           ┃  ┃  │
┃           ┃  ┃  ├─ 36
┃           ┃  ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃           ┃  ┃  │   pc: _PC_CELL:Int
┃           ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃  │
┃           ┃  ┃  │  (4 steps)
┃           ┃  ┃  ├─ 53 (split)
┃           ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃           ┃  ┃  │   pc: _PC_CELL:Int
┃           ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃  ┃
┃           ┃  ┃  ┃ (branch)
┃           ┃  ┃  ┣━━┓ subst: .Subst
┃           ┃  ┃  ┃  ┃ constraint:
┃           ┃  ┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃           ┃  ┃  ┃  │
┃           ┃  ┃  ┃  └─ 64 (leaf, pending)
┃           ┃  ┃  ┃      k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃           ┃  ┃  ┃      pc: _PC_CELL:Int
┃           ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃           ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃  ┃
┃           ┃  ┃  ┗━━┓ subst: .Subst
┃           ┃  ┃     ┃ constraint:
┃           ┃  ┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃           ┃  ┃     │
┃           ┃  ┃     └─ 65 (leaf, pending)
┃           ┃  ┃         k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃           ┃  ┃         pc: _PC_CELL:Int
┃           ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃           ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃
┃           ┃  ┗━━┓ subst: .Subst
┃           ┃     ┃ constraint:
┃           ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃           ┃     │
┃           ┃     ├─ 37
┃           ┃     │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃           ┃     │   pc: _PC_CELL:Int
┃           ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃     │
┃           ┃     │  (1 step)
┃           ┃     ├─ 50
┃           ┃     │   k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃           ┃     │   pc: _PC_CELL:Int
┃           ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃     ┃
┃           ┃     ┃ (1 step)
┃           ┃     ┣━━┓
┃           ┃     ┃  │
┃           ┃     ┃  └─ 59 (leaf, pending)
┃           ┃     ┃      k: #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃           ┃     ┃      pc: _PC_CELL:Int
┃           ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃           ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃     ┃
┃           ┃     ┗━━┓
┃           ┃        │
┃           ┃        └─ 60 (leaf, pending)
┃           ┃            k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃           ┃            pc: _PC_CELL:Int
┃           ┃            callDepth: _CALLDEPTH_CELL:Int
┃           ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┗━━┓
┃              │
┃              ├─ 28
┃              │   k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃              │   pc: _PC_CELL:Int
┃              │   callDepth: _CALLDEPTH_CELL:Int
┃              │   statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃
┃              ┃ (1 step)
┃              ┣━━┓
┃              ┃  │
┃              ┃  ├─ 39 (split)
┃              ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃              ┃  │   pc: _PC_CELL:Int
┃              ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃              ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃  ┃
┃              ┃  ┃ (branch)
┃              ┃  ┣━━┓ subst: .Subst
┃              ┃  ┃  ┃ constraint:
┃              ┃  ┃  ┃     _USEGAS_CELL:Bool
┃              ┃  ┃  │
┃              ┃  ┃  ├─ 47
┃              ┃  ┃  │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃              ┃  ┃  │   pc: _PC_CELL:Int
┃              ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃              ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃  ┃  │
┃              ┃  ┃  │  (4 steps)
┃              ┃  ┃  └─ 63 (leaf, pending)
┃              ┃  ┃      k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃              ┃  ┃      pc: _PC_CELL:Int
┃              ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃              ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃  ┃
┃              ┃  ┗━━┓ subst: .Subst
┃              ┃     ┃ constraint:
┃              ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃              ┃     │
┃              ┃     ├─ 48
┃              ┃     │   k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃              ┃     │   pc: _PC_CELL:Int
┃              ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃              ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃     │
┃              ┃     │  (1 step)
┃              ┃     └─ 62 (leaf, pending)
┃              ┃         k: LOG ( 1 ) _W0:Int W1:Int ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃              ┃         pc: _PC_CELL:Int
┃              ┃         callDepth: _CALLDEPTH_CELL:Int
┃              ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃
┃              ┗━━┓
┃                 │
┃                 ├─ 40
┃                 │   k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃                 │   pc: _PC_CELL:Int
┃                 │   callDepth: _CALLDEPTH_CELL:Int
┃                 │   statusCode: _STATUSCODE_CELL:StatusCode
┃                 ┃
┃                 ┃ (1 step)
┃                 ┣━━┓
┃                 ┃  │
┃                 ┃  └─ 54 (leaf, pending)
┃                 ┃      k: #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ] ~> LOG ( 1 ) _W0:Int W1:Int ~> #pc ...
┃                 ┃      pc: _PC_CELL:Int
┃                 ┃      callDepth: _CALLDEPTH_CELL:Int
┃                 ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃                 ┃
┃                 ┗━━┓
┃                    │
┃                    └─ 55 (leaf, pending)
┃                        k: #exec [ LOG ( 1 ) ] ~> #pc [ LOG ( 1 ) ] ~> _K_CELL:K
┃                        pc: _PC_CELL:Int
┃                        callDepth: _CALLDEPTH_CELL:Int
┃                        statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     _STATIC_CELL:Bool
   ┃     3 <=Int #sizeWordStack ( _WS:WordStack , 1 )
   │
   ├─ 5
   │   k: #next [ LOG ( 1 ) ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 8 (leaf, terminal)
       k: #halt ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WS:WordStack , 1 ) <Int 3 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals false }
#And { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals true }
#And { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) } ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WS:WordStack , 1 ) <Int 3 } )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) } ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) } ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And #Not ( #Exists W1:Int . #Exists WS:WordStack . { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) } ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) } ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) } ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) } )
#And #Not ( #Exists W1:Int . #Exists WS0:WordStack . { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) } ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) } ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) } ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) } ) ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) } )
#And #Not ( #Exists W1:Int . #Exists WS1:WordStack . { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) } ) ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) } ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 1 , WS:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 1 , WS:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 1 <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) } ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And #Not ( #Exists ACCT:Int . ( { true #Equals 1 <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) } ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) } ) ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) } ) ) ) ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) } ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) } )
#And #Not ( #Exists W1:Int . #Exists WS2:WordStack . { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) } ) ) ) ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) } ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) } ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 1 , WS0:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 1 , WS0:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 1 <=Int #sizeWordStack ( WS0:WordStack , 0 ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) } ) ) ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And #Not ( #Exists ACCT:Int . ( { true #Equals 1 <=Int #sizeWordStack ( WS0:WordStack , 0 ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) )



Node 33:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) ) )



Node 34:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) )



Node 35:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) )



Node 36:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) } ) ) ) ) ) ) )



Node 37:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) } ) ) ) ) ) ) )



Node 38:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) } ) ) ) ) ) )



Node 39:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS3:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS3:WordStack , 2 ) } ) ) ) ) ) ) )



Node 40:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) } )
#And #Not ( #Exists W1:Int . #Exists WS3:WordStack . { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) } ) ) ) ) ) ) ) )



Node 41:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) )



Node 42:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) } ) ) ) ) ) )



Node 43:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) } ) ) ) ) ) )



Node 44:

( <generatedTop>
  <kevm>
    <k>
      #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 1 , WS1:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 1 , WS1:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals 1 <=Int #sizeWordStack ( WS1:WordStack , 0 ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) } ) ) ) ) ) ) ) )



Node 45:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) }
#And #Not ( #Exists ACCT:Int . ( { true #Equals 1 <=Int #sizeWordStack ( WS1:WordStack , 0 ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) ) )



Node 46:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) ) )



Node 47:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS3:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS3:WordStack , 2 ) } ) ) ) ) ) ) ) )



Node 48:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS3:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS3:WordStack , 2 ) } ) ) ) ) ) ) ) )



Node 49:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) )



Node 50:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) } ) ) ) ) ) ) )



Node 51:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) ) ) )



Node 52:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) ) )



Node 53:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) } ) ) ) ) ) ) )



Node 54:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS4:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS4:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS4:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS4:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS4:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS4:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS3:WordStack ~> .K ==K WS4:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS4:WordStack , 2 ) } ) ) ) ) ) ) ) )



Node 55:

( <generatedTop>
  <kevm>
    <k>
      #exec [ LOG ( 1 ) ]
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : _WS:WordStack )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) } )
#And ( #Not ( #Exists W1:Int . { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) } )
#And #Not ( #Exists W1:Int . #Exists WS4:WordStack . { _WS:WordStack #Equals ( W1:Int : WS4:WordStack ) } ) ) ) ) ) ) ) ) )



Node 56:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) ) )



Node 57:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) } ) ) ) ) ) ) )



Node 58:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) )



Node 59:

( <generatedTop>
  <kevm>
    <k>
      #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 1 , WS2:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 1 , WS2:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals 1 <=Int #sizeWordStack ( WS2:WordStack , 0 ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) } ) ) ) ) ) ) ) ) )



Node 60:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) }
#And #Not ( #Exists ACCT:Int . ( { true #Equals 1 <=Int #sizeWordStack ( WS2:WordStack , 0 ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) ) ) )



Node 61:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS0:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) )



Node 62:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS3:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS3:WordStack , 2 ) } ) ) ) ) ) ) ) )



Node 63:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS3:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS3:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And { true #Equals 3 <=Int #sizeWordStack ( WS3:WordStack , 2 ) } ) ) ) ) ) ) ) )



Node 64:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) ) ) ) )



Node 65:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 1 ) _W0:Int W1:Int ]
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS2:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) ) ) )



Node 66:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int Glogtopic < _SCHEDULE_CELL:Schedule > )
      ~> #deductGas
      ~> #access [ LOG ( 1 ) , LOG ( 1 ) _W0:Int W1:Int ]
      ~> LOG ( 1 ) _W0:Int W1:Int
      ~> #pc [ LOG ( 1 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { _WS:WordStack #Equals ( W1:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals 3 <=Int #sizeWordStack ( WS1:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) ) ) ) )




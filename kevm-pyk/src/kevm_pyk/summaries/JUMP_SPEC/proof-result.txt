Proof JUMP_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ JUMP ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1
┃  │
┃  ├─ 3
┃  │   k: #next [ JUMP ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 10 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024
┃  │
┃  ├─ 4
┃  │   k: #next [ JUMP ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 7 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 )
   ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 )
   │
   ├─ 5
   │   k: #next [ JUMP ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   ├─ 6
   │   k: #exec [ JUMP ] ~> #pc [ JUMP ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┃ (1 step)
   ┣━━┓
   ┃  │
   ┃  ├─ 8 (split)
   ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┃ (branch)
   ┃  ┣━━┓ subst: .Subst
   ┃  ┃  ┃ constraint:
   ┃  ┃  ┃     _USEGAS_CELL:Bool
   ┃  ┃  │
   ┃  ┃  ├─ 11
   ┃  ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  │
   ┃  ┃  │  (4 steps)
   ┃  ┃  ├─ 22
   ┃  ┃  │   k: Gmid < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMP , JUMP W0:Int ] ...
   ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┃ (1 step)
   ┃  ┃  ┣━━┓
   ┃  ┃  ┃  │
   ┃  ┃  ┃  ├─ 23
   ┃  ┃  ┃  │   k: #access [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃  │
   ┃  ┃  ┃  │  (1 step)
   ┃  ┃  ┃  ├─ 35 (split)
   ┃  ┃  ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃  ┃
   ┃  ┃  ┃  ┃ (branch)
   ┃  ┃  ┃  ┣━━┓ subst: .Subst
   ┃  ┃  ┃  ┃  ┃ constraint:
   ┃  ┃  ┃  ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
   ┃  ┃  ┃  ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
   ┃  ┃  ┃  ┃  │
   ┃  ┃  ┃  ┃  ├─ 44
   ┃  ┃  ┃  ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃  ┃  │
   ┃  ┃  ┃  ┃  │  (2 steps)
   ┃  ┃  ┃  ┃  └─ 72 (leaf, pending)
   ┃  ┃  ┃  ┃      k: #endBasicBlock ~> _K_CELL:K
   ┃  ┃  ┃  ┃      pc: W0:Int
   ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃  ┃
   ┃  ┃  ┃  ┗━━┓ subst: .Subst
   ┃  ┃  ┃     ┃ constraint: true
   ┃  ┃  ┃     │
   ┃  ┃  ┃     ├─ 45 (split)
   ┃  ┃  ┃     │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  ┃     │   pc: _PC_CELL:Int
   ┃  ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃     ┃
   ┃  ┃  ┃     ┃ (branch)
   ┃  ┃  ┃     ┣━━┓ subst: .Subst
   ┃  ┃  ┃     ┃  ┃ constraint:
   ┃  ┃  ┃     ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
   ┃  ┃  ┃     ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
   ┃  ┃  ┃     ┃  │
   ┃  ┃  ┃     ┃  └─ 65 (leaf, pending)
   ┃  ┃  ┃     ┃      k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  ┃     ┃      pc: _PC_CELL:Int
   ┃  ┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃     ┃
   ┃  ┃  ┃     ┗━━┓ subst: .Subst
   ┃  ┃  ┃        ┃ constraint: true
   ┃  ┃  ┃        │
   ┃  ┃  ┃        └─ 66 (leaf, pending)
   ┃  ┃  ┃            k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃  ┃  ┃            pc: _PC_CELL:Int
   ┃  ┃  ┃            callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃            statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┣━━┓
   ┃  ┃  ┃  │
   ┃  ┃  ┃  ├─ 24
   ┃  ┃  ┃  │   k: #end EVMC_OUT_OF_GAS ~> #access [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ J ...
   ┃  ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃  │
   ┃  ┃  ┃  │  (4 steps)
   ┃  ┃  ┃  └─ 49 (leaf, terminal)
   ┃  ┃  ┃      k: #halt ~> _K_CELL:K
   ┃  ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃      statusCode: EVMC_OUT_OF_GAS
   ┃  ┃  ┃
   ┃  ┃  ┗━━┓
   ┃  ┃     │
   ┃  ┃     └─ 25 (stuck, leaf)
   ┃  ┃         k: Gmid < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMP , JUMP W0:Int ] ...
   ┃  ┃         pc: _PC_CELL:Int
   ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┗━━┓ subst: .Subst
   ┃     ┃ constraint:
   ┃     ┃     ( notBool _USEGAS_CELL:Bool )
   ┃     │
   ┃     ├─ 12
   ┃     │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃     │   pc: _PC_CELL:Int
   ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     │
   ┃     │  (1 step)
   ┃     ├─ 17 (split)
   ┃     │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃     │   pc: _PC_CELL:Int
   ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃
   ┃     ┃ (branch)
   ┃     ┣━━┓ subst: .Subst
   ┃     ┃  ┃ constraint:
   ┃     ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
   ┃     ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
   ┃     ┃  │
   ┃     ┃  ├─ 20
   ┃     ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃     ┃  │   pc: _PC_CELL:Int
   ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  │
   ┃     ┃  │  (2 steps)
   ┃     ┃  ├─ 32
   ┃     ┃  │   k: #endBasicBlock ~> _K_CELL:K
   ┃     ┃  │   pc: W0:Int
   ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃
   ┃     ┃  ┃ (1 step)
   ┃     ┃  ┣━━┓
   ┃     ┃  ┃  │
   ┃     ┃  ┃  ├─ 41
   ┃     ┃  ┃  │   k: #execute ~> _DotVar2:K
   ┃     ┃  ┃  │   pc: W0:Int
   ┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃  │
   ┃     ┃  ┃  ┊  constraint: true
   ┃     ┃  ┃  ┊  subst: ...
   ┃     ┃  ┃  └─ 2 (leaf, target)
   ┃     ┃  ┃      k: _K_CELL:K
   ┃     ┃  ┃      pc: ?_FINAL_PC_CELL:Int
   ┃     ┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
   ┃     ┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃
   ┃     ┃  ┣━━┓
   ┃     ┃  ┃  │
   ┃     ┃  ┃  ├─ 42
   ┃     ┃  ┃  │   k: #endBasicBlock ~> _DotVar2:K
   ┃     ┃  ┃  │   pc: W0:Int
   ┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃  ┃
   ┃     ┃  ┃  ┃ (1 step)
   ┃     ┃  ┃  ┣━━┓
   ┃     ┃  ┃  ┃  │
   ┃     ┃  ┃  ┃  └─ 67 (leaf, pending)
   ┃     ┃  ┃  ┃      k: #execute ~> _DotVar3:K
   ┃     ┃  ┃  ┃      pc: W0:Int
   ┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃  ┃
   ┃     ┃  ┃  ┣━━┓
   ┃     ┃  ┃  ┃  │
   ┃     ┃  ┃  ┃  └─ 68 (leaf, pending)
   ┃     ┃  ┃  ┃      k: #endBasicBlock ~> _DotVar3:K
   ┃     ┃  ┃  ┃      pc: W0:Int
   ┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃  ┃
   ┃     ┃  ┃  ┗━━┓
   ┃     ┃  ┃     │
   ┃     ┃  ┃     └─ 69 (leaf, pending)
   ┃     ┃  ┃         k: #endBasicBlock ~> _DotVar2:K
   ┃     ┃  ┃         pc: W0:Int
   ┃     ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃  ┃
   ┃     ┃  ┗━━┓
   ┃     ┃     │
   ┃     ┃     ├─ 43
   ┃     ┃     │   k: #endBasicBlock ~> _K_CELL:K
   ┃     ┃     │   pc: W0:Int
   ┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃     ┃
   ┃     ┃     ┃ (1 step)
   ┃     ┃     ┣━━┓
   ┃     ┃     ┃  │
   ┃     ┃     ┃  └─ 63 (leaf, pending)
   ┃     ┃     ┃      k: #endBasicBlock ~> _DotVar2:K
   ┃     ┃     ┃      pc: W0:Int
   ┃     ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃     ┃
   ┃     ┃     ┗━━┓
   ┃     ┃        │
   ┃     ┃        └─ 64 (leaf, pending)
   ┃     ┃            k: #endBasicBlock ~> _K_CELL:K
   ┃     ┃            pc: W0:Int
   ┃     ┃            callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃            statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃
   ┃     ┗━━┓ subst: .Subst
   ┃        ┃ constraint: true
   ┃        │
   ┃        ├─ 21 (split)
   ┃        │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃        │   pc: _PC_CELL:Int
   ┃        │   callDepth: _CALLDEPTH_CELL:Int
   ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃        ┃
   ┃        ┃ (branch)
   ┃        ┣━━┓ subst: .Subst
   ┃        ┃  ┃ constraint:
   ┃        ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
   ┃        ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
   ┃        ┃  │
   ┃        ┃  ├─ 27
   ┃        ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃        ┃  │   pc: _PC_CELL:Int
   ┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃        ┃  │
   ┃        ┃  │  (2 steps)
   ┃        ┃  ├─ 48
   ┃        ┃  │   k: #endBasicBlock ~> _K_CELL:K
   ┃        ┃  │   pc: W0:Int
   ┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃        ┃  ┃
   ┃        ┃  ┃ (1 step)
   ┃        ┃  ┣━━┓
   ┃        ┃  ┃  │
   ┃        ┃  ┃  ├─ 60
   ┃        ┃  ┃  │   k: #execute ~> _DotVar2:K
   ┃        ┃  ┃  │   pc: W0:Int
   ┃        ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃        ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃        ┃  ┃  │
   ┃        ┃  ┃  ┊  constraint: true
   ┃        ┃  ┃  ┊  subst: ...
   ┃        ┃  ┃  └─ 2 (leaf, target)
   ┃        ┃  ┃      k: _K_CELL:K
   ┃        ┃  ┃      pc: ?_FINAL_PC_CELL:Int
   ┃        ┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
   ┃        ┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
   ┃        ┃  ┃
   ┃        ┃  ┣━━┓
   ┃        ┃  ┃  │
   ┃        ┃  ┃  └─ 61 (leaf, pending)
   ┃        ┃  ┃      k: #endBasicBlock ~> _DotVar2:K
   ┃        ┃  ┃      pc: W0:Int
   ┃        ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃        ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃        ┃  ┃
   ┃        ┃  ┗━━┓
   ┃        ┃     │
   ┃        ┃     └─ 62 (leaf, pending)
   ┃        ┃         k: #endBasicBlock ~> _K_CELL:K
   ┃        ┃         pc: W0:Int
   ┃        ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃        ┃         statusCode: _STATUSCODE_CELL:StatusCode
   ┃        ┃
   ┃        ┗━━┓ subst: .Subst
   ┃           ┃ constraint: true
   ┃           │
   ┃           ├─ 28 (split)
   ┃           │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃           │   pc: _PC_CELL:Int
   ┃           │   callDepth: _CALLDEPTH_CELL:Int
   ┃           │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃           ┃
   ┃           ┃ (branch)
   ┃           ┣━━┓ subst: .Subst
   ┃           ┃  ┃ constraint:
   ┃           ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
   ┃           ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
   ┃           ┃  │
   ┃           ┃  ├─ 46
   ┃           ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃           ┃  │   pc: _PC_CELL:Int
   ┃           ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃           ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃           ┃  │
   ┃           ┃  │  (2 steps)
   ┃           ┃  └─ 73 (leaf, pending)
   ┃           ┃      k: #endBasicBlock ~> _K_CELL:K
   ┃           ┃      pc: W0:Int
   ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃           ┃
   ┃           ┗━━┓ subst: .Subst
   ┃              ┃ constraint: true
   ┃              │
   ┃              ├─ 47 (split)
   ┃              │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃              │   pc: _PC_CELL:Int
   ┃              │   callDepth: _CALLDEPTH_CELL:Int
   ┃              │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃              ┃
   ┃              ┃ (branch)
   ┃              ┣━━┓ subst: .Subst
   ┃              ┃  ┃ constraint:
   ┃              ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
   ┃              ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
   ┃              ┃  │
   ┃              ┃  └─ 83 (leaf, pending)
   ┃              ┃      k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃              ┃      pc: _PC_CELL:Int
   ┃              ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃              ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃              ┃
   ┃              ┗━━┓ subst: .Subst
   ┃                 ┃ constraint: true
   ┃                 │
   ┃                 └─ 84 (leaf, pending)
   ┃                     k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
   ┃                     pc: _PC_CELL:Int
   ┃                     callDepth: _CALLDEPTH_CELL:Int
   ┃                     statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┗━━┓
      │
      ├─ 9
      │   k: #exec [ JUMP ] ~> #pc [ JUMP ] ~> _K_CELL:K
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┃ (1 step)
      ┣━━┓
      ┃  │
      ┃  ├─ 13 (split)
      ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃  │   pc: _PC_CELL:Int
      ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃
      ┃  ┃ (branch)
      ┃  ┣━━┓ subst: .Subst
      ┃  ┃  ┃ constraint:
      ┃  ┃  ┃     _USEGAS_CELL:Bool
      ┃  ┃  │
      ┃  ┃  ├─ 15
      ┃  ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃  ┃  │   pc: _PC_CELL:Int
      ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  │
      ┃  ┃  │  (4 steps)
      ┃  ┃  ├─ 31
      ┃  ┃  │   k: Gmid < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMP , JUMP W0:Int ] ...
      ┃  ┃  │   pc: _PC_CELL:Int
      ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  ┃
      ┃  ┃  ┃ (1 step)
      ┃  ┃  ┣━━┓
      ┃  ┃  ┃  │
      ┃  ┃  ┃  ├─ 36
      ┃  ┃  ┃  │   k: #access [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃  ┃  ┃  │   pc: _PC_CELL:Int
      ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  ┃  │
      ┃  ┃  ┃  │  (1 step)
      ┃  ┃  ┃  ├─ 54 (split)
      ┃  ┃  ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃  ┃  ┃  │   pc: _PC_CELL:Int
      ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  ┃  ┃
      ┃  ┃  ┃  ┃ (branch)
      ┃  ┃  ┃  ┣━━┓ subst: .Subst
      ┃  ┃  ┃  ┃  ┃ constraint:
      ┃  ┃  ┃  ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
      ┃  ┃  ┃  ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
      ┃  ┃  ┃  ┃  │
      ┃  ┃  ┃  ┃  └─ 77 (leaf, pending)
      ┃  ┃  ┃  ┃      k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
      ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  ┃  ┃
      ┃  ┃  ┃  ┗━━┓ subst: .Subst
      ┃  ┃  ┃     ┃ constraint: true
      ┃  ┃  ┃     │
      ┃  ┃  ┃     └─ 78 (leaf, pending)
      ┃  ┃  ┃         k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃  ┃  ┃         pc: _PC_CELL:Int
      ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  ┃
      ┃  ┃  ┣━━┓
      ┃  ┃  ┃  │
      ┃  ┃  ┃  ├─ 37
      ┃  ┃  ┃  │   k: #end EVMC_OUT_OF_GAS ~> #access [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ J ...
      ┃  ┃  ┃  │   pc: _PC_CELL:Int
      ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃  ┃  │
      ┃  ┃  ┃  │  (4 steps)
      ┃  ┃  ┃  └─ 82 (leaf, pending)
      ┃  ┃  ┃      k: #halt ~> _K_CELL:K
      ┃  ┃  ┃      pc: _PC_CELL:Int
      ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃  ┃      statusCode: EVMC_OUT_OF_GAS
      ┃  ┃  ┃
      ┃  ┃  ┗━━┓
      ┃  ┃     │
      ┃  ┃     └─ 38 (stuck, leaf)
      ┃  ┃         k: Gmid < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMP , JUMP W0:Int ] ...
      ┃  ┃         pc: _PC_CELL:Int
      ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃
      ┃  ┗━━┓ subst: .Subst
      ┃     ┃ constraint:
      ┃     ┃     ( notBool _USEGAS_CELL:Bool )
      ┃     │
      ┃     ├─ 16
      ┃     │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃     │   pc: _PC_CELL:Int
      ┃     │   callDepth: _CALLDEPTH_CELL:Int
      ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃     │
      ┃     │  (1 step)
      ┃     ├─ 26 (split)
      ┃     │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃     │   pc: _PC_CELL:Int
      ┃     │   callDepth: _CALLDEPTH_CELL:Int
      ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃     ┃
      ┃     ┃ (branch)
      ┃     ┣━━┓ subst: .Subst
      ┃     ┃  ┃ constraint:
      ┃     ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
      ┃     ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
      ┃     ┃  │
      ┃     ┃  ├─ 33
      ┃     ┃  │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃     ┃  │   pc: _PC_CELL:Int
      ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃     ┃  │
      ┃     ┃  │  (2 steps)
      ┃     ┃  ├─ 53
      ┃     ┃  │   k: #endBasicBlock ~> _K_CELL:K
      ┃     ┃  │   pc: W0:Int
      ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃     ┃  ┃
      ┃     ┃  ┃ (1 step)
      ┃     ┃  ┣━━┓
      ┃     ┃  ┃  │
      ┃     ┃  ┃  └─ 74 (leaf, pending)
      ┃     ┃  ┃      k: #execute ~> _DotVar2:K
      ┃     ┃  ┃      pc: W0:Int
      ┃     ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃     ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃     ┃  ┃
      ┃     ┃  ┣━━┓
      ┃     ┃  ┃  │
      ┃     ┃  ┃  └─ 75 (leaf, pending)
      ┃     ┃  ┃      k: #endBasicBlock ~> _DotVar2:K
      ┃     ┃  ┃      pc: W0:Int
      ┃     ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃     ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃     ┃  ┃
      ┃     ┃  ┗━━┓
      ┃     ┃     │
      ┃     ┃     └─ 76 (leaf, pending)
      ┃     ┃         k: #endBasicBlock ~> _K_CELL:K
      ┃     ┃         pc: W0:Int
      ┃     ┃         callDepth: _CALLDEPTH_CELL:Int
      ┃     ┃         statusCode: _STATUSCODE_CELL:StatusCode
      ┃     ┃
      ┃     ┗━━┓ subst: .Subst
      ┃        ┃ constraint: true
      ┃        │
      ┃        ├─ 34 (split)
      ┃        │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃        │   pc: _PC_CELL:Int
      ┃        │   callDepth: _CALLDEPTH_CELL:Int
      ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃        ┃
      ┃        ┃ (branch)
      ┃        ┣━━┓ subst: .Subst
      ┃        ┃  ┃ constraint:
      ┃        ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
      ┃        ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
      ┃        ┃  │
      ┃        ┃  └─ 51 (leaf, pending)
      ┃        ┃      k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃        ┃      pc: _PC_CELL:Int
      ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃        ┃
      ┃        ┗━━┓ subst: .Subst
      ┃           ┃ constraint: true
      ┃           │
      ┃           ├─ 52 (split)
      ┃           │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃           │   pc: _PC_CELL:Int
      ┃           │   callDepth: _CALLDEPTH_CELL:Int
      ┃           │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃           ┃
      ┃           ┃ (branch)
      ┃           ┣━━┓ subst: .Subst
      ┃           ┃  ┃ constraint:
      ┃           ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
      ┃           ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
      ┃           ┃  │
      ┃           ┃  └─ 85 (leaf, pending)
      ┃           ┃      k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃           ┃      pc: _PC_CELL:Int
      ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃           ┃
      ┃           ┗━━┓ subst: .Subst
      ┃              ┃ constraint: true
      ┃              │
      ┃              └─ 86 (leaf, pending)
      ┃                  k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
      ┃                  pc: _PC_CELL:Int
      ┃                  callDepth: _CALLDEPTH_CELL:Int
      ┃                  statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┗━━┓
         │
         ├─ 14
         │   k: #exec [ JUMP ] ~> #pc [ JUMP ] ~> _K_CELL:K
         │   pc: _PC_CELL:Int
         │   callDepth: _CALLDEPTH_CELL:Int
         │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃
         ┃ (1 step)
         ┣━━┓
         ┃  │
         ┃  ├─ 18 (split)
         ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃  │   pc: _PC_CELL:Int
         ┃  │   callDepth: _CALLDEPTH_CELL:Int
         ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃  ┃
         ┃  ┃ (branch)
         ┃  ┣━━┓ subst: .Subst
         ┃  ┃  ┃ constraint:
         ┃  ┃  ┃     _USEGAS_CELL:Bool
         ┃  ┃  │
         ┃  ┃  ├─ 29
         ┃  ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃  ┃  │   pc: _PC_CELL:Int
         ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
         ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃  ┃  │
         ┃  ┃  │  (4 steps)
         ┃  ┃  ├─ 55
         ┃  ┃  │   k: Gmid < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMP , JUMP W0:Int ] ...
         ┃  ┃  │   pc: _PC_CELL:Int
         ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
         ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃  ┃  ┃
         ┃  ┃  ┃ (1 step)
         ┃  ┃  ┣━━┓
         ┃  ┃  ┃  │
         ┃  ┃  ┃  └─ 79 (leaf, pending)
         ┃  ┃  ┃      k: #access [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃  ┃  ┃      pc: _PC_CELL:Int
         ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
         ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
         ┃  ┃  ┃
         ┃  ┃  ┣━━┓
         ┃  ┃  ┃  │
         ┃  ┃  ┃  └─ 80 (leaf, pending)
         ┃  ┃  ┃      k: #end EVMC_OUT_OF_GAS ~> #access [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ J ...
         ┃  ┃  ┃      pc: _PC_CELL:Int
         ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
         ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
         ┃  ┃  ┃
         ┃  ┃  ┗━━┓
         ┃  ┃     │
         ┃  ┃     └─ 81 (leaf, pending)
         ┃  ┃         k: Gmid < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMP , JUMP W0:Int ] ...
         ┃  ┃         pc: _PC_CELL:Int
         ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
         ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
         ┃  ┃
         ┃  ┗━━┓ subst: .Subst
         ┃     ┃ constraint:
         ┃     ┃     ( notBool _USEGAS_CELL:Bool )
         ┃     │
         ┃     ├─ 30
         ┃     │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃     │   pc: _PC_CELL:Int
         ┃     │   callDepth: _CALLDEPTH_CELL:Int
         ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃     │
         ┃     │  (1 step)
         ┃     ├─ 50 (split)
         ┃     │   k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃     │   pc: _PC_CELL:Int
         ┃     │   callDepth: _CALLDEPTH_CELL:Int
         ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃     ┃
         ┃     ┃ (branch)
         ┃     ┣━━┓ subst: .Subst
         ┃     ┃  ┃ constraint:
         ┃     ┃  ┃     1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ]
         ┃     ┃  ┃     W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes )
         ┃     ┃  │
         ┃     ┃  └─ 70 (leaf, pending)
         ┃     ┃      k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃     ┃      pc: _PC_CELL:Int
         ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
         ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
         ┃     ┃
         ┃     ┗━━┓ subst: .Subst
         ┃        ┃ constraint: true
         ┃        │
         ┃        └─ 71 (leaf, pending)
         ┃            k: JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
         ┃            pc: _PC_CELL:Int
         ┃            callDepth: _CALLDEPTH_CELL:Int
         ┃            statusCode: _STATUSCODE_CELL:StatusCode
         ┃
         ┗━━┓
            │
            ├─ 19
            │   k: #exec [ JUMP ] ~> #pc [ JUMP ] ~> _K_CELL:K
            │   pc: _PC_CELL:Int
            │   callDepth: _CALLDEPTH_CELL:Int
            │   statusCode: _STATUSCODE_CELL:StatusCode
            ┃
            ┃ (1 step)
            ┣━━┓
            ┃  │
            ┃  ├─ 39 (split)
            ┃  │   k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
            ┃  │   pc: _PC_CELL:Int
            ┃  │   callDepth: _CALLDEPTH_CELL:Int
            ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
            ┃  ┃
            ┃  ┃ (branch)
            ┃  ┣━━┓ subst: .Subst
            ┃  ┃  ┃ constraint:
            ┃  ┃  ┃     _USEGAS_CELL:Bool
            ┃  ┃  │
            ┃  ┃  └─ 56 (leaf, pending)
            ┃  ┃      k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
            ┃  ┃      pc: _PC_CELL:Int
            ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
            ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
            ┃  ┃
            ┃  ┗━━┓ subst: .Subst
            ┃     ┃ constraint:
            ┃     ┃     ( notBool _USEGAS_CELL:Bool )
            ┃     │
            ┃     └─ 57 (leaf, pending)
            ┃         k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
            ┃         pc: _PC_CELL:Int
            ┃         callDepth: _CALLDEPTH_CELL:Int
            ┃         statusCode: _STATUSCODE_CELL:StatusCode
            ┃
            ┗━━┓
               │
               ├─ 40
               │   k: #exec [ JUMP ] ~> #pc [ JUMP ] ~> _K_CELL:K
               │   pc: _PC_CELL:Int
               │   callDepth: _CALLDEPTH_CELL:Int
               │   statusCode: _STATUSCODE_CELL:StatusCode
               ┃
               ┃ (1 step)
               ┣━━┓
               ┃  │
               ┃  └─ 58 (leaf, pending)
               ┃      k: #gas [ JUMP , JUMP W0:Int ] ~> JUMP W0:Int ~> #pc [ JUMP ] ~> _K_CELL:K
               ┃      pc: _PC_CELL:Int
               ┃      callDepth: _CALLDEPTH_CELL:Int
               ┃      statusCode: _STATUSCODE_CELL:StatusCode
               ┃
               ┗━━┓
                  │
                  └─ 59 (leaf, pending)
                      k: #exec [ JUMP ] ~> #pc [ JUMP ] ~> _K_CELL:K
                      pc: _PC_CELL:Int
                      callDepth: _CALLDEPTH_CELL:Int
                      statusCode: _STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ JUMP ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMP ]
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 } )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMP ]
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 } )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMP ]
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } )
#And #Not ( #Exists W0:Int . #Exists WS0:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) } ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMP ]
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) } )
#And #Not ( #Exists W0:Int . #Exists WS1:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) } ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      Gmid < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      Gmid < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { true #Equals ( notBool _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > ) }
#And { true #Equals ( notBool Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas ) } ) ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      Gmid < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 33:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 34:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 35:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 36:

( <generatedTop>
  <kevm>
    <k>
      #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 37:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 38:

( <generatedTop>
  <kevm>
    <k>
      Gmid < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { true #Equals ( notBool _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > ) }
#And { true #Equals ( notBool Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas ) } ) ) ) ) ) ) )



Node 39:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS2:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS2:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 40:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMP ]
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) } )
#And #Not ( #Exists W0:Int . #Exists WS2:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS2:WordStack ) } ) ) ) ) ) ) )



Node 41:

( <generatedTop>
  <kevm>
    <k>
      #execute
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals #execute
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 42:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 43:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( #Not ( #Exists _DotVar2:K . { _K_CELL:K #Equals #execute
~> _DotVar2:K } )
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K } ) ) ) ) ) ) ) ) )



Node 44:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 45:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 46:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 47:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 48:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 49:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 50:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 51:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 52:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 53:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 54:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 55:

( <generatedTop>
  <kevm>
    <k>
      Gmid < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 56:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS2:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS2:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 57:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS2:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS2:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS2:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS2:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 58:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS3:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS3:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS1:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS2:WordStack ~> .K ==K WS3:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS3:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS3:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 59:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMP ]
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -1 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS2:WordStack ) } )
#And #Not ( #Exists W0:Int . #Exists WS3:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS3:WordStack ) } ) ) ) ) ) ) ) )



Node 60:

( <generatedTop>
  <kevm>
    <k>
      #execute
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals #execute
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 61:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 62:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( #Not ( #Exists _DotVar2:K . { _K_CELL:K #Equals #execute
~> _DotVar2:K } )
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K } ) ) ) ) ) ) ) ) )



Node 63:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals _Gen1:OpCode
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool _Gen0:OpCode ~> .K ==K _Gen1:OpCode ~> .K ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 64:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( #Not ( #Exists _DotVar2:K . { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K } )
#And ( #Not ( #Exists _DotVar2:K . { _K_CELL:K #Equals #execute
~> _DotVar2:K } )
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar2:K . #Exists _Gen1:OpCode . { _K_CELL:K #Equals _Gen1:OpCode
~> _DotVar2:K } ) ) ) ) ) ) ) ) ) )



Node 65:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 66:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )



Node 67:

( <generatedTop>
  <kevm>
    <k>
      #execute
      ~> _DotVar3:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _DotVar2:K #Equals #execute
~> _DotVar3:K }
#And ( { _K_CELL:K #Equals _Gen0:OpCode
~> #execute
~> _DotVar3:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 68:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _DotVar3:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _DotVar2:K #Equals _Gen1:OpCode
~> _DotVar3:K }
#And ( { _K_CELL:K #Equals _Gen0:OpCode
~> _Gen1:OpCode
~> _DotVar3:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 69:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( #Not ( #Exists _DotVar3:K . { _DotVar2:K #Equals #execute
~> _DotVar3:K } )
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar3:K . #Exists _Gen1:OpCode . { _DotVar2:K #Equals _Gen1:OpCode
~> _DotVar3:K } ) ) ) ) ) ) ) ) ) )



Node 70:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 71:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 72:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 73:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 74:

( <generatedTop>
  <kevm>
    <k>
      #execute
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals #execute
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 75:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _DotVar2:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 76:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals 1 ==Int _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( #Not ( #Exists _DotVar2:K . { _K_CELL:K #Equals #execute
~> _DotVar2:K } )
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { _K_CELL:K #Equals _Gen0:OpCode
~> _DotVar2:K } ) ) ) ) ) ) ) ) ) )



Node 77:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) ) )



Node 78:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 79:

( <generatedTop>
  <kevm>
    <k>
      #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Gmid < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 80:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 81:

( <generatedTop>
  <kevm>
    <k>
      Gmid < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMP , JUMP W0:Int ]
      ~> JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS1:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool WS0:WordStack ~> .K ==K WS1:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 1 ) +Int -1 ) >Int 1024 ) }
#And ( { true #Equals ( notBool _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > ) }
#And { true #Equals ( notBool Gmid < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas ) } ) ) ) ) ) ) ) )



Node 82:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Gmid < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 83:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) )



Node 84:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) )



Node 85:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            _JUMPDESTS_CELL:Bytes
          </jumpDests>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { 1 #Equals _JUMPDESTS_CELL:Bytes [ W0:Int ] }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( _JUMPDESTS_CELL:Bytes ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 86:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS0:WordStack ) }
#And ( { true #Equals ( notBool WS:WordStack ~> .K ==K WS0:WordStack ~> .K ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 1 ) <Int 1 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 1 ) +Int -1 ) >Int 1024 ) } ) ) ) ) )




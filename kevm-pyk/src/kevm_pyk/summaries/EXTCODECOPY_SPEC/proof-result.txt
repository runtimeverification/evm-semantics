Proof EXTCODECOPY_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ EXTCODECOPY ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4
┃  │
┃  ├─ 3
┃  │   k: #next [ EXTCODECOPY ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024
┃  │
┃  ├─ 4
┃  │   k: #next [ EXTCODECOPY ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 7 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 )
   ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 )
   │
   ├─ 5
   │   k: #next [ EXTCODECOPY ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (1 step)
   ├─ 6
   │   k: #addr [ EXTCODECOPY ] ~> #exec [ EXTCODECOPY ] ~> #pc [ EXTCODECOPY ] ~> _K_CELL ...
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┃ (1 step)
   ┣━━┓
   ┃  │
   ┃  ├─ 9
   ┃  │   k: #exec [ EXTCODECOPY ] ~> #pc [ EXTCODECOPY ] ~> _K_CELL:K
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┃ (1 step)
   ┃  ┣━━┓
   ┃  ┃  │
   ┃  ┃  └─ 11 (leaf, pending)
   ┃  ┃      k: #gas [ EXTCODECOPY , EXTCODECOPY ( W0:Int modInt pow160 ) W1:Int W2:Int W3:Int ] ...
   ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┗━━┓
   ┃     │
   ┃     └─ 12 (leaf, pending)
   ┃         k: #exec [ EXTCODECOPY ] ~> #pc [ EXTCODECOPY ] ~> _K_CELL:K
   ┃         pc: _PC_CELL:Int
   ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃         statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┗━━┓
      │
      ├─ 10
      │   k: #addr [ EXTCODECOPY ] ~> #exec [ EXTCODECOPY ] ~> #pc [ EXTCODECOPY ] ~> _K_CELL ...
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┃ (1 step)
      ┣━━┓
      ┃  │
      ┃  └─ 13 (leaf, pending)
      ┃      k: #exec [ EXTCODECOPY ] ~> #pc [ EXTCODECOPY ] ~> _K_CELL:K
      ┃      pc: _PC_CELL:Int
      ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┗━━┓
         │
         └─ 14 (leaf, pending)
             k: #addr [ EXTCODECOPY ] ~> #exec [ EXTCODECOPY ] ~> #pc [ EXTCODECOPY ] ~> _K_CELL ...
             pc: _PC_CELL:Int
             callDepth: _CALLDEPTH_CELL:Int
             statusCode: _STATUSCODE_CELL:StatusCode


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 } ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #addr [ EXTCODECOPY ]
      ~> #exec [ EXTCODECOPY ]
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 } )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #exec [ EXTCODECOPY ]
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W0:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 4 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -4 ) >Int 1024 ) } ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #addr [ EXTCODECOPY ]
      ~> #exec [ EXTCODECOPY ]
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 ) }
#And #Not ( #Exists _WS:WordStack . #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #gas [ EXTCODECOPY , EXTCODECOPY ( W0:Int modInt pow160 ) W1:Int W2:Int W3:Int ]
      ~> EXTCODECOPY ( W0:Int modInt pow160 ) W1:Int W2:Int W3:Int
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 4 ) <Int 4 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 4 ) +Int -4 ) >Int 1024 ) }
#And ( { _WS:WordStack #Equals ( W1:Int : ( W2:Int : ( W3:Int : WS:WordStack ) ) ) }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : ( W2:Int : ( W3:Int : WS:WordStack ) ) ) ) } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #exec [ EXTCODECOPY ]
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W0:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 4 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -4 ) >Int 1024 ) }
#And #Not ( #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists WS:WordStack . { _WS:WordStack #Equals ( W1:Int : ( W2:Int : ( W3:Int : WS:WordStack ) ) ) } ) ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #exec [ EXTCODECOPY ]
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W1:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool W0:Int ==Int W1:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int 4 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int -4 ) >Int 1024 ) } ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #addr [ EXTCODECOPY ]
      ~> #exec [ EXTCODECOPY ]
      ~> #pc [ EXTCODECOPY ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 4 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -4 ) >Int 1024 ) }
#And ( #Not ( #Exists _WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : _WS:WordStack ) } )
#And #Not ( #Exists _WS:WordStack . #Exists W1:Int . { _WORDSTACK_CELL:WordStack #Equals ( W1:Int : _WS:WordStack ) } ) ) ) ) )




Proof CALLCODE_7_SPEC Failed

┌─ 1 (root, init)
│   k: #next [ CALLCODE ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
│
│  (3 steps)
├─ 3 (split)
│   k: #gas [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4 ...
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     _USEGAS_CELL:Bool
┃  │
┃  ├─ 4
┃  │   k: #gas [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4 ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (4 steps)
┃  ├─ 9 (split)
┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _ME ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃  ┃  │
┃  ┃  ├─ 10
┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _ME ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (2 steps)
┃  ┃  ├─ 16
┃  ┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , CALLCODE _W0:Int ( _W1:Int modInt pow160 )  ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (1 step)
┃  ┃  ┣━━┓
┃  ┃  ┃  │
┃  ┃  ┃  └─ 17 (leaf, pending)
┃  ┃  ┃      k: Ccallgas ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ACCTFROM:Int ) , _W0: ...
┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓
┃  ┃     │
┃  ┃     └─ 18 (leaf, pending)
┃  ┃         k: #gasExec ( _SCHEDULE_CELL:Schedule , CALLCODE _W0:Int ( _W1:Int modInt pow160 )  ...
┃  ┃         pc: _PC_CELL:Int
┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃     │
┃     └─ 11 (leaf, pending)
┃         k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _ME ...
┃         pc: _PC_CELL:Int
┃         callDepth: _CALLDEPTH_CELL:Int
┃         statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool _USEGAS_CELL:Bool )
   │
   ├─ 5
   │   k: #gas [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4 ...
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (1 step)
   ├─ 6
   │   k: CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:I ...
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┃ (1 step)
   ┣━━┓
   ┃  │
   ┃  ├─ 7
   ┃  │   k: #accessAccounts ( _W1:Int modInt pow160 ) ~> #checkCall ACCTFROM:Int _W2:Int ~>  ...
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  │
   ┃  │  (2 steps)
   ┃  ├─ 12
   ┃  │   k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┃ (1 step)
   ┃  ┣━━┓
   ┃  ┃  │
   ┃  ┃  └─ 13 (leaf, pending)
   ┃  ┃      k: #refund _CALLGAS_CELL:Gas ~> #pushCallStack ~> #pushWorldState ~> #end EVMC_BALA ...
   ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┣━━┓
   ┃  ┃  │
   ┃  ┃  └─ 14 (leaf, pending)
   ┃  ┃      k: #checkDepthExceeded ~> #call ACCTFROM:Int ACCTFROM:Int ( _W1:Int modInt pow160 ) ...
   ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┗━━┓
   ┃     │
   ┃     └─ 15 (leaf, pending)
   ┃         k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
   ┃         pc: _PC_CELL:Int
   ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃         statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┗━━┓
      │
      └─ 8 (stuck, leaf)
          k: CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:I ...
          pc: _PC_CELL:Int
          callDepth: _CALLDEPTH_CELL:Int
          statusCode: _STATUSCODE_CELL:StatusCode


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

<generatedTop>
  <kevm>
    <k>
      #gas [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #gas [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { _USEGAS_CELL:Bool #Equals true } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { _USEGAS_CELL:Bool #Equals false } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool _USEGAS_CELL:Bool ) } )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #accessAccounts ( _W1:Int modInt pow160 )
      ~> #checkCall ACCTFROM:Int _W2:Int
      ~> #call ACCTFROM:Int ACCTFROM:Int ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And { true #Equals ( notBool _USEGAS_CELL:Bool ) } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And #Not ( #Exists ACCTFROM:Int . { _ID_CELL:Account #Equals ACCTFROM:Int } ) ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> #access [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals _USEGAS_CELL:Bool } )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> #access [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> #access [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ACCTFROM:Int ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And { true #Equals ( notBool _USEGAS_CELL:Bool ) } ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #refund _CALLGAS_CELL:Gas
      ~> #pushCallStack
      ~> #pushWorldState
      ~> #end EVMC_BALANCE_UNDERFLOW
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ACCTFROM:Int ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <callGas>
            _CALLGAS_CELL:Gas
          </callGas>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen23:CodeCell
            _Gen24:StorageCell
            _Gen25:OrigStorageCell
            _Gen26:TransientStorageCell
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ACCTFROM:Int ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ACCTFROM:Int ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int )
      ~> #deductGas
      ~> #access [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      Ccallgas ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ACCTFROM:Int ) , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set )
      ~> #allocateCallGas
      ~> Ccall ( _SCHEDULE_CELL:Schedule , #accountNonexistent ( ACCTFROM:Int ) , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set )
      ~> #deductGas
      ~> #access [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int )
      ~> #deductGas
      ~> #access [ CALLCODE , CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALLCODE _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALLCODE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( #Not ( #Exists ACCTFROM:Int . { _ID_CELL:Account #Equals ACCTFROM:Int } )
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) )




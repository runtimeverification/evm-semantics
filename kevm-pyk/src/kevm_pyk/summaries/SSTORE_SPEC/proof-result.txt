Proof SSTORE_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ SSTORE ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2
┃  │
┃  ├─ 3
┃  │   k: #next [ SSTORE ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 10 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024
┃  │
┃  ├─ 4
┃  │   k: #next [ SSTORE ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool _STATIC_CELL:Bool )
┃  ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 )
┃  ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 )
┃  │
┃  ├─ 5
┃  │   k: #next [ SSTORE ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  ├─ 7
┃  │   k: #exec [ SSTORE ] ~> #pc [ SSTORE ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  ├─ 11 (split)
┃  ┃  │   k: #gas [ SSTORE , SSTORE W0:Int W1:Int ] ~> SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     _USEGAS_CELL:Bool
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 13
┃  ┃  ┃  │   k: #gas [ SSTORE , SSTORE W0:Int W1:Int ] ~> SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (3 steps)
┃  ┃  ┃  ├─ 22
┃  ┃  ┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W1:Int ) ~> #deductGas ~> #ac ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (1 step)
┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 25
┃  ┃  ┃  ┃  │   k: Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) ,  ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┃ (1 step)
┃  ┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  └─ 36 (leaf, pending)
┃  ┃  ┃  ┃  ┃      k: #access [ SSTORE , SSTORE W0:Int W1:Int ] ~> SSTORE W0:Int W1:Int ~> #pc [ SSTOR ...
┃  ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  └─ 37 (leaf, pending)
┃  ┃  ┃  ┃  ┃      k: #end EVMC_OUT_OF_GAS ~> #access [ SSTORE , SSTORE W0:Int W1:Int ] ~> SSTORE W0:I ...
┃  ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┗━━┓
┃  ┃  ┃  ┃     │
┃  ┃  ┃  ┃     └─ 38 (leaf, pending)
┃  ┃  ┃  ┃         k: Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) ,  ...
┃  ┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 26
┃  ┃  ┃  ┃  │   k: #end EVMC_OUT_OF_GAS ~> #deductGas ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]  ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  │  (5 steps)
┃  ┃  ┃  ┃  └─ 41 (leaf, pending)
┃  ┃  ┃  ┃      k: #halt ~> _K_CELL:K
┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃      statusCode: EVMC_OUT_OF_GAS
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓
┃  ┃  ┃     │
┃  ┃  ┃     ├─ 27
┃  ┃  ┃     │   k: #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W1:Int ) ~> #deductGas ~> #ac ...
┃  ┃  ┃     │   pc: _PC_CELL:Int
┃  ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     ┃
┃  ┃  ┃     ┃ (1 step)
┃  ┃  ┃     ┣━━┓
┃  ┃  ┃     ┃  │
┃  ┃  ┃     ┃  └─ 39 (leaf, pending)
┃  ┃  ┃     ┃      k: Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE0:Map , W0:Int ) , ...
┃  ┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     ┃
┃  ┃  ┃     ┗━━┓
┃  ┃  ┃        │
┃  ┃  ┃        └─ 40 (leaf, pending)
┃  ┃  ┃            k: #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W1:Int ) ~> #deductGas ~> #ac ...
┃  ┃  ┃            pc: _PC_CELL:Int
┃  ┃  ┃            callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃  ┃     │
┃  ┃     ├─ 14
┃  ┃     │   k: #gas [ SSTORE , SSTORE W0:Int W1:Int ] ~> SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (1 step)
┃  ┃     ├─ 17
┃  ┃     │   k: SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃
┃  ┃     ┃ (1 step)
┃  ┃     ┣━━┓
┃  ┃     ┃  │
┃  ┃     ┃  └─ 20 (leaf, pending)
┃  ┃     ┃      k: #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     ┃
┃  ┃     ┗━━┓
┃  ┃        │
┃  ┃        ├─ 21
┃  ┃        │   k: SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃        │   pc: _PC_CELL:Int
┃  ┃        │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃        ┃
┃  ┃        ┃ (1 step)
┃  ┃        ┣━━┓
┃  ┃        ┃  │
┃  ┃        ┃  └─ 28 (leaf, pending)
┃  ┃        ┃      k: #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃        ┃      pc: _PC_CELL:Int
┃  ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃        ┃
┃  ┃        ┗━━┓
┃  ┃           │
┃  ┃           ├─ 29
┃  ┃           │   k: SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃           │   pc: _PC_CELL:Int
┃  ┃           │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃           ┃
┃  ┃           ┃ (1 step)
┃  ┃           ┣━━┓
┃  ┃           ┃  │
┃  ┃           ┃  └─ 42 (leaf, pending)
┃  ┃           ┃      k: #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃           ┃      pc: _PC_CELL:Int
┃  ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃           ┃
┃  ┃           ┗━━┓
┃  ┃              │
┃  ┃              └─ 43 (leaf, pending)
┃  ┃                  k: SSTORE W0:Int W1:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃  ┃                  pc: _PC_CELL:Int
┃  ┃                  callDepth: _CALLDEPTH_CELL:Int
┃  ┃                  statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     ├─ 12
┃     │   k: #exec [ SSTORE ] ~> #pc [ SSTORE ] ~> _K_CELL:K
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (1 step)
┃     ┣━━┓
┃     ┃  │
┃     ┃  ├─ 15 (split)
┃     ┃  │   k: #gas [ SSTORE , SSTORE W0:Int W2:Int ] ~> SSTORE W0:Int W2:Int ~> #pc [ SSTORE ] ...
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┃ (branch)
┃     ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃     _USEGAS_CELL:Bool
┃     ┃  ┃  │
┃     ┃  ┃  ├─ 18
┃     ┃  ┃  │   k: #gas [ SSTORE , SSTORE W0:Int W2:Int ] ~> SSTORE W0:Int W2:Int ~> #pc [ SSTORE ] ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  │
┃     ┃  ┃  │  (3 steps)
┃     ┃  ┃  ├─ 35
┃     ┃  ┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W2:Int ) ~> #deductGas ~> #ac ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┃ (1 step)
┃     ┃  ┃  ┣━━┓
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  └─ 46 (leaf, pending)
┃     ┃  ┃  ┃      k: Csstore ( _SCHEDULE_CELL:Schedule , W2:Int , #lookup ( STORAGE:Map , W0:Int ) ,  ...
┃     ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┣━━┓
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  └─ 47 (leaf, pending)
┃     ┃  ┃  ┃      k: #end EVMC_OUT_OF_GAS ~> #deductGas ~> #access [ SSTORE , SSTORE W0:Int W2:Int ]  ...
┃     ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┗━━┓
┃     ┃  ┃     │
┃     ┃  ┃     └─ 48 (leaf, pending)
┃     ┃  ┃         k: #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W2:Int ) ~> #deductGas ~> #ac ...
┃     ┃  ┃         pc: _PC_CELL:Int
┃     ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┗━━┓ subst: .Subst
┃     ┃     ┃ constraint:
┃     ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃     ┃     │
┃     ┃     ├─ 19
┃     ┃     │   k: #gas [ SSTORE , SSTORE W0:Int W2:Int ] ~> SSTORE W0:Int W2:Int ~> #pc [ SSTORE ] ...
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     │
┃     ┃     │  (1 step)
┃     ┃     ├─ 34
┃     ┃     │   k: SSTORE W0:Int W2:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┃ (1 step)
┃     ┃     ┣━━┓
┃     ┃     ┃  │
┃     ┃     ┃  └─ 44 (leaf, pending)
┃     ┃     ┃      k: #pc [ SSTORE ] ~> _K_CELL:K
┃     ┃     ┃      pc: _PC_CELL:Int
┃     ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┗━━┓
┃     ┃        │
┃     ┃        └─ 45 (leaf, pending)
┃     ┃            k: SSTORE W0:Int W2:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃     ┃            pc: _PC_CELL:Int
┃     ┃            callDepth: _CALLDEPTH_CELL:Int
┃     ┃            statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓
┃        │
┃        ├─ 16
┃        │   k: #exec [ SSTORE ] ~> #pc [ SSTORE ] ~> _K_CELL:K
┃        │   pc: _PC_CELL:Int
┃        │   callDepth: _CALLDEPTH_CELL:Int
┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┃ (1 step)
┃        ┣━━┓
┃        ┃  │
┃        ┃  ├─ 23 (split)
┃        ┃  │   k: #gas [ SSTORE , SSTORE W0:Int W3:Int ] ~> SSTORE W0:Int W3:Int ~> #pc [ SSTORE ] ...
┃        ┃  │   pc: _PC_CELL:Int
┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃
┃        ┃  ┃ (branch)
┃        ┃  ┣━━┓ subst: .Subst
┃        ┃  ┃  ┃ constraint:
┃        ┃  ┃  ┃     _USEGAS_CELL:Bool
┃        ┃  ┃  │
┃        ┃  ┃  └─ 30 (leaf, pending)
┃        ┃  ┃      k: #gas [ SSTORE , SSTORE W0:Int W3:Int ] ~> SSTORE W0:Int W3:Int ~> #pc [ SSTORE ] ...
┃        ┃  ┃      pc: _PC_CELL:Int
┃        ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃        ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃  ┃
┃        ┃  ┗━━┓ subst: .Subst
┃        ┃     ┃ constraint:
┃        ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃        ┃     │
┃        ┃     ├─ 31
┃        ┃     │   k: #gas [ SSTORE , SSTORE W0:Int W3:Int ] ~> SSTORE W0:Int W3:Int ~> #pc [ SSTORE ] ...
┃        ┃     │   pc: _PC_CELL:Int
┃        ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃        ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃     │
┃        ┃     │  (1 step)
┃        ┃     └─ 51 (leaf, pending)
┃        ┃         k: SSTORE W0:Int W3:Int ~> #pc [ SSTORE ] ~> _K_CELL:K
┃        ┃         pc: _PC_CELL:Int
┃        ┃         callDepth: _CALLDEPTH_CELL:Int
┃        ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┗━━┓
┃           │
┃           ├─ 24
┃           │   k: #exec [ SSTORE ] ~> #pc [ SSTORE ] ~> _K_CELL:K
┃           │   pc: _PC_CELL:Int
┃           │   callDepth: _CALLDEPTH_CELL:Int
┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┃ (1 step)
┃           ┣━━┓
┃           ┃  │
┃           ┃  ├─ 32 (split)
┃           ┃  │   k: #gas [ SSTORE , SSTORE W0:Int W4:Int ] ~> SSTORE W0:Int W4:Int ~> #pc [ SSTORE ] ...
┃           ┃  │   pc: _PC_CELL:Int
┃           ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃           ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃
┃           ┃  ┃ (branch)
┃           ┃  ┣━━┓ subst: .Subst
┃           ┃  ┃  ┃ constraint:
┃           ┃  ┃  ┃     _USEGAS_CELL:Bool
┃           ┃  ┃  │
┃           ┃  ┃  └─ 49 (leaf, pending)
┃           ┃  ┃      k: #gas [ SSTORE , SSTORE W0:Int W4:Int ] ~> SSTORE W0:Int W4:Int ~> #pc [ SSTORE ] ...
┃           ┃  ┃      pc: _PC_CELL:Int
┃           ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃           ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃  ┃
┃           ┃  ┗━━┓ subst: .Subst
┃           ┃     ┃ constraint:
┃           ┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃           ┃     │
┃           ┃     └─ 50 (leaf, pending)
┃           ┃         k: #gas [ SSTORE , SSTORE W0:Int W4:Int ] ~> SSTORE W0:Int W4:Int ~> #pc [ SSTORE ] ...
┃           ┃         pc: _PC_CELL:Int
┃           ┃         callDepth: _CALLDEPTH_CELL:Int
┃           ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┗━━┓
┃              │
┃              └─ 33 (leaf, pending)
┃                  k: #exec [ SSTORE ] ~> #pc [ SSTORE ] ~> _K_CELL:K
┃                  pc: _PC_CELL:Int
┃                  callDepth: _CALLDEPTH_CELL:Int
┃                  statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     _STATIC_CELL:Bool
   ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 )
   ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 )
   │
   ├─ 6
   │   k: #next [ SSTORE ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 9 (leaf, terminal)
       k: #halt ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ SSTORE ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals false }
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } ) ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #next [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals true }
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } ) ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SSTORE ]
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) } ) ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) } ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 } )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SSTORE ]
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SSTORE ]
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } )
#And #Not ( #Exists W0:Int . #Exists W2:Int . #Exists WS0:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) } ) ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen23:BalanceCell
            _Gen24:CodeCell
            <storage>
              STORAGE:Map [ W0:Int <- W1:Int ]
            </storage>
            _Gen25:OrigStorageCell
            _Gen26:TransientStorageCell
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists STORAGE:Map . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W1:Int )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W3:Int ]
      ~> SSTORE W0:Int W3:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W3:Int }
#And { WS:WordStack #Equals WS1:WordStack } ) )
#And #Not ( ( { W2:Int #Equals W3:Int }
#And { WS0:WordStack #Equals WS1:WordStack } ) ) ) ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SSTORE ]
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) } )
#And #Not ( #Exists W0:Int . #Exists W3:Int . #Exists WS1:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) } ) ) ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <refund>
            ( _REFUND_CELL:Int +Int Rsstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) )
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen25:BalanceCell
            _Gen26:CodeCell
            <storage>
              STORAGE:Map
            </storage>
            <origStorage>
              ORIGSTORAGE:Map
            </origStorage>
            _Gen27:TransientStorageCell
            _Gen28:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W1:Int )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > } ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen25:BalanceCell . #Exists _Gen26:CodeCell . #Exists _Gen27:TransientStorageCell . #Exists _Gen28:NonceCell . #Exists ACCT:Int . #Exists ORIGSTORAGE:Map . #Exists STORAGE:Map . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            _Gen28:BalanceCell
            _Gen29:CodeCell
            <storage>
              STORAGE0:Map [ W0:Int <- W1:Int ]
            </storage>
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  <storage>
    STORAGE0:Map
  </storage>
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  <storage>
    STORAGE0:Map
  </storage>
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen28:BalanceCell . #Exists _Gen29:CodeCell . #Exists _Gen30:OrigStorageCell . #Exists _Gen31:TransientStorageCell . #Exists _Gen32:NonceCell . #Exists ACCT0:Int . #Exists STORAGE0:Map . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  <storage>
    STORAGE0:Map
  </storage>
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT0:Int } ) ) ) ) ) ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W3:Int ]
      ~> SSTORE W0:Int W3:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W3:Int }
#And { WS:WordStack #Equals WS1:WordStack } ) )
#And #Not ( ( { W2:Int #Equals W3:Int }
#And { WS0:WordStack #Equals WS1:WordStack } ) ) ) ) ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W3:Int ]
      ~> SSTORE W0:Int W3:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W3:Int }
#And { WS:WordStack #Equals WS1:WordStack } ) )
#And #Not ( ( { W2:Int #Equals W3:Int }
#And { WS0:WordStack #Equals WS1:WordStack } ) ) ) ) ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W4:Int ]
      ~> SSTORE W0:Int W4:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS2:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W4:Int : WS2:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS2:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W4:Int }
#And { WS:WordStack #Equals WS2:WordStack } ) )
#And ( #Not ( ( { W2:Int #Equals W4:Int }
#And { WS0:WordStack #Equals WS2:WordStack } ) )
#And #Not ( ( { W3:Int #Equals W4:Int }
#And { WS1:WordStack #Equals WS2:WordStack } ) ) ) ) ) ) ) ) )



Node 33:

( <generatedTop>
  <kevm>
    <k>
      #exec [ SSTORE ]
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) } )
#And #Not ( #Exists W0:Int . #Exists W4:Int . #Exists WS2:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W4:Int : WS2:WordStack ) ) } ) ) ) ) ) ) ) )



Node 34:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) ) )



Node 35:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W2:Int )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) ) )



Node 36:

( <generatedTop>
  <kevm>
    <k>
      #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) )
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <refund>
            ( _REFUND_CELL:Int +Int Rsstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) )
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen25:BalanceCell
            _Gen26:CodeCell
            <storage>
              STORAGE:Map
            </storage>
            <origStorage>
              ORIGSTORAGE:Map
            </origStorage>
            _Gen27:TransientStorageCell
            _Gen28:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { true #Equals Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) ) ) ) ) ) )



Node 37:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <refund>
            ( _REFUND_CELL:Int +Int Rsstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) )
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen25:BalanceCell
            _Gen26:CodeCell
            <storage>
              STORAGE:Map
            </storage>
            <origStorage>
              ORIGSTORAGE:Map
            </origStorage>
            _Gen27:TransientStorageCell
            _Gen28:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) ) ) ) ) ) )



Node 38:

( <generatedTop>
  <kevm>
    <k>
      Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <refund>
            ( _REFUND_CELL:Int +Int Rsstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) )
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen25:BalanceCell
            _Gen26:CodeCell
            <storage>
              STORAGE:Map
            </storage>
            <origStorage>
              ORIGSTORAGE:Map
            </origStorage>
            _Gen27:TransientStorageCell
            _Gen28:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { true #Equals ( notBool _GAS_CELL:Gas <Gas Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) ) }
#And ( { true #Equals ( notBool Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) <=Gas _GAS_CELL:Gas ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) ) ) ) ) ) ) )



Node 39:

( <generatedTop>
  <kevm>
    <k>
      Csstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE0:Map , W0:Int ) , #lookup ( ORIGSTORAGE0:Map , W0:Int ) )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <refund>
            ( _REFUND_CELL:Int +Int Rsstore ( _SCHEDULE_CELL:Schedule , W1:Int , #lookup ( STORAGE0:Map , W0:Int ) , #lookup ( ORIGSTORAGE0:Map , W0:Int ) ) )
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            _Gen29:BalanceCell
            _Gen30:CodeCell
            <storage>
              STORAGE0:Map
            </storage>
            <origStorage>
              ORIGSTORAGE0:Map
            </origStorage>
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen29:BalanceCell
  _Gen30:CodeCell
  <storage>
    STORAGE0:Map
  </storage>
  <origStorage>
    ORIGSTORAGE0:Map
  </origStorage>
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And ( #Not ( ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > } ) )
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar9:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar9:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar9:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen29:BalanceCell
  _Gen30:CodeCell
  <storage>
    STORAGE0:Map
  </storage>
  <origStorage>
    ORIGSTORAGE0:Map
  </origStorage>
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar8:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 40:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W1:Int )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W1:Int ]
      ~> SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > } ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) } ) ) ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen29:BalanceCell . #Exists _Gen30:CodeCell . #Exists _Gen31:TransientStorageCell . #Exists _Gen32:NonceCell . #Exists ACCT0:Int . #Exists ORIGSTORAGE0:Map . #Exists STORAGE0:Map . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen29:BalanceCell
  _Gen30:CodeCell
  <storage>
    STORAGE0:Map
  </storage>
  <origStorage>
    ORIGSTORAGE0:Map
  </origStorage>
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT0:Int } ) ) ) ) ) ) ) ) ) ) ) )



Node 41:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) ) ) )



Node 42:

( <generatedTop>
  <kevm>
    <k>
      #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT1:Int
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT1:Int
            </acctID>
            _Gen33:BalanceCell
            _Gen34:CodeCell
            <storage>
              STORAGE1:Map [ W0:Int <- W1:Int ]
            </storage>
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT1:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  <storage>
    STORAGE1:Map
  </storage>
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  <storage>
    STORAGE1:Map
  </storage>
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT0:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  <storage>
    STORAGE1:Map
  </storage>
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) ) )



Node 43:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W1:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen33:BalanceCell . #Exists _Gen34:CodeCell . #Exists _Gen35:OrigStorageCell . #Exists _Gen36:TransientStorageCell . #Exists _Gen37:NonceCell . #Exists ACCT1:Int . #Exists STORAGE1:Map . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  <storage>
    STORAGE1:Map
  </storage>
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT1:Int } ) ) ) ) ) ) ) ) ) ) )



Node 44:

( <generatedTop>
  <kevm>
    <k>
      #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen23:BalanceCell
            _Gen24:CodeCell
            <storage>
              STORAGE:Map [ W0:Int <- W2:Int ]
            </storage>
            _Gen25:OrigStorageCell
            _Gen26:TransientStorageCell
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) )
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 45:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists STORAGE:Map . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) ) ) )



Node 46:

( <generatedTop>
  <kevm>
    <k>
      Csstore ( _SCHEDULE_CELL:Schedule , W2:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <refund>
            ( _REFUND_CELL:Int +Int Rsstore ( _SCHEDULE_CELL:Schedule , W2:Int , #lookup ( STORAGE:Map , W0:Int ) , #lookup ( ORIGSTORAGE:Map , W0:Int ) ) )
          </refund>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen25:BalanceCell
            _Gen26:CodeCell
            <storage>
              STORAGE:Map
            </storage>
            <origStorage>
              ORIGSTORAGE:Map
            </origStorage>
            _Gen27:TransientStorageCell
            _Gen28:NonceCell
          </account>
          _DotVar8:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) )
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) ) ) ) ) ) )



Node 47:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) ) ) ) )



Node 48:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , SSTORE W0:Int W2:Int )
      ~> #deductGas
      ~> #access [ SSTORE , SSTORE W0:Int W2:Int ]
      ~> SSTORE W0:Int W2:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            WS0:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) )
#And ( #Not ( ( { true #Equals Ghassstorestipend << _SCHEDULE_CELL:Schedule >> }
#And { true #Equals _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > } ) )
#And #Not ( #Exists _DotVar8:AccountCellMap . #Exists _Gen25:BalanceCell . #Exists _Gen26:CodeCell . #Exists _Gen27:TransientStorageCell . #Exists _Gen28:NonceCell . #Exists ACCT:Int . #Exists ORIGSTORAGE:Map . #Exists STORAGE:Map . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And ( { true #Equals ( ( notBool Ghassstorestipend << _SCHEDULE_CELL:Schedule >> ) orBool ( notBool _GAS_CELL:Gas <=Gas Gcallstipend < _SCHEDULE_CELL:Schedule > ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account>
_DotVar8:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) ) ) ) ) ) )



Node 49:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W4:Int ]
      ~> SSTORE W0:Int W4:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS2:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W4:Int : WS2:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS2:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W4:Int }
#And { WS:WordStack #Equals WS2:WordStack } ) )
#And ( #Not ( ( { W2:Int #Equals W4:Int }
#And { WS0:WordStack #Equals WS2:WordStack } ) )
#And #Not ( ( { W3:Int #Equals W4:Int }
#And { WS1:WordStack #Equals WS2:WordStack } ) ) ) ) ) ) ) ) ) )



Node 50:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SSTORE , SSTORE W0:Int W4:Int ]
      ~> SSTORE W0:Int W4:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS2:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS2:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W4:Int : WS2:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS2:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W4:Int }
#And { WS:WordStack #Equals WS2:WordStack } ) )
#And ( #Not ( ( { W2:Int #Equals W4:Int }
#And { WS0:WordStack #Equals WS2:WordStack } ) )
#And #Not ( ( { W3:Int #Equals W4:Int }
#And { WS1:WordStack #Equals WS2:WordStack } ) ) ) ) ) ) ) ) ) )



Node 51:

( <generatedTop>
  <kevm>
    <k>
      SSTORE W0:Int W3:Int
      ~> #pc [ SSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W3:Int }
#And { WS:WordStack #Equals WS1:WordStack } ) )
#And #Not ( ( { W2:Int #Equals W3:Int }
#And { WS0:WordStack #Equals WS1:WordStack } ) ) ) ) ) ) ) ) )




Proof EXP_2_SPEC Failed

┌─ 1 (root, init)
│   k: #next [ EXP ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
│
│  (3 steps)
├─ 3 (split)
│   k: #gas [ EXP , EXP _W0:Int _W1:Int ] ~> EXP _W0:Int _W1:Int ~> #pc [ EXP ] ~> _K_C ...
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     _USEGAS_CELL:Bool
┃  │
┃  ├─ 4
┃  │   k: #gas [ EXP , EXP _W0:Int _W1:Int ] ~> EXP _W0:Int _W1:Int ~> #pc [ EXP ] ~> _K_C ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (3 steps)
┃  ├─ 6 (split)
┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , EXP _W0:Int _W1:Int ) ~> #deductGas ~> #acc ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     _W1:Int <=Int 0
┃  ┃  │
┃  ┃  ├─ 7
┃  ┃  │   k: #gasExec ( _SCHEDULE_CELL:Schedule , EXP _W0:Int _W1:Int ) ~> #deductGas ~> #acc ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (1 step)
┃  ┃  ├─ 9 (split)
┃  ┃  │   k: Gexp < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ EXP , EXP _W0:Int _W ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     Gexp < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 11
┃  ┃  ┃  │   k: Gexp < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ EXP , EXP _W0:Int _W ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (5 steps)
┃  ┃  ┃  ├─ 19
┃  ┃  ┃  │   k: _K_CELL:K
┃  ┃  ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  ┊  constraint: true
┃  ┃  ┃  ┊  subst: ...
┃  ┃  ┃  └─ 2 (leaf, target)
┃  ┃  ┃      k: _K_CELL:K
┃  ┃  ┃      pc: ?_FINAL_PC_CELL:Int
┃  ┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃  ┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     _GAS_CELL:Gas <Gas Gexp < _SCHEDULE_CELL:Schedule >
┃  ┃     │
┃  ┃     ├─ 12
┃  ┃     │   k: Gexp < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ EXP , EXP _W0:Int _W ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (5 steps)
┃  ┃     └─ 15 (leaf, terminal)
┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃         pc: _PC_CELL:Int
┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     0 <Int _W1:Int
┃     │
┃     ├─ 8
┃     │   k: #gasExec ( _SCHEDULE_CELL:Schedule , EXP _W0:Int _W1:Int ) ~> #deductGas ~> #acc ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     │
┃     │  (1 step)
┃     ├─ 10 (split)
┃     │   k: ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > * ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (branch)
┃     ┣━━┓ subst: .Subst
┃     ┃  ┃ constraint:
┃     ┃  ┃     ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) ) <=Gas _GAS_CELL:Gas
┃     ┃  │
┃     ┃  ├─ 13
┃     ┃  │   k: ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > * ...
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  │
┃     ┃  │  (5 steps)
┃     ┃  ├─ 18
┃     ┃  │   k: _K_CELL:K
┃     ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  │
┃     ┃  ┊  constraint:
┃     ┃  ┊      0 <Int _W1:Int
┃     ┃  ┊  subst: ...
┃     ┃  └─ 2 (leaf, target)
┃     ┃      k: _K_CELL:K
┃     ┃      pc: ?_FINAL_PC_CELL:Int
┃     ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃     ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓ subst: .Subst
┃        ┃ constraint:
┃        ┃     _GAS_CELL:Gas <Gas ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) )
┃        │
┃        ├─ 14
┃        │   k: ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > * ...
┃        │   pc: _PC_CELL:Int
┃        │   callDepth: _CALLDEPTH_CELL:Int
┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃        │
┃        │  (5 steps)
┃        └─ 16 (leaf, terminal)
┃            k: #halt ~> _K_CELL:K
┃            pc: _PC_CELL:Int
┃            callDepth: _CALLDEPTH_CELL:Int
┃            statusCode: EVMC_OUT_OF_GAS
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool _USEGAS_CELL:Bool )
   │
   ├─ 5
   │   k: #gas [ EXP , EXP _W0:Int _W1:Int ] ~> EXP _W0:Int _W1:Int ~> #pc [ EXP ] ~> _K_C ...
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (4 steps)
   ├─ 17
   │   k: _K_CELL:K
   │   pc: ( _PC_CELL:Int +Int 1 )
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   ┊  constraint: true
   ┊  subst: ...
   └─ 2 (leaf, target)
       k: _K_CELL:K
       pc: ?_FINAL_PC_CELL:Int
       callDepth: ?_FINAL_CALLDEPTH_CELL:Int
       statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ EXP ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

<generatedTop>
  <kevm>
    <k>
      #gas [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #gas [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { _USEGAS_CELL:Bool #Equals true } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { _USEGAS_CELL:Bool #Equals false } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , EXP _W0:Int _W1:Int )
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals _USEGAS_CELL:Bool } )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , EXP _W0:Int _W1:Int )
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals _W1:Int <=Int 0 } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #gasExec ( _SCHEDULE_CELL:Schedule , EXP _W0:Int _W1:Int )
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals 0 <Int _W1:Int } ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      Gexp < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals _W1:Int <=Int 0 } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) )
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals 0 <Int _W1:Int } ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      Gexp < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals _W1:Int <=Int 0 }
#And { true #Equals Gexp < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas } ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      Gexp < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals _W1:Int <=Int 0 }
#And { true #Equals _GAS_CELL:Gas <Gas Gexp < _SCHEDULE_CELL:Schedule > } ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) )
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals 0 <Int _W1:Int }
#And { true #Equals ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) ) <=Gas _GAS_CELL:Gas } ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) )
      ~> #deductGas
      ~> #access [ EXP , EXP _W0:Int _W1:Int ]
      ~> EXP _W0:Int _W1:Int
      ~> #pc [ EXP ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals 0 <Int _W1:Int }
#And { true #Equals _GAS_CELL:Gas <Gas ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) ) } ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals _W1:Int <=Int 0 }
#And { true #Equals _GAS_CELL:Gas <Gas Gexp < _SCHEDULE_CELL:Schedule > } ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals 0 <Int _W1:Int }
#And { true #Equals _GAS_CELL:Gas <Gas ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) ) } ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( powmod ( _W0:Int , _W1:Int , pow256 ) : _WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool _USEGAS_CELL:Bool ) } )



Node 18:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( powmod ( _W0:Int , _W1:Int , pow256 ) : _WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            _GAS_CELL:Gas -Gas ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) )
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals 0 <Int _W1:Int }
#And { true #Equals ( Gexp < _SCHEDULE_CELL:Schedule > +Int ( Gexpbyte < _SCHEDULE_CELL:Schedule > *Int ( ( log2Int ( _W1:Int ) /Int 8 ) +Int 1 ) ) ) <=Gas _GAS_CELL:Gas } ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( powmod ( _W0:Int , _W1:Int , pow256 ) : _WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            _GAS_CELL:Gas -Gas Gexp < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals _W1:Int <=Int 0 }
#And { true #Equals Gexp < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas } ) ) )




Proof COINBASE_0_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ COINBASE ] ~> K_CELL:K
│   pc: PC_CELL:Int
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     1023 <Int #sizeWordStack ( WS:WordStack , 0 )
┃  │
┃  ├─ 3
┃  │   k: #next [ COINBASE ] ~> K_CELL:K
┃  │   pc: PC_CELL:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 5 (leaf, terminal)
┃      k: #halt ~> K_CELL:K
┃      pc: PC_CELL:Int
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( WS:WordStack , 0 ) <Int 0 )
   ┃     ( notBool 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) )
   │
   ├─ 4
   │   k: #next [ COINBASE ] ~> K_CELL:K
   │   pc: PC_CELL:Int
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   │
   │  (7 steps)
   ├─ 6
   │   k: K_CELL:K
   │   pc: ( PC_CELL:Int +Int 1 )
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   │
   ┊  constraint: true
   ┊  subst: ...
   └─ 2 (leaf, target)
       k: K_CELL:K
       pc: FINAL_PC_CELL:Int
       callDepth: FINAL_CALLDEPTH_CELL:Int
       statusCode: FINAL_STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ COINBASE ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ COINBASE ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ COINBASE ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( WS:WordStack , 0 ) <Int 0 }
#And { false #Equals 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) } )



Node 6:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( COINBASE_CELL:Int : WS:WordStack )
          </wordStack>
          <pc>
            ( PC_CELL:Int +Int 1 )
          </pc>
          ...
        </callState>
        <block>
          <coinbase>
            COINBASE_CELL:Int
          </coinbase>
          ...
        </block>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 } )




Proof JUMPI_TRUE_2_SPEC Failed

┌─ 1 (root, init)
│   k: #next [ JUMPI ] ~> K_CELL:K
│   pc: PC_CELL:Int
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE_CELL:StatusCode
│
│  (5 steps)
├─ 3
│   k: JUMP W0:Int ~> #pc [ JUMPI ] ~> K_CELL:K
│   pc: PC_CELL:Int
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE_CELL:StatusCode
┃
┃ (1 step)
┣━━┓
┃  │
┃  ├─ 4
┃  │   k: #endBasicBlock ~> #pc [ JUMPI ] ~> K_CELL:K
┃  │   pc: W0:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  │  (1 step)
┃  ├─ 6
┃  │   k: #endBasicBlock ~> K_CELL:K
┃  │   pc: W0:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: #endBasicBlock ~> K_CELL:K
┃      pc: FINAL_PC_CELL:Int
┃      callDepth: FINAL_CALLDEPTH_CELL:Int
┃      statusCode: FINAL_STATUSCODE_CELL:StatusCode
┃
┗━━┓
   │
   ├─ 5
   │   k: #end EVMC_BAD_JUMP_DESTINATION ~> #pc [ JUMPI ] ~> K_CELL:K
   │   pc: PC_CELL:Int
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 7 (leaf, terminal)
       k: #halt ~> K_CELL:K
       pc: PC_CELL:Int
       callDepth: CALLDEPTH_CELL:Int
       statusCode: EVMC_BAD_JUMP_DESTINATION



Node 1:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMPI ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W0:Int : ( W1:Int : WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And #Not ( { W1:Int #Equals 0 } ) )



Node 2:

<generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 3:

( <generatedTop>
  <kevm>
    <k>
      JUMP W0:Int
      ~> #pc [ JUMPI ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool W1:Int ==Int 0 ) } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> #pc [ JUMPI ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            JUMPDESTS_CELL:Bytes
          </jumpDests>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool W1:Int ==Int 0 ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( JUMPDESTS_CELL:Bytes ) }
#And { true #Equals 1 ==Int JUMPDESTS_CELL:Bytes [ W0:Int ] } ) ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_BAD_JUMP_DESTINATION
      ~> #pc [ JUMPI ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            JUMPDESTS_CELL:Bytes
          </jumpDests>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool W1:Int ==Int 0 ) }
#And #Not ( ( { true #Equals W0:Int <Int lengthBytes ( JUMPDESTS_CELL:Bytes ) }
#And { 1 #Equals JUMPDESTS_CELL:Bytes [ W0:Int ] } ) ) ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #endBasicBlock
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <jumpDests>
            JUMPDESTS_CELL:Bytes
          </jumpDests>
          <pc>
            W0:Int
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool W1:Int ==Int 0 ) }
#And ( { true #Equals W0:Int <Int lengthBytes ( JUMPDESTS_CELL:Bytes ) }
#And { true #Equals 1 ==Int JUMPDESTS_CELL:Bytes [ W0:Int ] } ) ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_BAD_JUMP_DESTINATION
        </statusCode>
        <callState>
          <jumpDests>
            JUMPDESTS_CELL:Bytes
          </jumpDests>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool W1:Int ==Int 0 ) }
#And #Not ( ( { true #Equals W0:Int <Int lengthBytes ( JUMPDESTS_CELL:Bytes ) }
#And { 1 #Equals JUMPDESTS_CELL:Bytes [ W0:Int ] } ) ) ) )




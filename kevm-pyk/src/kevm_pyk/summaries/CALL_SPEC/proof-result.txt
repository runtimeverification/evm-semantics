Proof CALL_SPEC Failed

┌─ 1 (root, init)
│   k: #next [ CALL ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (1 step)
┣━━┓
┃  │
┃  └─ 3 (leaf, pending)
┃      k: #end EVMC_STACK_UNDERFLOW ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: _STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  └─ 4 (leaf, pending)
┃      k: #end EVMC_STACK_OVERFLOW ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: _STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 5
┃  │   k: #addr [ CALL ] ~> #exec [ CALL ] ~> #pc [ CALL ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  └─ 8 (leaf, pending)
┃  ┃      k: #exec [ CALL ] ~> #pc [ CALL ] ~> _K_CELL:K
┃  ┃      pc: _PC_CELL:Int
┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     └─ 9 (leaf, pending)
┃         k: #addr [ CALL ] ~> #exec [ CALL ] ~> #pc [ CALL ] ~> _K_CELL:K
┃         pc: _PC_CELL:Int
┃         callDepth: _CALLDEPTH_CELL:Int
┃         statusCode: _STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  └─ 6 (leaf, pending)
┃      k: #end EVMC_STATIC_MODE_VIOLATION ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓
   │
   ├─ 7
   │   k: #next [ CALL ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   ┊  constraint:
   ┊      false
   ┊  subst: .Subst
   └─ 2 (leaf, target)
       k: _K_CELL:K
       pc: ?_FINAL_PC_CELL:Int
       callDepth: ?_FINAL_CALLDEPTH_CELL:Int
       statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ CALL ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_UNDERFLOW
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 7 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_OVERFLOW
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -6 ) >Int 1024 } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #addr [ CALL ]
      ~> #exec [ CALL ]
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 7 ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , _WORDSTACK_CELL:WordStack ) ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -6 ) >Int 1024 ) } ) ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STATIC_MODE_VIOLATION
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And ( { true #Equals #changesState ( CALL , _WORDSTACK_CELL:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 7 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -6 ) >Int 1024 ) } ) ) ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #next [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 7 ) }
#And ( { true #Equals ( notBool ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , _WORDSTACK_CELL:WordStack ) ) ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -6 ) >Int 1024 ) }
#And #Not ( ( { true #Equals #changesState ( CALL , _WORDSTACK_CELL:WordStack ) }
#And { _STATIC_CELL:Bool #Equals true } ) ) ) ) ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #exec [ CALL ]
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( ( W1:Int modInt pow160 ) : _WS:WordStack ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 2 ) <Int 7 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( _W0:Int : ( W1:Int : _WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 2 ) +Int -6 ) >Int 1024 ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( W1:Int : _WS:WordStack ) ) ) ) ) } ) ) ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #addr [ CALL ]
      ~> #exec [ CALL ]
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 7 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -6 ) >Int 1024 ) }
#And #Not ( #Exists _W0:Int . #Exists _WS:WordStack . #Exists W1:Int . { _WORDSTACK_CELL:WordStack #Equals ( _W0:Int : ( W1:Int : _WS:WordStack ) ) } ) ) ) )




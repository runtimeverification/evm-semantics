Proof TSTORE_2_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ TSTORE ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool _STATIC_CELL:Bool )
┃  │
┃  ├─ 3
┃  │   k: #next [ TSTORE ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (3 steps)
┃  ├─ 5 (split)
┃  │   k: #gas [ TSTORE , TSTORE _W0:Int _W1:Int ] ~> TSTORE _W0:Int _W1:Int ~> #pc [ TSTO ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     _USEGAS_CELL:Bool
┃  ┃  │
┃  ┃  ├─ 6
┃  ┃  │   k: #gas [ TSTORE , TSTORE _W0:Int _W1:Int ] ~> TSTORE _W0:Int _W1:Int ~> #pc [ TSTO ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (4 steps)
┃  ┃  ├─ 12 (split)
┃  ┃  │   k: Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ TS ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 13
┃  ┃  ┃  │   k: Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ TS ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (2 steps)
┃  ┃  ┃  ├─ 17
┃  ┃  ┃  │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (1 step)
┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  └─ 18 (leaf, pending)
┃  ┃  ┃  ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓
┃  ┃  ┃     │
┃  ┃  ┃     ├─ 19
┃  ┃  ┃     │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃     │   pc: _PC_CELL:Int
┃  ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     ┃
┃  ┃  ┃     ┃ (1 step)
┃  ┃  ┃     ┣━━┓
┃  ┃  ┃     ┃  │
┃  ┃  ┃     ┃  └─ 22 (leaf, pending)
┃  ┃  ┃     ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃     ┃      pc: _PC_CELL:Int
┃  ┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     ┃
┃  ┃  ┃     ┗━━┓
┃  ┃  ┃        │
┃  ┃  ┃        ├─ 23
┃  ┃  ┃        │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃        │   pc: _PC_CELL:Int
┃  ┃  ┃        │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃        ┃
┃  ┃  ┃        ┃ (1 step)
┃  ┃  ┃        ┣━━┓
┃  ┃  ┃        ┃  │
┃  ┃  ┃        ┃  └─ 27 (leaf, pending)
┃  ┃  ┃        ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃        ┃      pc: _PC_CELL:Int
┃  ┃  ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃        ┃
┃  ┃  ┃        ┗━━┓
┃  ┃  ┃           │
┃  ┃  ┃           ├─ 28
┃  ┃  ┃           │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃           │   pc: _PC_CELL:Int
┃  ┃  ┃           │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃           ┃
┃  ┃  ┃           ┃ (1 step)
┃  ┃  ┃           ┣━━┓
┃  ┃  ┃           ┃  │
┃  ┃  ┃           ┃  └─ 31 (leaf, pending)
┃  ┃  ┃           ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃           ┃      pc: _PC_CELL:Int
┃  ┃  ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃           ┃
┃  ┃  ┃           ┗━━┓
┃  ┃  ┃              │
┃  ┃  ┃              └─ 32 (leaf, pending)
┃  ┃  ┃                  k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃  ┃  ┃                  pc: _PC_CELL:Int
┃  ┃  ┃                  callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃                  statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     _GAS_CELL:Gas <Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
┃  ┃     │
┃  ┃     ├─ 14
┃  ┃     │   k: Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ TS ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (5 steps)
┃  ┃     └─ 26 (leaf, terminal)
┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃         pc: _PC_CELL:Int
┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃     │
┃     ├─ 7
┃     │   k: #gas [ TSTORE , TSTORE _W0:Int _W1:Int ] ~> TSTORE _W0:Int _W1:Int ~> #pc [ TSTO ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     │
┃     │  (1 step)
┃     ├─ 9
┃     │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (1 step)
┃     ┣━━┓
┃     ┃  │
┃     ┃  └─ 10 (leaf, pending)
┃     ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃     ┃      pc: _PC_CELL:Int
┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓
┃        │
┃        ├─ 11
┃        │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃        │   pc: _PC_CELL:Int
┃        │   callDepth: _CALLDEPTH_CELL:Int
┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┃ (1 step)
┃        ┣━━┓
┃        ┃  │
┃        ┃  └─ 15 (leaf, pending)
┃        ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃        ┃      pc: _PC_CELL:Int
┃        ┃      callDepth: _CALLDEPTH_CELL:Int
┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃        ┃
┃        ┗━━┓
┃           │
┃           ├─ 16
┃           │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃           │   pc: _PC_CELL:Int
┃           │   callDepth: _CALLDEPTH_CELL:Int
┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┃ (1 step)
┃           ┣━━┓
┃           ┃  │
┃           ┃  └─ 20 (leaf, pending)
┃           ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃           ┃      pc: _PC_CELL:Int
┃           ┃      callDepth: _CALLDEPTH_CELL:Int
┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃           ┃
┃           ┗━━┓
┃              │
┃              ├─ 21
┃              │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃              │   pc: _PC_CELL:Int
┃              │   callDepth: _CALLDEPTH_CELL:Int
┃              │   statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃
┃              ┃ (1 step)
┃              ┣━━┓
┃              ┃  │
┃              ┃  └─ 24 (leaf, pending)
┃              ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃              ┃      pc: _PC_CELL:Int
┃              ┃      callDepth: _CALLDEPTH_CELL:Int
┃              ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃              ┃
┃              ┗━━┓
┃                 │
┃                 ├─ 25
┃                 │   k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃                 │   pc: _PC_CELL:Int
┃                 │   callDepth: _CALLDEPTH_CELL:Int
┃                 │   statusCode: _STATUSCODE_CELL:StatusCode
┃                 ┃
┃                 ┃ (1 step)
┃                 ┣━━┓
┃                 ┃  │
┃                 ┃  └─ 29 (leaf, pending)
┃                 ┃      k: #pc [ TSTORE ] ~> _K_CELL:K
┃                 ┃      pc: _PC_CELL:Int
┃                 ┃      callDepth: _CALLDEPTH_CELL:Int
┃                 ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃                 ┃
┃                 ┗━━┓
┃                    │
┃                    └─ 30 (leaf, pending)
┃                        k: TSTORE _W0:Int _W1:Int ~> #pc [ TSTORE ] ~> _K_CELL:K
┃                        pc: _PC_CELL:Int
┃                        callDepth: _CALLDEPTH_CELL:Int
┃                        statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     _STATIC_CELL:Bool
   │
   ├─ 4
   │   k: #next [ TSTORE ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 8 (leaf, terminal)
       k: #halt ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { _STATIC_CELL:Bool #Equals false } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { _STATIC_CELL:Bool #Equals true } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ TSTORE , TSTORE _W0:Int _W1:Int ]
      ~> TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool _STATIC_CELL:Bool ) } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #gas [ TSTORE , TSTORE _W0:Int _W1:Int ]
      ~> TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And { true #Equals ( notBool _STATIC_CELL:Bool ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #gas [ TSTORE , TSTORE _W0:Int _W1:Int ]
      ~> TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And { true #Equals ( notBool _STATIC_CELL:Bool ) } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals _STATIC_CELL:Bool } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals ( notBool _USEGAS_CELL:Bool ) } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen23:BalanceCell
            _Gen24:CodeCell
            _Gen25:StorageCell
            _Gen26:OrigStorageCell
            <transientStorage>
              TSTORAGE:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists TSTORAGE:Map . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ TSTORE , TSTORE _W0:Int _W1:Int ]
      ~> TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals ( notBool _STATIC_CELL:Bool ) } ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ TSTORE , TSTORE _W0:Int _W1:Int ]
      ~> TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas } ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ TSTORE , TSTORE _W0:Int _W1:Int ]
      ~> TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals _GAS_CELL:Gas <Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > } ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            _Gen28:BalanceCell
            _Gen29:CodeCell
            _Gen30:StorageCell
            _Gen31:OrigStorageCell
            <transientStorage>
              TSTORAGE0:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen32:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  _Gen30:StorageCell
  _Gen31:OrigStorageCell
  <transientStorage>
    TSTORAGE0:Map
  </transientStorage>
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  _Gen30:StorageCell
  _Gen31:OrigStorageCell
  <transientStorage>
    TSTORAGE0:Map
  </transientStorage>
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen28:BalanceCell . #Exists _Gen29:CodeCell . #Exists _Gen30:StorageCell . #Exists _Gen31:OrigStorageCell . #Exists _Gen32:NonceCell . #Exists ACCT0:Int . #Exists TSTORAGE0:Map . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  _Gen30:StorageCell
  _Gen31:OrigStorageCell
  <transientStorage>
    TSTORAGE0:Map
  </transientStorage>
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT0:Int } ) ) ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas } ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            _Gen23:BalanceCell
            _Gen24:CodeCell
            _Gen25:StorageCell
            _Gen26:OrigStorageCell
            <transientStorage>
              TSTORAGE:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists TSTORAGE:Map . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT1:Int
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT1:Int
            </acctID>
            _Gen33:BalanceCell
            _Gen34:CodeCell
            _Gen35:StorageCell
            _Gen36:OrigStorageCell
            <transientStorage>
              TSTORAGE1:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen37:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT1:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT0:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen33:BalanceCell . #Exists _Gen34:CodeCell . #Exists _Gen35:StorageCell . #Exists _Gen36:OrigStorageCell . #Exists _Gen37:NonceCell . #Exists ACCT1:Int . #Exists TSTORAGE1:Map . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT1:Int } ) ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            _Gen28:BalanceCell
            _Gen29:CodeCell
            _Gen30:StorageCell
            _Gen31:OrigStorageCell
            <transientStorage>
              TSTORAGE0:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen32:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  _Gen30:StorageCell
  _Gen31:OrigStorageCell
  <transientStorage>
    TSTORAGE0:Map
  </transientStorage>
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  _Gen30:StorageCell
  _Gen31:OrigStorageCell
  <transientStorage>
    TSTORAGE0:Map
  </transientStorage>
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen28:BalanceCell . #Exists _Gen29:CodeCell . #Exists _Gen30:StorageCell . #Exists _Gen31:OrigStorageCell . #Exists _Gen32:NonceCell . #Exists ACCT0:Int . #Exists TSTORAGE0:Map . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  _Gen28:BalanceCell
  _Gen29:CodeCell
  _Gen30:StorageCell
  _Gen31:OrigStorageCell
  <transientStorage>
    TSTORAGE0:Map
  </transientStorage>
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT0:Int } ) ) ) ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT2:Int
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT2:Int
            </acctID>
            _Gen38:BalanceCell
            _Gen39:CodeCell
            _Gen40:StorageCell
            _Gen41:OrigStorageCell
            <transientStorage>
              TSTORAGE2:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen42:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT2:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT0:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT1:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT1:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen38:BalanceCell . #Exists _Gen39:CodeCell . #Exists _Gen40:StorageCell . #Exists _Gen41:OrigStorageCell . #Exists _Gen42:NonceCell . #Exists ACCT2:Int . #Exists TSTORAGE2:Map . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT2:Int } ) ) ) ) ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals _GAS_CELL:Gas <Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > } ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT1:Int
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT1:Int
            </acctID>
            _Gen33:BalanceCell
            _Gen34:CodeCell
            _Gen35:StorageCell
            _Gen36:OrigStorageCell
            <transientStorage>
              TSTORAGE1:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen37:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT1:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT0:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen33:BalanceCell . #Exists _Gen34:CodeCell . #Exists _Gen35:StorageCell . #Exists _Gen36:OrigStorageCell . #Exists _Gen37:NonceCell . #Exists ACCT1:Int . #Exists TSTORAGE1:Map . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  _Gen33:BalanceCell
  _Gen34:CodeCell
  _Gen35:StorageCell
  _Gen36:OrigStorageCell
  <transientStorage>
    TSTORAGE1:Map
  </transientStorage>
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT1:Int } ) ) ) ) ) ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT3:Int
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT3:Int
            </acctID>
            _Gen43:BalanceCell
            _Gen44:CodeCell
            _Gen45:StorageCell
            _Gen46:OrigStorageCell
            <transientStorage>
              TSTORAGE3:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen47:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT3:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT3:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  _Gen43:BalanceCell
  _Gen44:CodeCell
  _Gen45:StorageCell
  _Gen46:OrigStorageCell
  <transientStorage>
    TSTORAGE3:Map
  </transientStorage>
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  _Gen43:BalanceCell
  _Gen44:CodeCell
  _Gen45:StorageCell
  _Gen46:OrigStorageCell
  <transientStorage>
    TSTORAGE3:Map
  </transientStorage>
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT0:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  _Gen43:BalanceCell
  _Gen44:CodeCell
  _Gen45:StorageCell
  _Gen46:OrigStorageCell
  <transientStorage>
    TSTORAGE3:Map
  </transientStorage>
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT1:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  _Gen43:BalanceCell
  _Gen44:CodeCell
  _Gen45:StorageCell
  _Gen46:OrigStorageCell
  <transientStorage>
    TSTORAGE3:Map
  </transientStorage>
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT2:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  _Gen43:BalanceCell
  _Gen44:CodeCell
  _Gen45:StorageCell
  _Gen46:OrigStorageCell
  <transientStorage>
    TSTORAGE3:Map
  </transientStorage>
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT1:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT2:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen43:BalanceCell . #Exists _Gen44:CodeCell . #Exists _Gen45:StorageCell . #Exists _Gen46:OrigStorageCell . #Exists _Gen47:NonceCell . #Exists ACCT3:Int . #Exists TSTORAGE3:Map . ( { false #Equals <acctID>
  ACCT3:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  _Gen43:BalanceCell
  _Gen44:CodeCell
  _Gen45:StorageCell
  _Gen46:OrigStorageCell
  <transientStorage>
    TSTORAGE3:Map
  </transientStorage>
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT3:Int } ) ) ) ) ) ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT2:Int
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT2:Int
            </acctID>
            _Gen38:BalanceCell
            _Gen39:CodeCell
            _Gen40:StorageCell
            _Gen41:OrigStorageCell
            <transientStorage>
              TSTORAGE2:Map [ _W0:Int <- _W1:Int ]
            </transientStorage>
            _Gen42:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT2:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT0:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT1:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      TSTORE _W0:Int _W1:Int
      ~> #pc [ TSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <gas>
            _GAS_CELL:Gas -Gas Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule >
          </gas>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals Gwarmstoragedirtystore < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT1:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen38:BalanceCell . #Exists _Gen39:CodeCell . #Exists _Gen40:StorageCell . #Exists _Gen41:OrigStorageCell . #Exists _Gen42:NonceCell . #Exists ACCT2:Int . #Exists TSTORAGE2:Map . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  _Gen38:BalanceCell
  _Gen39:CodeCell
  _Gen40:StorageCell
  _Gen41:OrigStorageCell
  <transientStorage>
    TSTORAGE2:Map
  </transientStorage>
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT2:Int } ) ) ) ) ) ) ) ) ) )




Proof TSTORE_2_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ TSTORE ] ~> K_CELL:K
│   pc: PC_CELL:Int
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool STATIC_CELL:Bool )
┃  │
┃  ├─ 3
┃  │   k: #next [ TSTORE ] ~> K_CELL:K
┃  │   pc: PC_CELL:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  │  (6 steps)
┃  ├─ 6
┃  │   k: K_CELL:K
┃  │   pc: ( PC_CELL:Int +Int 1 )
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint:
┃  ┊      ( notBool <acctID>
  ID_CELL:Int
</acctID> in_keys ( DotAccountVar:AccountCellMap ) )
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: K_CELL:K
┃      pc: FINAL_PC_CELL:Int
┃      callDepth: FINAL_CALLDEPTH_CELL:Int
┃      statusCode: FINAL_STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     STATIC_CELL:Bool
   │
   ├─ 4
   │   k: #next [ TSTORE ] ~> K_CELL:K
   │   pc: PC_CELL:Int
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 5 (leaf, terminal)
       k: #halt ~> K_CELL:K
       pc: PC_CELL:Int
       callDepth: CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION



Node 1:

( <generatedTop>
  <kevm>
    <k>
      #next [ TSTORE ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <wordStack>
            ( W0:Int : ( W1:Int : WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ID_CELL:Int
            </acctID>
            ...
          </account>
          DotAccountVar:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { false #Equals <acctID>
  ID_CELL:Int
</acctID> in_keys ( DotAccountVar:AccountCellMap ) } )



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ TSTORE ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <wordStack>
            ( W0:Int : ( W1:Int : WS:WordStack ) )
          </wordStack>
          <static>
            STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ID_CELL:Int
            </acctID>
            ...
          </account>
          DotAccountVar:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { STATIC_CELL:Bool #Equals false }
#And { false #Equals <acctID>
  ID_CELL:Int
</acctID> in_keys ( DotAccountVar:AccountCellMap ) } ) )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ TSTORE ]
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <wordStack>
            ( W0:Int : ( W1:Int : WS:WordStack ) )
          </wordStack>
          <static>
            STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ID_CELL:Int
            </acctID>
            ...
          </account>
          DotAccountVar:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { STATIC_CELL:Bool #Equals true }
#And { false #Equals <acctID>
  ID_CELL:Int
</acctID> in_keys ( DotAccountVar:AccountCellMap ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <wordStack>
            ( W0:Int : ( W1:Int : WS:WordStack ) )
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ID_CELL:Int
            </acctID>
            ...
          </account>
          DotAccountVar:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals STATIC_CELL:Bool }
#And { true #Equals ( notBool <acctID>
  ID_CELL:Int
</acctID> in_keys ( DotAccountVar:AccountCellMap ) ) } ) )



Node 6:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <pc>
            ( PC_CELL:Int +Int 1 )
          </pc>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ID_CELL:Int
            </acctID>
            <transientStorage>
              TRANSIENT_STORAGE_CELL:Map [ W0:Int <- W1:Int ]
            </transientStorage>
            ...
          </account>
          DotAccountVar:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And { true #Equals ( notBool <acctID>
  ID_CELL:Int
</acctID> in_keys ( DotAccountVar:AccountCellMap ) ) } ) )




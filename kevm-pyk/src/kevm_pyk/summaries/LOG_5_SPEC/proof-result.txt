Proof LOG_5_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ LOG ( 3 ) ] ~> K_CELL:K
│   pc: PC_CELL:Int
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool STATIC_CELL:Bool )
┃  │
┃  ├─ 3
┃  │   k: #next [ LOG ( 3 ) ] ~> K_CELL:K
┃  │   pc: PC_CELL:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  │  (3 steps)
┃  ├─ 5 (split)
┃  │   k: #gas [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ] ~> LOG ( 3 ) W0:Int W1:Int ~> #pc [ ...
┃  │   pc: PC_CELL:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     USEGAS_CELL:Bool
┃  ┃  │
┃  ┃  ├─ 6
┃  ┃  │   k: #gas [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ] ~> LOG ( 3 ) W0:Int W1:Int ~> #pc [ ...
┃  ┃  │   pc: PC_CELL:Int
┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (4 steps)
┃  ┃  ├─ 9 (split)
┃  ┃  │   k: ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0: ...
┃  ┃  │   pc: PC_CELL:Int
┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 10
┃  ┃  ┃  │   k: ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0: ...
┃  ┃  ┃  │   pc: PC_CELL:Int
┃  ┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (3 steps)
┃  ┃  ┃  ├─ 12 (split)
┃  ┃  ┃  │   k: ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > * ...
┃  ┃  ┃  │   pc: PC_CELL:Int
┃  ┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃     ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) ) <=Gas GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 13
┃  ┃  ┃  ┃  │   k: ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > * ...
┃  ┃  ┃  ┃  │   pc: PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  │  (4 steps)
┃  ┃  ┃  ┃  ├─ 18
┃  ┃  ┃  ┃  │   k: K_CELL:K
┃  ┃  ┃  ┃  │   pc: ( PC_CELL:Int +Int 1 )
┃  ┃  ┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┊  constraint: true
┃  ┃  ┃  ┃  ┊  subst: ...
┃  ┃  ┃  ┃  └─ 2 (leaf, target)
┃  ┃  ┃  ┃      k: K_CELL:K
┃  ┃  ┃  ┃      pc: FINAL_PC_CELL:Int
┃  ┃  ┃  ┃      callDepth: FINAL_CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃      statusCode: FINAL_STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃     ┃ constraint:
┃  ┃  ┃     ┃     GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) )
┃  ┃  ┃     │
┃  ┃  ┃     ├─ 14
┃  ┃  ┃     │   k: ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > * ...
┃  ┃  ┃     │   pc: PC_CELL:Int
┃  ┃  ┃     │   callDepth: CALLDEPTH_CELL:Int
┃  ┃  ┃     │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃  ┃     │
┃  ┃  ┃     │  (5 steps)
┃  ┃  ┃     └─ 16 (leaf, terminal)
┃  ┃  ┃         k: #halt ~> K_CELL:K
┃  ┃  ┃         pc: PC_CELL:Int
┃  ┃  ┃         callDepth: CALLDEPTH_CELL:Int
┃  ┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     GAS_CELL:Gas <Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
┃  ┃     │
┃  ┃     ├─ 11
┃  ┃     │   k: ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0: ...
┃  ┃     │   pc: PC_CELL:Int
┃  ┃     │   callDepth: CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (6 steps)
┃  ┃     └─ 15 (leaf, terminal)
┃  ┃         k: #halt ~> K_CELL:K
┃  ┃         pc: PC_CELL:Int
┃  ┃         callDepth: CALLDEPTH_CELL:Int
┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     ( notBool USEGAS_CELL:Bool )
┃     │
┃     ├─ 7
┃     │   k: #gas [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ] ~> LOG ( 3 ) W0:Int W1:Int ~> #pc [ ...
┃     │   pc: PC_CELL:Int
┃     │   callDepth: CALLDEPTH_CELL:Int
┃     │   statusCode: STATUSCODE_CELL:StatusCode
┃     │
┃     │  (3 steps)
┃     ├─ 17
┃     │   k: K_CELL:K
┃     │   pc: ( PC_CELL:Int +Int 1 )
┃     │   callDepth: CALLDEPTH_CELL:Int
┃     │   statusCode: STATUSCODE_CELL:StatusCode
┃     │
┃     ┊  constraint: true
┃     ┊  subst: ...
┃     └─ 2 (leaf, target)
┃         k: K_CELL:K
┃         pc: FINAL_PC_CELL:Int
┃         callDepth: FINAL_CALLDEPTH_CELL:Int
┃         statusCode: FINAL_STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     STATIC_CELL:Bool
   │
   ├─ 4
   │   k: #next [ LOG ( 3 ) ] ~> K_CELL:K
   │   pc: PC_CELL:Int
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 8 (leaf, terminal)
       k: #halt ~> K_CELL:K
       pc: PC_CELL:Int
       callDepth: CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W0:Int : ( W1:Int : ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) ) ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W0:Int : ( W1:Int : ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) ) ) )
          </wordStack>
          <static>
            STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { STATIC_CELL:Bool #Equals false } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W0:Int : ( W1:Int : ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) ) ) )
          </wordStack>
          <static>
            STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { STATIC_CELL:Bool #Equals true } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool STATIC_CELL:Bool ) } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <useGas>
      USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { USEGAS_CELL:Bool #Equals true }
#And { true #Equals ( notBool STATIC_CELL:Bool ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <useGas>
      USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { USEGAS_CELL:Bool #Equals false }
#And { true #Equals ( notBool STATIC_CELL:Bool ) } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            ( W0:Int : ( W1:Int : ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) ) ) )
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals STATIC_CELL:Bool } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 3 ) W0:Int W1:Int ]
      ~> #access [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And { true #Equals ( notBool STATIC_CELL:Bool ) } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 3 ) W0:Int W1:Int ]
      ~> #access [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And { true #Equals ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas } ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 3 ) W0:Int W1:Int ]
      ~> #access [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And { true #Equals GAS_CELL:Gas <Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) } ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) )
      ~> #deductGas
      ~> #access [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And { true #Equals ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas } ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) )
      ~> #deductGas
      ~> #access [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And ( { true #Equals ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas }
#And { true #Equals ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) ) <=Gas GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) } ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) )
      ~> #deductGas
      ~> #access [ LOG ( 3 ) , LOG ( 3 ) W0:Int W1:Int ]
      ~> LOG ( 3 ) W0:Int W1:Int
      ~> #pc [ LOG ( 3 ) ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And ( { true #Equals ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas }
#And { true #Equals GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) ) } ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And { true #Equals GAS_CELL:Gas <Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) } ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            ( W2:Int : ( W3:Int : ( W4:Int : WS:WordStack ) ) )
          </wordStack>
          <gas>
            GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And ( { true #Equals ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas }
#And { true #Equals GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) ) } ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <localMem>
            LOCALMEM_CELL:Bytes
          </localMem>
          <pc>
            ( PC_CELL:Int +Int 1 )
          </pc>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            LOG_CELL:List ListItem ( { ID_CELL:Int | ListItem ( W2:Int ) ListItem ( W3:Int ) ListItem ( W4:Int ) | #range ( LOCALMEM_CELL:Bytes , W0:Int , W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And { true #Equals ( notBool USEGAS_CELL:Bool ) } ) )



Node 18:

( <generatedTop>
  <kevm>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ID_CELL:Int
          </id>
          <localMem>
            LOCALMEM_CELL:Bytes
          </localMem>
          <pc>
            ( PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) -Gas ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            LOG_CELL:List ListItem ( { ID_CELL:Int | ListItem ( W2:Int ) ListItem ( W3:Int ) ListItem ( W4:Int ) | #range ( LOCALMEM_CELL:Bytes , W0:Int , W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool STATIC_CELL:Bool ) }
#And ( { true #Equals ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) <=Gas GAS_CELL:Gas }
#And { true #Equals ( ( Glog < SCHEDULE_CELL:Schedule > +Int ( Glogdata < SCHEDULE_CELL:Schedule > *Int W1:Int ) ) +Int ( 3 *Int Glogtopic < SCHEDULE_CELL:Schedule > ) ) <=Gas GAS_CELL:Gas -Gas ( Cmem ( SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( MEMORYUSED_CELL:Int , W0:Int , W1:Int ) ) -Int Cmem ( SCHEDULE_CELL:Schedule , MEMORYUSED_CELL:Int ) ) } ) ) ) )




Proof ORIGIN_0_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ ORIGIN ] ~> K_CELL:K
│   pc: PC_CELL:Int
│   callDepth: CALLDEPTH_CELL:Int
│   statusCode: STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     1023 <Int #sizeWordStack ( WS:WordStack , 0 )
┃  │
┃  ├─ 3
┃  │   k: #next [ ORIGIN ] ~> K_CELL:K
┃  │   pc: PC_CELL:Int
┃  │   callDepth: CALLDEPTH_CELL:Int
┃  │   statusCode: STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> K_CELL:K
┃      pc: PC_CELL:Int
┃      callDepth: CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( WS:WordStack , 0 ) <Int 0 )
   ┃     ( notBool 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) )
   │
   ├─ 4
   │   k: #next [ ORIGIN ] ~> K_CELL:K
   │   pc: PC_CELL:Int
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   │
   │  (3 steps)
   ├─ 5 (split)
   │   k: #gas [ ORIGIN , ORIGIN ] ~> ORIGIN ~> #pc [ ORIGIN ] ~> K_CELL:K
   │   pc: PC_CELL:Int
   │   callDepth: CALLDEPTH_CELL:Int
   │   statusCode: STATUSCODE_CELL:StatusCode
   ┃
   ┃ (branch)
   ┣━━┓ subst: .Subst
   ┃  ┃ constraint:
   ┃  ┃     USEGAS_CELL:Bool
   ┃  │
   ┃  ├─ 6
   ┃  │   k: #gas [ ORIGIN , ORIGIN ] ~> ORIGIN ~> #pc [ ORIGIN ] ~> K_CELL:K
   ┃  │   pc: PC_CELL:Int
   ┃  │   callDepth: CALLDEPTH_CELL:Int
   ┃  │   statusCode: STATUSCODE_CELL:StatusCode
   ┃  │
   ┃  │  (4 steps)
   ┃  ├─ 9 (split)
   ┃  │   k: Gbase < SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ ORIGIN , ORIGIN ] ~> ...
   ┃  │   pc: PC_CELL:Int
   ┃  │   callDepth: CALLDEPTH_CELL:Int
   ┃  │   statusCode: STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┃ (branch)
   ┃  ┣━━┓ subst: .Subst
   ┃  ┃  ┃ constraint:
   ┃  ┃  ┃     Gbase < SCHEDULE_CELL:Schedule > <=Gas GAS_CELL:Gas
   ┃  ┃  │
   ┃  ┃  ├─ 10
   ┃  ┃  │   k: Gbase < SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ ORIGIN , ORIGIN ] ~> ...
   ┃  ┃  │   pc: PC_CELL:Int
   ┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
   ┃  ┃  │
   ┃  ┃  │  (5 steps)
   ┃  ┃  ├─ 14
   ┃  ┃  │   k: K_CELL:K
   ┃  ┃  │   pc: ( PC_CELL:Int +Int 1 )
   ┃  ┃  │   callDepth: CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: STATUSCODE_CELL:StatusCode
   ┃  ┃  │
   ┃  ┃  ┊  constraint: true
   ┃  ┃  ┊  subst: ...
   ┃  ┃  └─ 2 (leaf, target)
   ┃  ┃      k: K_CELL:K
   ┃  ┃      pc: FINAL_PC_CELL:Int
   ┃  ┃      callDepth: FINAL_CALLDEPTH_CELL:Int
   ┃  ┃      statusCode: FINAL_STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┗━━┓ subst: .Subst
   ┃     ┃ constraint:
   ┃     ┃     GAS_CELL:Gas <Gas Gbase < SCHEDULE_CELL:Schedule >
   ┃     │
   ┃     ├─ 11
   ┃     │   k: Gbase < SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ ORIGIN , ORIGIN ] ~> ...
   ┃     │   pc: PC_CELL:Int
   ┃     │   callDepth: CALLDEPTH_CELL:Int
   ┃     │   statusCode: STATUSCODE_CELL:StatusCode
   ┃     │
   ┃     │  (5 steps)
   ┃     └─ 12 (leaf, terminal)
   ┃         k: #halt ~> K_CELL:K
   ┃         pc: PC_CELL:Int
   ┃         callDepth: CALLDEPTH_CELL:Int
   ┃         statusCode: EVMC_OUT_OF_GAS
   ┃
   ┗━━┓ subst: .Subst
      ┃ constraint:
      ┃     ( notBool USEGAS_CELL:Bool )
      │
      ├─ 7
      │   k: #gas [ ORIGIN , ORIGIN ] ~> ORIGIN ~> #pc [ ORIGIN ] ~> K_CELL:K
      │   pc: PC_CELL:Int
      │   callDepth: CALLDEPTH_CELL:Int
      │   statusCode: STATUSCODE_CELL:StatusCode
      │
      │  (4 steps)
      ├─ 13
      │   k: K_CELL:K
      │   pc: ( PC_CELL:Int +Int 1 )
      │   callDepth: CALLDEPTH_CELL:Int
      │   statusCode: STATUSCODE_CELL:StatusCode
      │
      ┊  constraint: true
      ┊  subst: ...
      └─ 2 (leaf, target)
          k: K_CELL:K
          pc: FINAL_PC_CELL:Int
          callDepth: FINAL_CALLDEPTH_CELL:Int
          statusCode: FINAL_STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ ORIGIN ]
      ~> K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( WS:WordStack , 0 ) <Int 0 }
#And { false #Equals 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ ORIGIN , ORIGIN ]
      ~> ORIGIN
      ~> #pc [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #gas [ ORIGIN , ORIGIN ]
      ~> ORIGIN
      ~> #pc [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <useGas>
      USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { USEGAS_CELL:Bool #Equals true }
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #gas [ ORIGIN , ORIGIN ]
      ~> ORIGIN
      ~> #pc [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <useGas>
      USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { USEGAS_CELL:Bool #Equals false }
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals 1023 <Int #sizeWordStack ( WS:WordStack , 0 ) } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      Gbase < SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ ORIGIN , ORIGIN ]
      ~> ORIGIN
      ~> #pc [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      Gbase < SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ ORIGIN , ORIGIN ]
      ~> ORIGIN
      ~> #pc [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals Gbase < SCHEDULE_CELL:Schedule > <=Gas GAS_CELL:Gas } ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      Gbase < SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ ORIGIN , ORIGIN ]
      ~> ORIGIN
      ~> #pc [ ORIGIN ]
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals GAS_CELL:Gas <Gas Gbase < SCHEDULE_CELL:Schedule > } ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> K_CELL:K
    </k>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals GAS_CELL:Gas <Gas Gbase < SCHEDULE_CELL:Schedule > } ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ORIGIN_CELL:Int : WS:WordStack )
          </wordStack>
          <pc>
            ( PC_CELL:Int +Int 1 )
          </pc>
          ...
        </callState>
        <origin>
          ORIGIN_CELL:Int
        </origin>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool USEGAS_CELL:Bool ) }
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 } ) )



Node 14:

( <generatedTop>
  <kevm>
    <schedule>
      SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ORIGIN_CELL:Int : WS:WordStack )
          </wordStack>
          <pc>
            ( PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            GAS_CELL:Gas -Gas Gbase < SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        <origin>
          ORIGIN_CELL:Int
        </origin>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals Gbase < SCHEDULE_CELL:Schedule > <=Gas GAS_CELL:Gas } ) ) )




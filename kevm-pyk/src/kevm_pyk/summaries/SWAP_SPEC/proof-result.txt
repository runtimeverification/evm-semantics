Proof SWAP_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ SWAP ( _N:Int ) ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     _WORDSTACK_CELL:WordStack ==K ( W0:Int : WS:WordStack )
┃  ┃     #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023
┃  ┃     _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 )
┃  ┃     #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi
┃  │
┃  └─ 3 (leaf, pending)
┃      k: #next [ SWAP ( _N:Int ) ] ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: _STATUSCODE_CELL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 )
┃  │
┃  ├─ 4
┃  │   k: #next [ SWAP ( _N:Int ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  ├─ 9
┃  ┃  │   k: _K_CELL:K
┃  ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  ┊  constraint: true
┃  ┃  ┊  subst: ...
┃  ┃  └─ 2 (leaf, target)
┃  ┃      k: _K_CELL:K
┃  ┃      pc: ?_FINAL_PC_CELL:Int
┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┣━━┓
┃  ┃  │
┃  ┃  └─ 10 (leaf, pending)
┃  ┃      k: #end EVMC_STACK_UNDERFLOW ~> _K_CELL:K
┃  ┃      pc: _PC_CELL:Int
┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     └─ 11 (leaf, pending)
┃         k: #end EVMC_STACK_OVERFLOW ~> _K_CELL:K
┃         pc: _PC_CELL:Int
┃         callDepth: _CALLDEPTH_CELL:Int
┃         statusCode: _STATUSCODE_CELL:StatusCode
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024
┃  │
┃  ├─ 5
┃  │   k: #next [ SWAP ( _N:Int ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  ├─ 12
┃  ┃  │   k: _K_CELL:K
┃  ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  ┊  constraint: true
┃  ┃  ┊  subst: ...
┃  ┃  └─ 2 (leaf, target)
┃  ┃      k: _K_CELL:K
┃  ┃      pc: ?_FINAL_PC_CELL:Int
┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┣━━┓
┃  ┃  │
┃  ┃  └─ 13 (leaf, pending)
┃  ┃      k: #end EVMC_STACK_UNDERFLOW ~> _K_CELL:K
┃  ┃      pc: _PC_CELL:Int
┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     └─ 14 (leaf, pending)
┃         k: #end EVMC_STACK_OVERFLOW ~> _K_CELL:K
┃         pc: _PC_CELL:Int
┃         callDepth: _CALLDEPTH_CELL:Int
┃         statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) )
   ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 )
   │
   ├─ 6
   │   k: #next [ SWAP ( _N:Int ) ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┃ (1 step)
   ┣━━┓
   ┃  │
   ┃  ├─ 7
   ┃  │   k: _K_CELL:K
   ┃  │   pc: ( _PC_CELL:Int +Int 1 )
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  │
   ┃  ┊  constraint: true
   ┃  ┊  subst: ...
   ┃  └─ 2 (leaf, target)
   ┃      k: _K_CELL:K
   ┃      pc: ?_FINAL_PC_CELL:Int
   ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
   ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
   ┃
   ┗━━┓
      │
      ├─ 8
      │   k: #addr [ SWAP ( _N:Int ) ] ~> #exec [ SWAP ( _N:Int ) ] ~> #pc [ SWAP ( _N:Int )  ...
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      │
      │  (2 steps)
      ├─ 15 (split)
      │   k: #gas [ SWAP ( _N:Int ) , SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack ] ~> SWAP ( _ ...
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┃ (branch)
      ┣━━┓ subst: .Subst
      ┃  ┃ constraint:
      ┃  ┃     _USEGAS_CELL:Bool
      ┃  │
      ┃  └─ 16 (leaf, pending)
      ┃      k: #gas [ SWAP ( _N:Int ) , SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack ] ~> SWAP ( _ ...
      ┃      pc: _PC_CELL:Int
      ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┗━━┓ subst: .Subst
         ┃ constraint:
         ┃     ( notBool _USEGAS_CELL:Bool )
         │
         └─ 17 (leaf, pending)
             k: #gas [ SWAP ( _N:Int ) , SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack ] ~> SWAP ( _ ...
             pc: _PC_CELL:Int
             callDepth: _CALLDEPTH_CELL:Int
             statusCode: _STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #next [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 } ) )



Node 7:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( WS:WordStack [ ( _N:Int +Int -1 ) ] : WS:WordStack [ ( _N:Int +Int -1 ) := W0:Int ] )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 1 ) <Int ( _N:Int +Int 1 ) ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 1 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 ) } ) ) ) ) ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #addr [ SWAP ( _N:Int ) ]
      ~> #exec [ SWAP ( _N:Int ) ]
      ~> #pc [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) )



Node 9:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( WS:WordStack [ ( _N:Int +Int -1 ) ] : WS:WordStack [ ( _N:Int +Int -1 ) := W0:Int ] )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int ( _N:Int +Int 1 ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_UNDERFLOW
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_OVERFLOW
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) }
#And ( { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( WS:WordStack [ ( _N:Int +Int -1 ) ] : WS:WordStack [ ( _N:Int +Int -1 ) := W0:Int ] )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { true #Equals ( #sizeWordStack ( WS:WordStack , 1 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 } ) ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_UNDERFLOW
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) }
#And ( { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_OVERFLOW
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SWAP ( _N:Int ) , SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack ]
      ~> SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack
      ~> #pc [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SWAP ( _N:Int ) , SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack ]
      ~> SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack
      ~> #pc [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SWAP ( _N:Int ) , SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack ]
      ~> SWAP ( _N:Int ) _WORDSTACK_CELL:WordStack
      ~> #pc [ SWAP ( _N:Int ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int ( _N:Int +Int 1 ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( ( _N:Int +Int 1 ) -Int ( _N:Int +Int 1 ) ) ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals _N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) ) )




Proof LOG_2_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ LOG ( 2 ) ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WS:WordStack , 2 ) <Int 4
┃  │
┃  ├─ 3
┃  │   k: #next [ LOG ( 2 ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool _STATIC_CELL:Bool )
┃  ┃     4 <=Int #sizeWordStack ( _WS:WordStack , 2 )
┃  │
┃  ├─ 4
┃  │   k: #next [ LOG ( 2 ) ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (3 steps)
┃  ├─ 6 (split)
┃  │   k: #gas [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ] ~> LOG ( 2 ) _W0:Int _W1:Int ~> # ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     _USEGAS_CELL:Bool
┃  ┃  │
┃  ┃  ├─ 9
┃  ┃  │   k: #gas [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ] ~> LOG ( 2 ) _W0:Int _W1:Int ~> # ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (4 steps)
┃  ┃  ├─ 12 (split)
┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 15
┃  ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (3 steps)
┃  ┃  ┃  ├─ 17 (split)
┃  ┃  ┃  │   k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃     ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 18
┃  ┃  ┃  ┃  │   k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  │  (2 steps)
┃  ┃  ┃  ┃  ├─ 20
┃  ┃  ┃  ┃  │   k: LOG ( 2 ) _W0:Int _W1:Int ~> #pc [ LOG ( 2 ) ] ~> _K_CELL:K
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┃ (1 step)
┃  ┃  ┃  ┃  ┣━━┓
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  ├─ 21
┃  ┃  ┃  ┃  ┃  │   k: #pc [ LOG ( 2 ) ] ~> _K_CELL:K
┃  ┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  │  (1 step)
┃  ┃  ┃  ┃  ┃  ├─ 26
┃  ┃  ┃  ┃  ┃  │   k: _K_CELL:K
┃  ┃  ┃  ┃  ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  ┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  ┊  constraint: true
┃  ┃  ┃  ┃  ┃  ┊  subst: ...
┃  ┃  ┃  ┃  ┃  └─ 2 (leaf, target)
┃  ┃  ┃  ┃  ┃      k: _K_CELL:K
┃  ┃  ┃  ┃  ┃      pc: ?_FINAL_PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┗━━┓
┃  ┃  ┃  ┃     │
┃  ┃  ┃  ┃     └─ 22 (stuck, leaf)
┃  ┃  ┃  ┃         k: LOG ( 2 ) _W0:Int _W1:Int ~> #pc [ LOG ( 2 ) ] ~> _K_CELL:K
┃  ┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃     ┃ constraint:
┃  ┃  ┃     ┃     _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
┃  ┃  ┃     │
┃  ┃  ┃     ├─ 19
┃  ┃  ┃     │   k: ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > ...
┃  ┃  ┃     │   pc: _PC_CELL:Int
┃  ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃     │
┃  ┃  ┃     │  (5 steps)
┃  ┃  ┃     └─ 24 (leaf, terminal)
┃  ┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃     │
┃  ┃     ├─ 16
┃  ┃     │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (6 steps)
┃  ┃     └─ 23 (leaf, terminal)
┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃         pc: _PC_CELL:Int
┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃     │
┃     ├─ 10
┃     │   k: #gas [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ] ~> LOG ( 2 ) _W0:Int _W1:Int ~> # ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     │
┃     │  (1 step)
┃     ├─ 11
┃     │   k: LOG ( 2 ) _W0:Int _W1:Int ~> #pc [ LOG ( 2 ) ] ~> _K_CELL:K
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (1 step)
┃     ┣━━┓
┃     ┃  │
┃     ┃  ├─ 13
┃     ┃  │   k: #pc [ LOG ( 2 ) ] ~> _K_CELL:K
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  │
┃     ┃  │  (1 step)
┃     ┃  ├─ 25
┃     ┃  │   k: _K_CELL:K
┃     ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  │
┃     ┃  ┊  constraint: true
┃     ┃  ┊  subst: ...
┃     ┃  └─ 2 (leaf, target)
┃     ┃      k: _K_CELL:K
┃     ┃      pc: ?_FINAL_PC_CELL:Int
┃     ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃     ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓
┃        │
┃        └─ 14 (stuck, leaf)
┃            k: LOG ( 2 ) _W0:Int _W1:Int ~> #pc [ LOG ( 2 ) ] ~> _K_CELL:K
┃            pc: _PC_CELL:Int
┃            callDepth: _CALLDEPTH_CELL:Int
┃            statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     _STATIC_CELL:Bool
   ┃     4 <=Int #sizeWordStack ( _WS:WordStack , 2 )
   │
   ├─ 5
   │   k: #next [ LOG ( 2 ) ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 7 (leaf, terminal)
       k: #halt ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WS:WordStack , 2 ) <Int 4 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals false }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals true }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WS:WordStack , 2 ) <Int 4 } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #gas [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 2 ) _W0:Int _W1:Int ]
      ~> #access [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 2 , _WS:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 2 , _WS:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , _W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals 2 <=Int #sizeWordStack ( _WS:WordStack , 0 ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And #Not ( #Exists ACCT:Int . ( { true #Equals 2 <=Int #sizeWordStack ( _WS:WordStack , 0 ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 2 ) _W0:Int _W1:Int ]
      ~> #access [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ LOG ( 2 ) _W0:Int _W1:Int ]
      ~> #access [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
      ~> #deductGas
      ~> #access [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
      ~> #deductGas
      ~> #access [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
      ~> #deductGas
      ~> #access [ LOG ( 2 ) , LOG ( 2 ) _W0:Int _W1:Int ]
      ~> LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 2 , _WS:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 2 , _WS:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , _W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 2 <=Int #sizeWordStack ( _WS:WordStack , 0 ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      LOG ( 2 ) _W0:Int _W1:Int
      ~> #pc [ LOG ( 2 ) ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( #Not ( #Exists ACCT:Int . ( { true #Equals 2 <=Int #sizeWordStack ( _WS:WordStack , 0 ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) )
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) } ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 2 , _WS:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 2 , _WS:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , _W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals 2 <=Int #sizeWordStack ( _WS:WordStack , 0 ) }
#And { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) } ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            #drop ( 2 , _WS:WordStack )
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int )
          </memoryUsed>
          <static>
            false
          </static>
          ...
        </callState>
        <substate>
          <log>
            _LOG_CELL:List ListItem ( { ACCT:Int | WordStack2List ( #take ( 2 , _WS:WordStack ) ) | #range ( _LOCALMEM_CELL:Bytes , _W0:Int , _W1:Int ) } )
          </log>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _STATIC_CELL:Bool ) }
#And ( { true #Equals 2 <=Int #sizeWordStack ( _WS:WordStack , 0 ) }
#And ( { true #Equals 4 <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( ( Glog < _SCHEDULE_CELL:Schedule > +Int ( Glogdata < _SCHEDULE_CELL:Schedule > *Int _W1:Int ) ) +Int ( 2 *Int Glogtopic < _SCHEDULE_CELL:Schedule > ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , _W1:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) ) ) )




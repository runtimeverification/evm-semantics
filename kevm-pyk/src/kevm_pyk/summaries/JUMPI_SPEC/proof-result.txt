Proof JUMPI_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ JUMPI ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2
┃  │
┃  ├─ 3
┃  │   k: #next [ JUMPI ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 7 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024
┃  │
┃  ├─ 4
┃  │   k: #next [ JUMPI ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 )
   ┃     ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 )
   │
   ├─ 5
   │   k: #next [ JUMPI ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   ├─ 6
   │   k: #exec [ JUMPI ] ~> #pc [ JUMPI ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┃ (1 step)
   ┣━━┓
   ┃  │
   ┃  ├─ 9 (split)
   ┃  │   k: #gas [ JUMPI , JUMPI W0:Int W1:Int ] ~> JUMPI W0:Int W1:Int ~> #pc [ JUMPI ] ~>  ...
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┃ (branch)
   ┃  ┣━━┓ subst: .Subst
   ┃  ┃  ┃ constraint:
   ┃  ┃  ┃     _USEGAS_CELL:Bool
   ┃  ┃  │
   ┃  ┃  ├─ 11
   ┃  ┃  │   k: #gas [ JUMPI , JUMPI W0:Int W1:Int ] ~> JUMPI W0:Int W1:Int ~> #pc [ JUMPI ] ~>  ...
   ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  │
   ┃  ┃  │  (4 steps)
   ┃  ┃  ├─ 22
   ┃  ┃  │   k: Ghigh < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMPI , JUMPI W0:In ...
   ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┃ (1 step)
   ┃  ┃  ┣━━┓
   ┃  ┃  ┃  │
   ┃  ┃  ┃  └─ 23 (leaf, pending)
   ┃  ┃  ┃      k: #access [ JUMPI , JUMPI W0:Int W1:Int ] ~> JUMPI W0:Int W1:Int ~> #pc [ JUMPI ]  ...
   ┃  ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┣━━┓
   ┃  ┃  ┃  │
   ┃  ┃  ┃  └─ 24 (leaf, pending)
   ┃  ┃  ┃      k: #end EVMC_OUT_OF_GAS ~> #access [ JUMPI , JUMPI W0:Int W1:Int ] ~> JUMPI W0:Int  ...
   ┃  ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┗━━┓
   ┃  ┃     │
   ┃  ┃     └─ 25 (leaf, pending)
   ┃  ┃         k: Ghigh < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ JUMPI , JUMPI W0:In ...
   ┃  ┃         pc: _PC_CELL:Int
   ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┗━━┓ subst: .Subst
   ┃     ┃ constraint:
   ┃     ┃     ( notBool _USEGAS_CELL:Bool )
   ┃     │
   ┃     ├─ 12
   ┃     │   k: #gas [ JUMPI , JUMPI W0:Int W1:Int ] ~> JUMPI W0:Int W1:Int ~> #pc [ JUMPI ] ~>  ...
   ┃     │   pc: _PC_CELL:Int
   ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     │
   ┃     │  (1 step)
   ┃     ├─ 17 (split)
   ┃     │   k: JUMPI W0:Int W1:Int ~> #pc [ JUMPI ] ~> _K_CELL:K
   ┃     │   pc: _PC_CELL:Int
   ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃
   ┃     ┃ (branch)
   ┃     ┣━━┓ subst: .Subst
   ┃     ┃  ┃ constraint:
   ┃     ┃  ┃     ( notBool W1:Int ==Int 0 )
   ┃     ┃  │
   ┃     ┃  └─ 20 (leaf, pending)
   ┃     ┃      k: JUMPI W0:Int W1:Int ~> #pc [ JUMPI ] ~> _K_CELL:K
   ┃     ┃      pc: _PC_CELL:Int
   ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃     ┃
   ┃     ┗━━┓ subst: .Subst
   ┃        ┃ constraint:
   ┃        ┃     W1:Int ==Int 0
   ┃        ┃     _WORDSTACK_CELL:WordStack ==K ( W0:Int : ( 0 : WS:WordStack ) )
   ┃        │
   ┃        └─ 21 (leaf, pending)
   ┃            k: JUMPI W0:Int W1:Int ~> #pc [ JUMPI ] ~> _K_CELL:K
   ┃            pc: _PC_CELL:Int
   ┃            callDepth: _CALLDEPTH_CELL:Int
   ┃            statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┗━━┓
      │
      ├─ 10
      │   k: #exec [ JUMPI ] ~> #pc [ JUMPI ] ~> _K_CELL:K
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┃ (1 step)
      ┣━━┓
      ┃  │
      ┃  ├─ 13 (split)
      ┃  │   k: #gas [ JUMPI , JUMPI W0:Int W2:Int ] ~> JUMPI W0:Int W2:Int ~> #pc [ JUMPI ] ~>  ...
      ┃  │   pc: _PC_CELL:Int
      ┃  │   callDepth: _CALLDEPTH_CELL:Int
      ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃
      ┃  ┃ (branch)
      ┃  ┣━━┓ subst: .Subst
      ┃  ┃  ┃ constraint:
      ┃  ┃  ┃     _USEGAS_CELL:Bool
      ┃  ┃  │
      ┃  ┃  └─ 15 (leaf, pending)
      ┃  ┃      k: #gas [ JUMPI , JUMPI W0:Int W2:Int ] ~> JUMPI W0:Int W2:Int ~> #pc [ JUMPI ] ~>  ...
      ┃  ┃      pc: _PC_CELL:Int
      ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃  ┃
      ┃  ┗━━┓ subst: .Subst
      ┃     ┃ constraint:
      ┃     ┃     ( notBool _USEGAS_CELL:Bool )
      ┃     │
      ┃     └─ 16 (leaf, pending)
      ┃         k: #gas [ JUMPI , JUMPI W0:Int W2:Int ] ~> JUMPI W0:Int W2:Int ~> #pc [ JUMPI ] ~>  ...
      ┃         pc: _PC_CELL:Int
      ┃         callDepth: _CALLDEPTH_CELL:Int
      ┃         statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┗━━┓
         │
         ├─ 14
         │   k: #exec [ JUMPI ] ~> #pc [ JUMPI ] ~> _K_CELL:K
         │   pc: _PC_CELL:Int
         │   callDepth: _CALLDEPTH_CELL:Int
         │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃
         ┃ (1 step)
         ┣━━┓
         ┃  │
         ┃  └─ 18 (leaf, pending)
         ┃      k: #gas [ JUMPI , JUMPI W0:Int W3:Int ] ~> JUMPI W0:Int W3:Int ~> #pc [ JUMPI ] ~>  ...
         ┃      pc: _PC_CELL:Int
         ┃      callDepth: _CALLDEPTH_CELL:Int
         ┃      statusCode: _STATUSCODE_CELL:StatusCode
         ┃
         ┗━━┓
            │
            └─ 19 (leaf, pending)
                k: #exec [ JUMPI ] ~> #pc [ JUMPI ] ~> _K_CELL:K
                pc: _PC_CELL:Int
                callDepth: _CALLDEPTH_CELL:Int
                statusCode: _STATUSCODE_CELL:StatusCode


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ JUMPI ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #next [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 }
#And { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } ) )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMPI ]
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 } )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMPI ]
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W2:Int ]
      ~> JUMPI W0:Int W2:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMPI ]
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } )
#And #Not ( #Exists W0:Int . #Exists W2:Int . #Exists WS0:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) } ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W2:Int ]
      ~> JUMPI W0:Int W2:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W2:Int ]
      ~> JUMPI W0:Int W2:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS0:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And ( { true #Equals ( notBool #sizeWordStack ( WS0:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS0:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And #Not ( ( { W1:Int #Equals W2:Int }
#And { WS:WordStack #Equals WS0:WordStack } ) ) ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #gas [ JUMPI , JUMPI W0:Int W3:Int ]
      ~> JUMPI W0:Int W3:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS1:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( WS1:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS1:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( ( { W1:Int #Equals W3:Int }
#And { WS:WordStack #Equals WS1:WordStack } ) )
#And #Not ( ( { W2:Int #Equals W3:Int }
#And { WS0:WordStack #Equals WS1:WordStack } ) ) ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      #exec [ JUMPI ]
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int 2 ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int -2 ) >Int 1024 ) }
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } )
#And ( #Not ( #Exists W0:Int . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W2:Int : WS0:WordStack ) ) } )
#And #Not ( #Exists W0:Int . #Exists W3:Int . #Exists WS1:WordStack . { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W3:Int : WS1:WordStack ) ) } ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( { W1:Int #Equals 0 } )
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { W1:Int #Equals 0 }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( 0 : WS:WordStack ) ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      Ghigh < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #access [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Ghigh < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals Ghigh < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_OUT_OF_GAS
      ~> #access [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals _GAS_CELL:Gas <Gas Ghigh < _SCHEDULE_CELL:Schedule > }
#And { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) } ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      Ghigh < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ JUMPI , JUMPI W0:Int W1:Int ]
      ~> JUMPI W0:Int W1:Int
      ~> #pc [ JUMPI ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( notBool #sizeWordStack ( WS:WordStack , 2 ) <Int 2 ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( WS:WordStack , 2 ) +Int -2 ) >Int 1024 ) }
#And ( { true #Equals ( notBool _GAS_CELL:Gas <Gas Ghigh < _SCHEDULE_CELL:Schedule > ) }
#And { true #Equals ( notBool Ghigh < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas ) } ) ) ) ) ) )




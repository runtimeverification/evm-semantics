Proof CALL_7_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ CALL ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) )
┃  │
┃  ├─ 3
┃  │   k: #next [ CALL ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (3 steps)
┃  ├─ 5 (split)
┃  │   k: #gas [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5 ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     _USEGAS_CELL:Bool
┃  ┃  │
┃  ┃  ├─ 7
┃  ┃  │   k: #gas [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5 ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (4 steps)
┃  ┃  ├─ 12 (split)
┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _ME ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 13
┃  ┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _ME ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (12 steps)
┃  ┃  ┃  ├─ 24 (split)
┃  ┃  ┃  │   k: Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃     Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ├─ 25
┃  ┃  ┃  ┃  │   k: Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  │  (1 step)
┃  ┃  ┃  ┃  ├─ 34 (split)
┃  ┃  ┃  ┃  │   k: #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int  ...
┃  ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┃ (branch)
┃  ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃  ┃  ┃     Ghasaccesslist << _SCHEDULE_CELL:Schedule >>
┃  ┃  ┃  ┃  ┃  │
┃  ┃  ┃  ┃  ┃  └─ 41 (leaf, pending)
┃  ┃  ┃  ┃  ┃      k: #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int  ...
┃  ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃  ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃  ┃
┃  ┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃  ┃     ┃ constraint: true
┃  ┃  ┃  ┃     │
┃  ┃  ┃  ┃     └─ 42 (leaf, pending)
┃  ┃  ┃  ┃         k: #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int  ...
┃  ┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  ┃
┃  ┃  ┃  ┗━━┓ subst: .Subst
┃  ┃  ┃     ┃ constraint:
┃  ┃  ┃     ┃     _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
┃  ┃  ┃     │
┃  ┃  ┃     └─ 26 (leaf, pending)
┃  ┃  ┃         k: Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in ...
┃  ┃  ┃         pc: _PC_CELL:Int
┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃     │
┃  ┃     ├─ 14
┃  ┃     │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _ME ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (6 steps)
┃  ┃     └─ 33 (leaf, terminal)
┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃         pc: _PC_CELL:Int
┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     ( notBool _USEGAS_CELL:Bool )
┃     │
┃     ├─ 8
┃     │   k: #gas [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5 ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     │
┃     │  (1 step)
┃     ├─ 9
┃     │   k: CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ~ ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┃ (1 step)
┃     ┣━━┓
┃     ┃  │
┃     ┃  ├─ 10
┃     ┃  │   k: #accessAccounts ( _W1:Int modInt pow160 ) ~> #checkCall ACCTFROM:Int _W2:Int ~>  ...
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  │
┃     ┃  │  (2 steps)
┃     ┃  ├─ 15
┃     ┃  │   k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
┃     ┃  │   pc: _PC_CELL:Int
┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┃ (1 step)
┃     ┃  ┣━━┓
┃     ┃  ┃  │
┃     ┃  ┃  └─ 16 (leaf, pending)
┃     ┃  ┃      k: #refund _CALLGAS_CELL:Gas ~> #pushCallStack ~> #pushWorldState ~> #end EVMC_BALA ...
┃     ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┣━━┓
┃     ┃  ┃  │
┃     ┃  ┃  ├─ 17 (split)
┃     ┃  ┃  │   k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┃ (branch)
┃     ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃  ┃     _CALLDEPTH_CELL:Int <Int 1024
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  ├─ 19
┃     ┃  ┃  ┃  │   k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  │
┃     ┃  ┃  ┃  │  (1 step)
┃     ┃  ┃  ┃  ├─ 32 (split)
┃     ┃  ┃  ┃  │   k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃  ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  ┃
┃     ┃  ┃  ┃  ┃ (branch)
┃     ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃  ┃  ┃     _Gen0:CodeCell ==K <code>
  CODE:Bytes
</code>
┃     ┃  ┃  ┃  ┃  ┃     ACCTFROM:Int ==Int ( _W1:Int modInt pow160 )
┃     ┃  ┃  ┃  ┃  ┃     _ID_CELL:Account ==K ( _W1:Int modInt pow160 )
┃     ┃  ┃  ┃  ┃  ┃     ( notBool <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( _DotVar5:AccountCellMap ) )
┃     ┃  ┃  ┃  ┃  ┃     _ACCOUNTS_CELL:AccountCellMap ==K ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap )
┃     ┃  ┃  ┃  ┃  │
┃     ┃  ┃  ┃  ┃  └─ 38 (leaf, pending)
┃     ┃  ┃  ┃  ┃      k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  ┃
┃     ┃  ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃  ┃  ┃  ┃  ┃ constraint:
┃     ┃  ┃  ┃  ┃  ┃     ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( AC3_:AccountCellMap ) )
┃     ┃  ┃  ┃  ┃  ┃     ( notBool ACCTFROM:Int ==Int ( _W1:Int modInt pow160 ) )
┃     ┃  ┃  ┃  ┃  ┃     ( notBool <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( AC3_:AccountCellMap ) )
┃     ┃  ┃  ┃  ┃  ┃     _DotVar5:AccountCellMap ==K ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
AC3_:AccountCellMap )
┃     ┃  ┃  ┃  ┃  ┃     _ACCOUNTS_CELL:AccountCellMap ==K ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
AC3_:AccountCellMap ) )
┃     ┃  ┃  ┃  ┃  │
┃     ┃  ┃  ┃  ┃  └─ 39 (leaf, pending)
┃     ┃  ┃  ┃  ┃      k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃  ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃  ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃  ┃
┃     ┃  ┃  ┃  ┗━━┓ subst: .Subst
┃     ┃  ┃  ┃     ┃ constraint: true
┃     ┃  ┃  ┃     │
┃     ┃  ┃  ┃     └─ 40 (leaf, pending)
┃     ┃  ┃  ┃         k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃  ┃  ┃         pc: _PC_CELL:Int
┃     ┃  ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃  ┃
┃     ┃  ┃  ┗━━┓ subst: .Subst
┃     ┃  ┃     ┃ constraint:
┃     ┃  ┃     ┃     1024 <=Int _CALLDEPTH_CELL:Int
┃     ┃  ┃     │
┃     ┃  ┃     └─ 20 (leaf, pending)
┃     ┃  ┃         k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃  ┃         pc: _PC_CELL:Int
┃     ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃  ┃
┃     ┃  ┗━━┓
┃     ┃     │
┃     ┃     ├─ 18
┃     ┃     │   k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
┃     ┃     │   pc: _PC_CELL:Int
┃     ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┃ (1 step)
┃     ┃     ┣━━┓
┃     ┃     ┃  │
┃     ┃     ┃  └─ 21 (leaf, pending)
┃     ┃     ┃      k: #refund _CALLGAS_CELL:Gas ~> #pushCallStack ~> #pushWorldState ~> #end EVMC_BALA ...
┃     ┃     ┃      pc: _PC_CELL:Int
┃     ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┣━━┓
┃     ┃     ┃  │
┃     ┃     ┃  ├─ 22 (split)
┃     ┃     ┃  │   k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃     ┃  │   pc: _PC_CELL:Int
┃     ┃     ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃  ┃
┃     ┃     ┃  ┃ (branch)
┃     ┃     ┃  ┣━━┓ subst: .Subst
┃     ┃     ┃  ┃  ┃ constraint:
┃     ┃     ┃  ┃  ┃     _CALLDEPTH_CELL:Int <Int 1024
┃     ┃     ┃  ┃  │
┃     ┃     ┃  ┃  ├─ 27
┃     ┃     ┃  ┃  │   k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃  ┃  │
┃     ┃     ┃  ┃  │  (1 step)
┃     ┃     ┃  ┃  ├─ 35 (split)
┃     ┃     ┃  ┃  │   k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃     ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃     ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃  ┃  ┃
┃     ┃     ┃  ┃  ┃ (branch)
┃     ┃     ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃     ┃  ┃  ┃  ┃ constraint:
┃     ┃     ┃  ┃  ┃  ┃     _Gen28:CodeCell ==K <code>
  CODE:Bytes
</code>
┃     ┃     ┃  ┃  ┃  ┃     ACCTFROM:Int ==Int ( _W1:Int modInt pow160 )
┃     ┃     ┃  ┃  ┃  ┃     _ID_CELL:Account ==K ( _W1:Int modInt pow160 )
┃     ┃     ┃  ┃  ┃  ┃     ( notBool <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( _DotVar5:AccountCellMap ) )
┃     ┃     ┃  ┃  ┃  ┃     _ACCOUNTS_CELL:AccountCellMap ==K ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  <code>
    CODE:Bytes
  </code>
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap )
┃     ┃     ┃  ┃  ┃  │
┃     ┃     ┃  ┃  ┃  └─ 46 (leaf, pending)
┃     ┃     ┃  ┃  ┃      k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃     ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃  ┃  ┃
┃     ┃     ┃  ┃  ┣━━┓ subst: .Subst
┃     ┃     ┃  ┃  ┃  ┃ constraint:
┃     ┃     ┃  ┃  ┃  ┃     ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( AC3_:AccountCellMap ) )
┃     ┃     ┃  ┃  ┃  ┃     ( notBool ACCTFROM:Int ==Int ( _W1:Int modInt pow160 ) )
┃     ┃     ┃  ┃  ┃  ┃     ( notBool <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( AC3_:AccountCellMap ) )
┃     ┃     ┃  ┃  ┃  ┃     _DotVar5:AccountCellMap ==K ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
AC3_:AccountCellMap )
┃     ┃     ┃  ┃  ┃  ┃     _ACCOUNTS_CELL:AccountCellMap ==K ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
AC3_:AccountCellMap ) )
┃     ┃     ┃  ┃  ┃  │
┃     ┃     ┃  ┃  ┃  └─ 47 (leaf, pending)
┃     ┃     ┃  ┃  ┃      k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃     ┃  ┃  ┃      pc: _PC_CELL:Int
┃     ┃     ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃  ┃  ┃
┃     ┃     ┃  ┃  ┗━━┓ subst: .Subst
┃     ┃     ┃  ┃     ┃ constraint: true
┃     ┃     ┃  ┃     │
┃     ┃     ┃  ┃     └─ 48 (leaf, pending)
┃     ┃     ┃  ┃         k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃     ┃  ┃         pc: _PC_CELL:Int
┃     ┃     ┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃  ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃  ┃
┃     ┃     ┃  ┗━━┓ subst: .Subst
┃     ┃     ┃     ┃ constraint:
┃     ┃     ┃     ┃     1024 <=Int _CALLDEPTH_CELL:Int
┃     ┃     ┃     │
┃     ┃     ┃     └─ 28 (leaf, pending)
┃     ┃     ┃         k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃     ┃         pc: _PC_CELL:Int
┃     ┃     ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃     ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃     ┃
┃     ┃     ┗━━┓
┃     ┃        │
┃     ┃        ├─ 23
┃     ┃        │   k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
┃     ┃        │   pc: _PC_CELL:Int
┃     ┃        │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃        ┃
┃     ┃        ┃ (1 step)
┃     ┃        ┣━━┓
┃     ┃        ┃  │
┃     ┃        ┃  └─ 29 (leaf, pending)
┃     ┃        ┃      k: #refund _CALLGAS_CELL:Gas ~> #pushCallStack ~> #pushWorldState ~> #end EVMC_BALA ...
┃     ┃        ┃      pc: _PC_CELL:Int
┃     ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃        ┃
┃     ┃        ┣━━┓
┃     ┃        ┃  │
┃     ┃        ┃  ├─ 30 (split)
┃     ┃        ┃  │   k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃        ┃  │   pc: _PC_CELL:Int
┃     ┃        ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃        ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃        ┃  ┃
┃     ┃        ┃  ┃ (branch)
┃     ┃        ┃  ┣━━┓ subst: .Subst
┃     ┃        ┃  ┃  ┃ constraint:
┃     ┃        ┃  ┃  ┃     _CALLDEPTH_CELL:Int <Int 1024
┃     ┃        ┃  ┃  │
┃     ┃        ┃  ┃  ├─ 36
┃     ┃        ┃  ┃  │   k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃        ┃  ┃  │   pc: _PC_CELL:Int
┃     ┃        ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃        ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃        ┃  ┃  │
┃     ┃        ┃  ┃  │  (1 step)
┃     ┃        ┃  ┃  └─ 49 (leaf, pending)
┃     ┃        ┃  ┃      k: #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _ ...
┃     ┃        ┃  ┃      pc: _PC_CELL:Int
┃     ┃        ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃        ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃        ┃  ┃
┃     ┃        ┃  ┗━━┓ subst: .Subst
┃     ┃        ┃     ┃ constraint:
┃     ┃        ┃     ┃     1024 <=Int _CALLDEPTH_CELL:Int
┃     ┃        ┃     │
┃     ┃        ┃     └─ 37 (leaf, pending)
┃     ┃        ┃         k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃        ┃         pc: _PC_CELL:Int
┃     ┃        ┃         callDepth: _CALLDEPTH_CELL:Int
┃     ┃        ┃         statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃        ┃
┃     ┃        ┗━━┓
┃     ┃           │
┃     ┃           ├─ 31
┃     ┃           │   k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
┃     ┃           │   pc: _PC_CELL:Int
┃     ┃           │   callDepth: _CALLDEPTH_CELL:Int
┃     ┃           │   statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃           ┃
┃     ┃           ┃ (1 step)
┃     ┃           ┣━━┓
┃     ┃           ┃  │
┃     ┃           ┃  └─ 43 (leaf, pending)
┃     ┃           ┃      k: #refund _CALLGAS_CELL:Gas ~> #pushCallStack ~> #pushWorldState ~> #end EVMC_BALA ...
┃     ┃           ┃      pc: _PC_CELL:Int
┃     ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃           ┃
┃     ┃           ┣━━┓
┃     ┃           ┃  │
┃     ┃           ┃  └─ 44 (leaf, pending)
┃     ┃           ┃      k: #checkDepthExceeded ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int mo ...
┃     ┃           ┃      pc: _PC_CELL:Int
┃     ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
┃     ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃           ┃
┃     ┃           ┗━━┓
┃     ┃              │
┃     ┃              └─ 45 (leaf, pending)
┃     ┃                  k: #checkBalanceUnderflow ACCTFROM:Int _W2:Int ~> #checkDepthExceeded ~> #call ACCT ...
┃     ┃                  pc: _PC_CELL:Int
┃     ┃                  callDepth: _CALLDEPTH_CELL:Int
┃     ┃                  statusCode: _STATUSCODE_CELL:StatusCode
┃     ┃
┃     ┗━━┓
┃        │
┃        └─ 11 (stuck, leaf)
┃            k: CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ~ ...
┃            pc: _PC_CELL:Int
┃            callDepth: _CALLDEPTH_CELL:Int
┃            statusCode: _STATUSCODE_CELL:StatusCode
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     _STATIC_CELL:Bool
   ┃     #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) )
   │
   ├─ 4
   │   k: #next [ CALL ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (2 steps)
   └─ 6 (leaf, terminal)
       k: #halt ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: EVMC_STATIC_MODE_VIOLATION


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { false #Equals ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) )
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _STATIC_CELL:Bool #Equals true }
#And { true #Equals #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) )
          </wordStack>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And { true #Equals #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #gas [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #gas [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      #accessAccounts ( _W1:Int modInt pow160 )
      ~> #checkCall ACCTFROM:Int _W2:Int
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( #Not ( #Exists ACCTFROM:Int . { _ID_CELL:Account #Equals ACCTFROM:Int } )
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #refund _CALLGAS_CELL:Gas
      ~> #pushCallStack
      ~> #pushWorldState
      ~> #end EVMC_BALANCE_UNDERFLOW
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <callGas>
            _CALLGAS_CELL:Gas
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen23:CodeCell
            _Gen24:StorageCell
            _Gen25:OrigStorageCell
            _Gen26:TransientStorageCell
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals 1024 <=Int _CALLDEPTH_CELL:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      #refund _CALLGAS_CELL:Gas
      ~> #pushCallStack
      ~> #pushWorldState
      ~> #end EVMC_BALANCE_UNDERFLOW
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <callGas>
            _CALLGAS_CELL:Gas
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( #Exists _DotVar5:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  ...
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen28:CodeCell . #Exists _Gen29:StorageCell . #Exists _Gen30:OrigStorageCell . #Exists _Gen31:TransientStorageCell . #Exists _Gen32:NonceCell . #Exists BAL0:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL0:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar5:AccountCellMap . #Exists _Gen28:CodeCell . #Exists _Gen29:StorageCell . #Exists _Gen30:OrigStorageCell . #Exists _Gen31:TransientStorageCell . #Exists _Gen32:NonceCell . #Exists BAL0:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) ) ) ) ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
      ~> #deductGas
      ~> #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <callGas>
            Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) +Gas #if _W2:Int ==Int 0 #then 0 #else Gcallstipend < _SCHEDULE_CELL:Schedule > #fi
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
      ~> #deductGas
      ~> #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <callGas>
            Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) +Gas #if _W2:Int ==Int 0 #then 0 #else Gcallstipend < _SCHEDULE_CELL:Schedule > #fi
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And { true #Equals Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
      ~> #deductGas
      ~> #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <callGas>
            Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) +Gas #if _W2:Int ==Int 0 #then 0 #else Gcallstipend < _SCHEDULE_CELL:Schedule > #fi
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) } ) ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals 1024 <=Int _CALLDEPTH_CELL:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      #refund _CALLGAS_CELL:Gas
      ~> #pushCallStack
      ~> #pushWorldState
      ~> #end EVMC_BALANCE_UNDERFLOW
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <callGas>
            _CALLGAS_CELL:Gas
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals BAL1:Int <Int _W2:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL1:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( #Exists _DotVar5:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  ...
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL0:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar5:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen33:CodeCell . #Exists _Gen34:StorageCell . #Exists _Gen35:OrigStorageCell . #Exists _Gen36:TransientStorageCell . #Exists _Gen37:NonceCell . #Exists BAL1:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL1:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar5:AccountCellMap . #Exists _Gen33:CodeCell . #Exists _Gen34:StorageCell . #Exists _Gen35:OrigStorageCell . #Exists _Gen36:TransientStorageCell . #Exists _Gen37:NonceCell . #Exists BAL1:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL1:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) ) )



Node 33:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) )



Node 34:

( <generatedTop>
  <kevm>
    <k>
      #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <callGas>
            Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) +Gas #if _W2:Int ==Int 0 #then 0 #else Gcallstipend < _SCHEDULE_CELL:Schedule > #fi
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And { true #Equals Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) )



Node 35:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 36:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL1:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 37:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL1:Int }
#And ( { true #Equals 1024 <=Int _CALLDEPTH_CELL:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 38:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _Gen0:CodeCell #Equals <code>
  CODE:Bytes
</code> }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { ACCTFROM:Int #Equals ( _W1:Int modInt pow160 ) }
#And ( { _ID_CELL:Account #Equals ( _W1:Int modInt pow160 ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { false #Equals <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 39:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( AC3_:AccountCellMap ) }
#And ( #Not ( { ACCTFROM:Int #Equals ( _W1:Int modInt pow160 ) } )
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { false #Equals <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( AC3_:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { _DotVar5:AccountCellMap #Equals ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
AC3_:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
AC3_:AccountCellMap ) ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 40:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen0:CodeCell
            _Gen1:StorageCell
            _Gen2:OrigStorageCell
            _Gen3:TransientStorageCell
            _Gen4:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) } ) ) ) ) ) ) )



Node 41:

( <generatedTop>
  <kevm>
    <k>
      #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <callGas>
            Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) +Gas #if _W2:Int ==Int 0 #then 0 #else Gcallstipend < _SCHEDULE_CELL:Schedule > #fi
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals Ghasaccesslist << _SCHEDULE_CELL:Schedule >> }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And { true #Equals Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) ) )



Node 42:

( <generatedTop>
  <kevm>
    <k>
      #access [ CALL , CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int ]
      ~> CALL _W0:Int ( _W1:Int modInt pow160 ) _W2:Int _W3:Int _W4:Int _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int )
          </memoryUsed>
          <callGas>
            Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) +Gas #if _W2:Int ==Int 0 #then 0 #else Gcallstipend < _SCHEDULE_CELL:Schedule > #fi
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And { true #Equals Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) +Gas Cgascap ( _SCHEDULE_CELL:Schedule , _W0:Int , _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) , Cextra ( _SCHEDULE_CELL:Schedule , true , _W2:Int , ( _W1:Int modInt pow160 ) in _ACCESSEDACCOUNTS_CELL:Set ) ) <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W3:Int , _W4:Int ) , _W5:Int , _W6:Int ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) ) )



Node 43:

( <generatedTop>
  <kevm>
    <k>
      #refund _CALLGAS_CELL:Gas
      ~> #pushCallStack
      ~> #pushWorldState
      ~> #end EVMC_BALANCE_UNDERFLOW
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <callGas>
            _CALLGAS_CELL:Gas
          </callGas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL2:Int
            </balance>
            _Gen38:CodeCell
            _Gen39:StorageCell
            _Gen40:OrigStorageCell
            _Gen41:TransientStorageCell
            _Gen42:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals BAL2:Int <Int _W2:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen42:NonceCell }
#And { BAL:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen42:NonceCell }
#And { BAL:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen42:NonceCell }
#And { BAL0:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL1:Int <Int _W2:Int }
#And ( { _Gen33:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen34:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen35:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen36:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen37:NonceCell #Equals _Gen42:NonceCell }
#And { BAL1:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen42:NonceCell }
#And { BAL0:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL1:Int }
#And ( { _Gen33:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen34:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen35:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen36:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen37:NonceCell #Equals _Gen42:NonceCell }
#And { BAL1:Int #Equals BAL2:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 44:

( <generatedTop>
  <kevm>
    <k>
      #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL2:Int
            </balance>
            _Gen38:CodeCell
            _Gen39:StorageCell
            _Gen40:OrigStorageCell
            _Gen41:TransientStorageCell
            _Gen42:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL2:Int }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen42:NonceCell }
#And { BAL:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen42:NonceCell }
#And { BAL:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen42:NonceCell }
#And { BAL0:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL1:Int <Int _W2:Int }
#And ( { _Gen33:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen34:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen35:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen36:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen37:NonceCell #Equals _Gen42:NonceCell }
#And { BAL1:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen42:NonceCell }
#And { BAL0:Int #Equals BAL2:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL1:Int }
#And ( { _Gen33:CodeCell #Equals _Gen38:CodeCell }
#And ( { _Gen34:StorageCell #Equals _Gen39:StorageCell }
#And ( { _Gen35:OrigStorageCell #Equals _Gen40:OrigStorageCell }
#And ( { _Gen36:TransientStorageCell #Equals _Gen41:TransientStorageCell }
#And ( { _Gen37:NonceCell #Equals _Gen42:NonceCell }
#And { BAL1:Int #Equals BAL2:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 45:

( <generatedTop>
  <kevm>
    <k>
      #checkBalanceUnderflow ACCTFROM:Int _W2:Int
      ~> #checkDepthExceeded
      ~> #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( #Exists _DotVar5:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  ...
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL0:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL1:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar5:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar5:AccountCellMap . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL1:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) )
#And ( #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen38:CodeCell . #Exists _Gen39:StorageCell . #Exists _Gen40:OrigStorageCell . #Exists _Gen41:TransientStorageCell . #Exists _Gen42:NonceCell . #Exists BAL2:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { true #Equals BAL2:Int <Int _W2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar5:AccountCellMap . #Exists _Gen38:CodeCell . #Exists _Gen39:StorageCell . #Exists _Gen40:OrigStorageCell . #Exists _Gen41:TransientStorageCell . #Exists _Gen42:NonceCell . #Exists BAL2:Int . ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { true #Equals _W2:Int <=Int BAL2:Int }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar5:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 46:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { _Gen28:CodeCell #Equals <code>
  CODE:Bytes
</code> }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { ACCTFROM:Int #Equals ( _W1:Int modInt pow160 ) }
#And ( { _ID_CELL:Account #Equals ( _W1:Int modInt pow160 ) }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { false #Equals <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  <code>
    CODE:Bytes
  </code>
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 47:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( AC3_:AccountCellMap ) }
#And ( #Not ( { ACCTFROM:Int #Equals ( _W1:Int modInt pow160 ) } )
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { false #Equals <acctID>
  ( _W1:Int modInt pow160 )
</acctID> in_keys ( AC3_:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { _DotVar5:AccountCellMap #Equals ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
AC3_:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ( _W1:Int modInt pow160 )
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account>
( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
AC3_:AccountCellMap ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 48:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen28:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen29:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen30:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen31:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen32:NonceCell }
#And { BAL:Int #Equals BAL0:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 49:

( <generatedTop>
  <kevm>
    <k>
      #call ACCTFROM:Int ( _W1:Int modInt pow160 ) ( _W1:Int modInt pow160 ) _W2:Int _W2:Int #range ( _LOCALMEM_CELL:Bytes , _W3:Int , _W4:Int ) false
      ~> #return _W5:Int _W6:Int
      ~> #pc [ CALL ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCTFROM:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <localMem>
            _LOCALMEM_CELL:Bytes
          </localMem>
          <static>
            _STATIC_CELL:Bool
          </static>
          <callDepth>
            _CALLDEPTH_CELL:Int
          </callDepth>
          ...
        </callState>
        <substate>
          <accessedAccounts>
            _ACCESSEDACCOUNTS_CELL:Set |Set SetItem ( ( _W1:Int modInt pow160 ) )
          </accessedAccounts>
          ...
        </substate>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCTFROM:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar5:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCTFROM:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals _W2:Int <=Int BAL1:Int }
#And ( { true #Equals _CALLDEPTH_CELL:Int <Int 1024 }
#And ( { true #Equals ( notBool <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar5:AccountCellMap ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( CALL , ( _W0:Int : ( _W1:Int : ( _W2:Int : ( _W3:Int : ( _W4:Int : ( _W5:Int : ( _W6:Int : _WS:WordStack ) ) ) ) ) ) ) ) ) ) }
#And ( #Not ( ( { true #Equals _W2:Int <=Int BAL:Int }
#And ( { _Gen0:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen1:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen2:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen3:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen4:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL:Int <Int _W2:Int }
#And ( { _Gen23:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen24:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen25:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen26:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen27:NonceCell #Equals _Gen37:NonceCell }
#And { BAL:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And ( #Not ( ( { true #Equals BAL0:Int <Int _W2:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) )
#And #Not ( ( { true #Equals _W2:Int <=Int BAL0:Int }
#And ( { _Gen28:CodeCell #Equals _Gen33:CodeCell }
#And ( { _Gen29:StorageCell #Equals _Gen34:StorageCell }
#And ( { _Gen30:OrigStorageCell #Equals _Gen35:OrigStorageCell }
#And ( { _Gen31:TransientStorageCell #Equals _Gen36:TransientStorageCell }
#And ( { _Gen32:NonceCell #Equals _Gen37:NonceCell }
#And { BAL0:Int #Equals BAL1:Int } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )




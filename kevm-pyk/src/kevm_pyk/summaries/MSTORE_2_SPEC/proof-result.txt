Proof MSTORE_2_SPEC Failed

┌─ 1 (root, init)
│   k: #next [ MSTORE ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
│
│  (3 steps)
├─ 3 (split)
│   k: #gas [ MSTORE , MSTORE _W0:Int _W1:Int ] ~> MSTORE _W0:Int _W1:Int ~> #pc [ MSTO ...
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     _USEGAS_CELL:Bool
┃  │
┃  ├─ 4
┃  │   k: #gas [ MSTORE , MSTORE _W0:Int _W1:Int ] ~> MSTORE _W0:Int _W1:Int ~> #pc [ MSTO ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (4 steps)
┃  ├─ 6 (split)
┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (branch)
┃  ┣━━┓ subst: .Subst
┃  ┃  ┃ constraint:
┃  ┃  ┃     ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas
┃  ┃  │
┃  ┃  ├─ 7
┃  ┃  │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  │
┃  ┃  │  (3 steps)
┃  ┃  ├─ 9 (split)
┃  ┃  │   k: Gverylow < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ MSTORE , MSTORE  ...
┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┃ (branch)
┃  ┃  ┣━━┓ subst: .Subst
┃  ┃  ┃  ┃ constraint:
┃  ┃  ┃  ┃     Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃  ┃  ┃  │
┃  ┃  ┃  ├─ 10
┃  ┃  ┃  │   k: Gverylow < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ MSTORE , MSTORE  ...
┃  ┃  ┃  │   pc: _PC_CELL:Int
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  │  (4 steps)
┃  ┃  ┃  ├─ 15
┃  ┃  ┃  │   k: _K_CELL:K
┃  ┃  ┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃  ┃  │
┃  ┃  ┃  ┊  constraint: true
┃  ┃  ┃  ┊  subst: ...
┃  ┃  ┃  └─ 2 (leaf, target)
┃  ┃  ┃      k: _K_CELL:K
┃  ┃  ┃      pc: ?_FINAL_PC_CELL:Int
┃  ┃  ┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃  ┃  ┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃  ┃  ┃
┃  ┃  ┗━━┓ subst: .Subst
┃  ┃     ┃ constraint:
┃  ┃     ┃     _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas Gverylow < _SCHEDULE_CELL:Schedule >
┃  ┃     │
┃  ┃     ├─ 11
┃  ┃     │   k: Gverylow < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ MSTORE , MSTORE  ...
┃  ┃     │   pc: _PC_CELL:Int
┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃     │
┃  ┃     │  (5 steps)
┃  ┃     └─ 13 (leaf, terminal)
┃  ┃         k: #halt ~> _K_CELL:K
┃  ┃         pc: _PC_CELL:Int
┃  ┃         callDepth: _CALLDEPTH_CELL:Int
┃  ┃         statusCode: EVMC_OUT_OF_GAS
┃  ┃
┃  ┗━━┓ subst: .Subst
┃     ┃ constraint:
┃     ┃     _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
┃     │
┃     ├─ 8
┃     │   k: ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _ ...
┃     │   pc: _PC_CELL:Int
┃     │   callDepth: _CALLDEPTH_CELL:Int
┃     │   statusCode: _STATUSCODE_CELL:StatusCode
┃     │
┃     │  (6 steps)
┃     └─ 12 (leaf, terminal)
┃         k: #halt ~> _K_CELL:K
┃         pc: _PC_CELL:Int
┃         callDepth: _CALLDEPTH_CELL:Int
┃         statusCode: EVMC_OUT_OF_GAS
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool _USEGAS_CELL:Bool )
   │
   ├─ 5
   │   k: #gas [ MSTORE , MSTORE _W0:Int _W1:Int ] ~> MSTORE _W0:Int _W1:Int ~> #pc [ MSTO ...
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (3 steps)
   ├─ 14
   │   k: _K_CELL:K
   │   pc: ( _PC_CELL:Int +Int 1 )
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   ┊  constraint: true
   ┊  subst: ...
   └─ 2 (leaf, target)
       k: _K_CELL:K
       pc: ?_FINAL_PC_CELL:Int
       callDepth: ?_FINAL_CALLDEPTH_CELL:Int
       statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( _W1:Int : _WS:WordStack ) )
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

<generatedTop>
  <kevm>
    <k>
      #gas [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #gas [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { _USEGAS_CELL:Bool #Equals true } )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    ...
  </kevm>
  ...
</generatedTop>
#And { _USEGAS_CELL:Bool #Equals false } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ MSTORE _W0:Int _W1:Int ]
      ~> #access [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals _USEGAS_CELL:Bool } )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ MSTORE _W0:Int _W1:Int ]
      ~> #access [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
      ~> #deductGas
      ~> #gas [ MSTORE _W0:Int _W1:Int ]
      ~> #access [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      Gverylow < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      Gverylow < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      Gverylow < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ MSTORE , MSTORE _W0:Int _W1:Int ]
      ~> MSTORE _W0:Int _W1:Int
      ~> #pc [ MSTORE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas Gverylow < _SCHEDULE_CELL:Schedule > } ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals _GAS_CELL:Gas <Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) )
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <Gas Gverylow < _SCHEDULE_CELL:Schedule > } ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <localMem>
            _LOCALMEM_CELL:Bytes [ _W0:Int := #padToWidth ( 32 , #asByteStack ( _W1:Int ) ) ]
          </localMem>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals ( notBool _USEGAS_CELL:Bool ) } )



Node 15:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <localMem>
            _LOCALMEM_CELL:Bytes [ _W0:Int := #padToWidth ( 32 , #asByteStack ( _W1:Int ) ) ]
          </localMem>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) -Gas Gverylow < _SCHEDULE_CELL:Schedule >
          </gas>
          <memoryUsed>
            #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 )
          </memoryUsed>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) <=Gas _GAS_CELL:Gas }
#And { true #Equals Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas -Gas ( Cmem ( _SCHEDULE_CELL:Schedule , #memoryUsageUpdate ( _MEMORYUSED_CELL:Int , _W0:Int , 32 ) ) -Int Cmem ( _SCHEDULE_CELL:Schedule , _MEMORYUSED_CELL:Int ) ) } ) ) )




Proof ALL_SPEC Failed

┌─ 1 (root, init)
│   k: #next [ _OP_CODE:MaybeOpCode ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (1 step)
┣━━┓
┃  │
┃  ├─ 3
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 4
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 5
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 6
┃  │   k: _K_CELL:K
┃  │   pc: ( ( _PC_CELL:Int +Int N:Int ) +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 7
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 8
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 9
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 10
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 11
┃  │   k: _K_CELL:K
┃  │   pc: ( _PC_CELL:Int +Int 1 )
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  ┊  constraint: true
┃  ┊  subst: ...
┃  └─ 2 (leaf, target)
┃      k: _K_CELL:K
┃      pc: ?_FINAL_PC_CELL:Int
┃      callDepth: ?_FINAL_CALLDEPTH_CELL:Int
┃      statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 12
┃  │   k: #end EVMC_STACK_UNDERFLOW ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (1 step)
┃  └─ 23 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_UNDERFLOW
┃
┣━━┓
┃  │
┃  ├─ 13
┃  │   k: #end EVMC_STACK_OVERFLOW ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (1 step)
┃  └─ 24 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┣━━┓
┃  │
┃  ├─ 14
┃  │   k: #addr [ OP:OpCode ] ~> #exec [ OP:OpCode ] ~> #pc [ OP:OpCode ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┃ (1 step)
┃  ┣━━┓
┃  ┃  │
┃  ┃  └─ 19 (leaf, pending)
┃  ┃      k: #exec [ OP:OpCode ] ~> #pc [ OP:OpCode ] ~> _K_CELL:K
┃  ┃      pc: _PC_CELL:Int
┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┣━━┓
┃  ┃  │
┃  ┃  └─ 20 (leaf, pending)
┃  ┃      k: #exec [ OP:OpCode ] ~> #pc [ OP:OpCode ] ~> _K_CELL:K
┃  ┃      pc: _PC_CELL:Int
┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┣━━┓
┃  ┃  │
┃  ┃  └─ 21 (leaf, pending)
┃  ┃      k: #exec [ OP:OpCode ] ~> #pc [ OP:OpCode ] ~> _K_CELL:K
┃  ┃      pc: _PC_CELL:Int
┃  ┃      callDepth: _CALLDEPTH_CELL:Int
┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
┃  ┃
┃  ┗━━┓
┃     │
┃     └─ 22 (leaf, pending)
┃         k: #addr [ OP:OpCode ] ~> #exec [ OP:OpCode ] ~> #pc [ OP:OpCode ] ~> _K_CELL:K
┃         pc: _PC_CELL:Int
┃         callDepth: _CALLDEPTH_CELL:Int
┃         statusCode: _STATUSCODE_CELL:StatusCode
┃
┣━━┓
┃  │
┃  ├─ 15
┃  │   k: #end EVMC_STATIC_MODE_VIOLATION ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (1 step)
┃  └─ 25 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STATIC_MODE_VIOLATION
┃
┣━━┓
┃  │
┃  ├─ 16
┃  │   k: #end EVMC_SUCCESS ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (1 step)
┃  └─ 18 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_SUCCESS
┃
┗━━┓
   │
   └─ 17 (leaf, pending)
       k: #next [ _OP_CODE:MaybeOpCode ] ~> _K_CELL:K
       pc: _PC_CELL:Int
       callDepth: _CALLDEPTH_CELL:Int
       statusCode: _STATUSCODE_CELL:StatusCode



Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ _OP_CODE:MaybeOpCode ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( WS:WordStack [ ( N:Int +Int -1 ) ] : WS:WordStack [ ( N:Int +Int -1 ) := W0:Int ] )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals SWAP ( N:Int ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) ) )



Node 4:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _WORDSTACK_CELL:WordStack [ ( N:Int +Int -1 ) ] : _WORDSTACK_CELL:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals DUP ( N:Int ) }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 5:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( 0 : _WORDSTACK_CELL:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gbase < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals PUSHZERO }
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) )



Node 6:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <program>
            _PROGRAM_CELL:Bytes
          </program>
          <wordStack>
            ( #asWord ( #range ( _PROGRAM_CELL:Bytes , ( _PC_CELL:Int +Int 1 ) , N:Int ) ) : _WORDSTACK_CELL:WordStack )
          </wordStack>
          <pc>
            ( ( _PC_CELL:Int +Int N:Int ) +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals PUSH ( N:Int ) }
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) )



Node 7:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( chop ( ( W0:Int -Int W1:Int ) ) : WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals SUB }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 8:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( bool2Word ( W0:Int <Int W1:Int ) : WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals LT }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 9:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( bool2Word ( W1:Int <Int W0:Int ) : WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals GT }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 10:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W0:Int &Int W1:Int ) : WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals AND }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( chop ( ( W0:Int +Int W1:Int ) ) : WS:WordStack )
          </wordStack>
          <pc>
            ( _PC_CELL:Int +Int 1 )
          </pc>
          <gas>
            #if _USEGAS_CELL:Bool #then _GAS_CELL:Gas -Gas Gverylow < _SCHEDULE_CELL:Schedule > #else _GAS_CELL:Gas #fi
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals ADD }
#And ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi } ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_UNDERFLOW
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STACK_OVERFLOW
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      #addr [ OP:OpCode ]
      ~> #exec [ OP:OpCode ]
      ~> #pc [ OP:OpCode ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_STATIC_MODE_VIOLATION
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      #end EVMC_SUCCESS
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { _OP_CODE:MaybeOpCode #Equals .NoOpCode } )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      #next [ _OP_CODE:MaybeOpCode ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _OP_CODE:MaybeOpCode ~> .K ==K .NoOpCode ~> .K ) }
#And ( #Not ( #Exists OP:OpCode . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) }
#And { _OP_CODE:MaybeOpCode #Equals OP:OpCode } ) )
#And ( #Not ( #Exists OP:OpCode . ( { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 }
#And { _OP_CODE:MaybeOpCode #Equals OP:OpCode } ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _OP_CODE:MaybeOpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _OP_CODE:MaybeOpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _OP_CODE:MaybeOpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists OP:OpCode . ( { false #Equals ( _STATIC_CELL:Bool andBool #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) ) }
#And ( { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 }
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) }
#And { _OP_CODE:MaybeOpCode #Equals OP:OpCode } ) ) ) )
#And ( #Not ( #Exists OP:OpCode . ( { false #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 }
#And ( { false #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) }
#And ( { true #Equals #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) }
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And { _STATIC_CELL:Bool #Equals true } ) ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _OP_CODE:MaybeOpCode #Equals GT }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _OP_CODE:MaybeOpCode #Equals LT }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _OP_CODE:MaybeOpCode #Equals ADD }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _OP_CODE:MaybeOpCode #Equals AND }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _OP_CODE:MaybeOpCode #Equals SUB }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _OP_CODE:MaybeOpCode #Equals SWAP ( N:Int ) }
#And { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <output>
          b""
        </output>
        <statusCode>
          EVMC_SUCCESS
        </statusCode>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { _OP_CODE:MaybeOpCode #Equals .NoOpCode } )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      #exec [ OP:OpCode ]
      ~> #pc [ OP:OpCode ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( ( W2:Int modInt pow160 ) : _WS:WordStack )
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals isAddr1Op ( OP:OpCode ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( OP:OpCode , ( W2:Int : _WS:WordStack ) ) ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 1 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WS:WordStack , 1 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WS:WordStack , 1 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals ( W1:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WS:WordStack , 1 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WS:WordStack , 1 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And #Not ( ( { _WS:WordStack #Equals WS:WordStack }
#And ( { W0:Int #Equals W2:Int }
#And #Exists N:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      #exec [ OP:OpCode ]
      ~> #pc [ OP:OpCode ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            ( _W0:Int : ( ( W2:Int modInt pow160 ) : _WS:WordStack ) )
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals isAddr2Op ( OP:OpCode ) }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( _W0:Int : ( W2:Int : _WS:WordStack ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WS:WordStack , 2 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( OP:OpCode , ( _W0:Int : ( W2:Int : _WS:WordStack ) ) ) ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WS:WordStack , 2 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WS:WordStack , 2 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WS:WordStack , 2 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals WS:WordStack }
#And ( { OP:OpCode #Equals GT }
#And { W1:Int #Equals W2:Int } ) ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals WS:WordStack }
#And ( { OP:OpCode #Equals LT }
#And { W1:Int #Equals W2:Int } ) ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals WS:WordStack }
#And ( { OP:OpCode #Equals ADD }
#And { W1:Int #Equals W2:Int } ) ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals WS:WordStack }
#And ( { OP:OpCode #Equals AND }
#And { W1:Int #Equals W2:Int } ) ) ) ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WS:WordStack #Equals WS:WordStack }
#And ( { OP:OpCode #Equals SUB }
#And { W1:Int #Equals W2:Int } ) ) ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WS:WordStack , 2 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WS:WordStack , 2 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And #Not ( ( { _W0:Int #Equals W0:Int }
#And ( { WS:WordStack #Equals ( W2:Int : _WS:WordStack ) }
#And #Exists N:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      #exec [ OP:OpCode ]
      ~> #pc [ OP:OpCode ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals ( notBool isAddr1Op ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool isAddr2Op ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals GT }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals LT }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals ADD }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals AND }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals SUB }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And #Not ( ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And #Exists N:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      #addr [ OP:OpCode ]
      ~> #exec [ OP:OpCode ]
      ~> #pc [ OP:OpCode ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            _STATIC_CELL:Bool
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals ( notBool ( _STATIC_CELL:Bool andBool #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) ) ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( #Not ( ( { false #Equals isAddr1Op ( OP:OpCode ) }
#And { false #Equals isAddr2Op ( OP:OpCode ) } ) )
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( #Exists _WS:WordStack . #Exists W2:Int . ( { true #Equals isAddr1Op ( OP:OpCode ) }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : _WS:WordStack ) } ) )
#And ( #Not ( #Exists _W0:Int . #Exists _WS:WordStack . #Exists W2:Int . ( { true #Equals isAddr2Op ( OP:OpCode ) }
#And { _WORDSTACK_CELL:WordStack #Equals ( _W0:Int : ( W2:Int : _WS:WordStack ) ) } ) )
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals GT }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals LT }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals ADD }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals AND }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And ( #Not ( ( { OP:OpCode #Equals SUB }
#And #Exists W2:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { _WORDSTACK_CELL:WordStack #Equals ( W2:Int : ( W1:Int : WS:WordStack ) ) } ) ) ) )
#And #Not ( ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And #Exists N:Int . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_UNDERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STATIC_MODE_VIOLATION
        </statusCode>
        <callState>
          <wordStack>
            _WORDSTACK_CELL:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          <static>
            true
          </static>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _STATIC_CELL:Bool }
#And ( { _OP_CODE:MaybeOpCode #Equals OP:OpCode }
#And ( { true #Equals #changesState ( OP:OpCode , _WORDSTACK_CELL:WordStack ) }
#And ( { true #Equals ( notBool #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <Int #stackNeeded ( OP:OpCode ) ) }
#And ( { true #Equals ( notBool ( #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) +Int ( #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) ) ) >Int 1024 ) }
#And ( #Not ( ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gbase < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSHZERO } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals PUSH ( N:Int ) } ) ) )
#And ( #Not ( #Exists N:Int . ( { true #Equals #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( _WORDSTACK_CELL:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And { OP:OpCode #Equals DUP ( N:Int ) } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals GT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals LT } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals ADD } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals AND } ) ) ) )
#And ( #Not ( #Exists W0:Int . #Exists W1:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : ( W1:Int : WS:WordStack ) ) }
#And { OP:OpCode #Equals SUB } ) ) ) )
#And #Not ( #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . ( { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 0 ) }
#And ( { true #Equals #if _USEGAS_CELL:Bool #then Gverylow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas #else true #fi }
#And ( { _WORDSTACK_CELL:WordStack #Equals ( W0:Int : WS:WordStack ) }
#And { OP:OpCode #Equals SWAP ( N:Int ) } ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )




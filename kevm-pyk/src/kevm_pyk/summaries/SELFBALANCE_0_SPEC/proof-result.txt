Proof SELFBALANCE_0_SPEC Failed

┌─ 1 (root, split, init)
│   k: #next [ SELFBALANCE ] ~> _K_CELL:K
│   pc: _PC_CELL:Int
│   callDepth: _CALLDEPTH_CELL:Int
│   statusCode: _STATUSCODE_CELL:StatusCode
┃
┃ (branch)
┣━━┓ subst: .Subst
┃  ┃ constraint:
┃  ┃     1023 <Int #sizeWordStack ( _WS:WordStack , 0 )
┃  │
┃  ├─ 3
┃  │   k: #next [ SELFBALANCE ] ~> _K_CELL:K
┃  │   pc: _PC_CELL:Int
┃  │   callDepth: _CALLDEPTH_CELL:Int
┃  │   statusCode: _STATUSCODE_CELL:StatusCode
┃  │
┃  │  (2 steps)
┃  └─ 8 (leaf, terminal)
┃      k: #halt ~> _K_CELL:K
┃      pc: _PC_CELL:Int
┃      callDepth: _CALLDEPTH_CELL:Int
┃      statusCode: EVMC_STACK_OVERFLOW
┃
┗━━┓ subst: .Subst
   ┃ constraint:
   ┃     ( notBool #sizeWordStack ( _WS:WordStack , 0 ) <Int 0 )
   ┃     ( notBool 1023 <Int #sizeWordStack ( _WS:WordStack , 0 ) )
   │
   ├─ 4
   │   k: #next [ SELFBALANCE ] ~> _K_CELL:K
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   │
   │  (3 steps)
   ├─ 5 (split)
   │   k: #gas [ SELFBALANCE , SELFBALANCE ] ~> SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_C ...
   │   pc: _PC_CELL:Int
   │   callDepth: _CALLDEPTH_CELL:Int
   │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃
   ┃ (branch)
   ┣━━┓ subst: .Subst
   ┃  ┃ constraint:
   ┃  ┃     _USEGAS_CELL:Bool
   ┃  │
   ┃  ├─ 6
   ┃  │   k: #gas [ SELFBALANCE , SELFBALANCE ] ~> SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_C ...
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  │
   ┃  │  (4 steps)
   ┃  ├─ 12 (split)
   ┃  │   k: Glow < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ SELFBALANCE , SELFBA ...
   ┃  │   pc: _PC_CELL:Int
   ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┃ (branch)
   ┃  ┣━━┓ subst: .Subst
   ┃  ┃  ┃ constraint:
   ┃  ┃  ┃     Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas
   ┃  ┃  │
   ┃  ┃  ├─ 13
   ┃  ┃  │   k: Glow < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ SELFBALANCE , SELFBA ...
   ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  │
   ┃  ┃  │  (2 steps)
   ┃  ┃  ├─ 17
   ┃  ┃  │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃  │   pc: _PC_CELL:Int
   ┃  ┃  │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┃ (1 step)
   ┃  ┃  ┣━━┓
   ┃  ┃  ┃  │
   ┃  ┃  ┃  └─ 18 (leaf, pending)
   ┃  ┃  ┃      k: BAL:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃  ┃      pc: _PC_CELL:Int
   ┃  ┃  ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃  ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃  ┃
   ┃  ┃  ┗━━┓
   ┃  ┃     │
   ┃  ┃     ├─ 19
   ┃  ┃     │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃     │   pc: _PC_CELL:Int
   ┃  ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃     ┃
   ┃  ┃     ┃ (1 step)
   ┃  ┃     ┣━━┓
   ┃  ┃     ┃  │
   ┃  ┃     ┃  └─ 22 (leaf, pending)
   ┃  ┃     ┃      k: BAL0:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃     ┃      pc: _PC_CELL:Int
   ┃  ┃     ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃     ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃     ┃
   ┃  ┃     ┗━━┓
   ┃  ┃        │
   ┃  ┃        ├─ 23
   ┃  ┃        │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃        │   pc: _PC_CELL:Int
   ┃  ┃        │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃        │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃        ┃
   ┃  ┃        ┃ (1 step)
   ┃  ┃        ┣━━┓
   ┃  ┃        ┃  │
   ┃  ┃        ┃  └─ 27 (leaf, pending)
   ┃  ┃        ┃      k: BAL1:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃        ┃      pc: _PC_CELL:Int
   ┃  ┃        ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃        ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃        ┃
   ┃  ┃        ┗━━┓
   ┃  ┃           │
   ┃  ┃           ├─ 28
   ┃  ┃           │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃           │   pc: _PC_CELL:Int
   ┃  ┃           │   callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃           │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃           ┃
   ┃  ┃           ┃ (1 step)
   ┃  ┃           ┣━━┓
   ┃  ┃           ┃  │
   ┃  ┃           ┃  └─ 31 (leaf, pending)
   ┃  ┃           ┃      k: BAL2:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃           ┃      pc: _PC_CELL:Int
   ┃  ┃           ┃      callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃           ┃      statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃           ┃
   ┃  ┃           ┗━━┓
   ┃  ┃              │
   ┃  ┃              └─ 32 (leaf, pending)
   ┃  ┃                  k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
   ┃  ┃                  pc: _PC_CELL:Int
   ┃  ┃                  callDepth: _CALLDEPTH_CELL:Int
   ┃  ┃                  statusCode: _STATUSCODE_CELL:StatusCode
   ┃  ┃
   ┃  ┗━━┓ subst: .Subst
   ┃     ┃ constraint:
   ┃     ┃     _GAS_CELL:Gas <Gas Glow < _SCHEDULE_CELL:Schedule >
   ┃     │
   ┃     ├─ 14
   ┃     │   k: Glow < _SCHEDULE_CELL:Schedule > ~> #deductGas ~> #access [ SELFBALANCE , SELFBA ...
   ┃     │   pc: _PC_CELL:Int
   ┃     │   callDepth: _CALLDEPTH_CELL:Int
   ┃     │   statusCode: _STATUSCODE_CELL:StatusCode
   ┃     │
   ┃     │  (5 steps)
   ┃     └─ 26 (leaf, terminal)
   ┃         k: #halt ~> _K_CELL:K
   ┃         pc: _PC_CELL:Int
   ┃         callDepth: _CALLDEPTH_CELL:Int
   ┃         statusCode: EVMC_OUT_OF_GAS
   ┃
   ┗━━┓ subst: .Subst
      ┃ constraint:
      ┃     ( notBool _USEGAS_CELL:Bool )
      │
      ├─ 7
      │   k: #gas [ SELFBALANCE , SELFBALANCE ] ~> SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_C ...
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      │
      │  (1 step)
      ├─ 9
      │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
      │   pc: _PC_CELL:Int
      │   callDepth: _CALLDEPTH_CELL:Int
      │   statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┃ (1 step)
      ┣━━┓
      ┃  │
      ┃  └─ 10 (leaf, pending)
      ┃      k: BAL:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
      ┃      pc: _PC_CELL:Int
      ┃      callDepth: _CALLDEPTH_CELL:Int
      ┃      statusCode: _STATUSCODE_CELL:StatusCode
      ┃
      ┗━━┓
         │
         ├─ 11
         │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
         │   pc: _PC_CELL:Int
         │   callDepth: _CALLDEPTH_CELL:Int
         │   statusCode: _STATUSCODE_CELL:StatusCode
         ┃
         ┃ (1 step)
         ┣━━┓
         ┃  │
         ┃  └─ 15 (leaf, pending)
         ┃      k: BAL0:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
         ┃      pc: _PC_CELL:Int
         ┃      callDepth: _CALLDEPTH_CELL:Int
         ┃      statusCode: _STATUSCODE_CELL:StatusCode
         ┃
         ┗━━┓
            │
            ├─ 16
            │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
            │   pc: _PC_CELL:Int
            │   callDepth: _CALLDEPTH_CELL:Int
            │   statusCode: _STATUSCODE_CELL:StatusCode
            ┃
            ┃ (1 step)
            ┣━━┓
            ┃  │
            ┃  └─ 20 (leaf, pending)
            ┃      k: BAL1:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
            ┃      pc: _PC_CELL:Int
            ┃      callDepth: _CALLDEPTH_CELL:Int
            ┃      statusCode: _STATUSCODE_CELL:StatusCode
            ┃
            ┗━━┓
               │
               ├─ 21
               │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
               │   pc: _PC_CELL:Int
               │   callDepth: _CALLDEPTH_CELL:Int
               │   statusCode: _STATUSCODE_CELL:StatusCode
               ┃
               ┃ (1 step)
               ┣━━┓
               ┃  │
               ┃  └─ 24 (leaf, pending)
               ┃      k: BAL2:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
               ┃      pc: _PC_CELL:Int
               ┃      callDepth: _CALLDEPTH_CELL:Int
               ┃      statusCode: _STATUSCODE_CELL:StatusCode
               ┃
               ┗━━┓
                  │
                  ├─ 25
                  │   k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
                  │   pc: _PC_CELL:Int
                  │   callDepth: _CALLDEPTH_CELL:Int
                  │   statusCode: _STATUSCODE_CELL:StatusCode
                  ┃
                  ┃ (1 step)
                  ┣━━┓
                  ┃  │
                  ┃  └─ 29 (leaf, pending)
                  ┃      k: BAL3:Int ~> #push ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
                  ┃      pc: _PC_CELL:Int
                  ┃      callDepth: _CALLDEPTH_CELL:Int
                  ┃      statusCode: _STATUSCODE_CELL:StatusCode
                  ┃
                  ┗━━┓
                     │
                     └─ 30 (leaf, pending)
                         k: SELFBALANCE ~> #pc [ SELFBALANCE ] ~> _K_CELL:K
                         pc: _PC_CELL:Int
                         callDepth: _CALLDEPTH_CELL:Int
                         statusCode: _STATUSCODE_CELL:StatusCode


┌─ 2 (root, leaf, target)
│   k: _K_CELL:K
│   pc: ?_FINAL_PC_CELL:Int
│   callDepth: ?_FINAL_CALLDEPTH_CELL:Int
│   statusCode: ?_FINAL_STATUSCODE_CELL:StatusCode


Node 1:

<generatedTop>
  <kevm>
    <k>
      #next [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    ...
  </kevm>
  ...
</generatedTop>



Node 2:

...



Node 3:

( <generatedTop>
  <kevm>
    <k>
      #next [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals 1023 <Int #sizeWordStack ( _WS:WordStack , 0 ) } )



Node 4:

( <generatedTop>
  <kevm>
    <k>
      #next [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { false #Equals #sizeWordStack ( _WS:WordStack , 0 ) <Int 0 }
#And { false #Equals 1023 <Int #sizeWordStack ( _WS:WordStack , 0 ) } ) )



Node 5:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFBALANCE , SELFBALANCE ]
      ~> SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 } )



Node 6:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFBALANCE , SELFBALANCE ]
      ~> SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals true }
#And { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 } ) )



Node 7:

( <generatedTop>
  <kevm>
    <k>
      #gas [ SELFBALANCE , SELFBALANCE ]
      ~> SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      _USEGAS_CELL:Bool
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _USEGAS_CELL:Bool #Equals false }
#And { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 } ) )



Node 8:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_STACK_OVERFLOW
        </statusCode>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And { true #Equals 1023 <Int #sizeWordStack ( _WS:WordStack , 0 ) } )



Node 9:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 } ) )



Node 10:

( <generatedTop>
  <kevm>
    <k>
      BAL:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen23:CodeCell
            _Gen24:StorageCell
            _Gen25:OrigStorageCell
            _Gen26:TransientStorageCell
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) )



Node 11:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) )



Node 12:

( <generatedTop>
  <kevm>
    <k>
      Glow < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ SELFBALANCE , SELFBALANCE ]
      ~> SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 } ) )



Node 13:

( <generatedTop>
  <kevm>
    <k>
      Glow < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ SELFBALANCE , SELFBALANCE ]
      ~> SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas } ) ) )



Node 14:

( <generatedTop>
  <kevm>
    <k>
      Glow < _SCHEDULE_CELL:Schedule >
      ~> #deductGas
      ~> #access [ SELFBALANCE , SELFBALANCE ]
      ~> SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals _GAS_CELL:Gas <Gas Glow < _SCHEDULE_CELL:Schedule > } ) ) )



Node 15:

( <generatedTop>
  <kevm>
    <k>
      BAL0:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) )



Node 16:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen28:CodeCell . #Exists _Gen29:StorageCell . #Exists _Gen30:OrigStorageCell . #Exists _Gen31:TransientStorageCell . #Exists _Gen32:NonceCell . #Exists ACCT0:Int . #Exists BAL0:Int . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT0:Int } ) ) ) ) ) ) )



Node 17:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas } ) ) )



Node 18:

( <generatedTop>
  <kevm>
    <k>
      BAL:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT:Int
            </acctID>
            <balance>
              BAL:Int
            </balance>
            _Gen23:CodeCell
            _Gen24:StorageCell
            _Gen25:OrigStorageCell
            _Gen26:TransientStorageCell
            _Gen27:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT:Int }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) )



Node 19:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT:Int } ) ) ) ) ) ) )



Node 20:

( <generatedTop>
  <kevm>
    <k>
      BAL1:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT1:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT1:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT1:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT0:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) )



Node 21:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen33:CodeCell . #Exists _Gen34:StorageCell . #Exists _Gen35:OrigStorageCell . #Exists _Gen36:TransientStorageCell . #Exists _Gen37:NonceCell . #Exists ACCT1:Int . #Exists BAL1:Int . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT1:Int } ) ) ) ) ) ) ) )



Node 22:

( <generatedTop>
  <kevm>
    <k>
      BAL0:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT0:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT0:Int
            </acctID>
            <balance>
              BAL0:Int
            </balance>
            _Gen28:CodeCell
            _Gen29:StorageCell
            _Gen30:OrigStorageCell
            _Gen31:TransientStorageCell
            _Gen32:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT0:Int }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And #Not ( ( { ACCT:Int #Equals ACCT0:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) )



Node 23:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen28:CodeCell . #Exists _Gen29:StorageCell . #Exists _Gen30:OrigStorageCell . #Exists _Gen31:TransientStorageCell . #Exists _Gen32:NonceCell . #Exists ACCT0:Int . #Exists BAL0:Int . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  <balance>
    BAL0:Int
  </balance>
  _Gen28:CodeCell
  _Gen29:StorageCell
  _Gen30:OrigStorageCell
  _Gen31:TransientStorageCell
  _Gen32:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT0:Int } ) ) ) ) ) ) ) )



Node 24:

( <generatedTop>
  <kevm>
    <k>
      BAL2:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT2:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT2:Int
            </acctID>
            <balance>
              BAL2:Int
            </balance>
            _Gen38:CodeCell
            _Gen39:StorageCell
            _Gen40:OrigStorageCell
            _Gen41:TransientStorageCell
            _Gen42:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT2:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT0:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT1:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) )



Node 25:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT1:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen38:CodeCell . #Exists _Gen39:StorageCell . #Exists _Gen40:OrigStorageCell . #Exists _Gen41:TransientStorageCell . #Exists _Gen42:NonceCell . #Exists ACCT2:Int . #Exists BAL2:Int . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT2:Int } ) ) ) ) ) ) ) ) )



Node 26:

( <generatedTop>
  <kevm>
    <k>
      #halt
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <statusCode>
          EVMC_OUT_OF_GAS
        </statusCode>
        <callState>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas
          </gas>
          ...
        </callState>
        ...
      </evm>
      ...
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And { true #Equals _GAS_CELL:Gas <Gas Glow < _SCHEDULE_CELL:Schedule > } ) ) )



Node 27:

( <generatedTop>
  <kevm>
    <k>
      BAL1:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT1:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT1:Int
            </acctID>
            <balance>
              BAL1:Int
            </balance>
            _Gen33:CodeCell
            _Gen34:StorageCell
            _Gen35:OrigStorageCell
            _Gen36:TransientStorageCell
            _Gen37:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT1:Int }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT0:Int #Equals ACCT1:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) )



Node 28:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen33:CodeCell . #Exists _Gen34:StorageCell . #Exists _Gen35:OrigStorageCell . #Exists _Gen36:TransientStorageCell . #Exists _Gen37:NonceCell . #Exists ACCT1:Int . #Exists BAL1:Int . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  <balance>
    BAL1:Int
  </balance>
  _Gen33:CodeCell
  _Gen34:StorageCell
  _Gen35:OrigStorageCell
  _Gen36:TransientStorageCell
  _Gen37:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT1:Int } ) ) ) ) ) ) ) ) )



Node 29:

( <generatedTop>
  <kevm>
    <k>
      BAL3:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT3:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT3:Int
            </acctID>
            <balance>
              BAL3:Int
            </balance>
            _Gen43:CodeCell
            _Gen44:StorageCell
            _Gen45:OrigStorageCell
            _Gen46:TransientStorageCell
            _Gen47:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { _ID_CELL:Account #Equals ACCT3:Int }
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT3:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  <balance>
    BAL3:Int
  </balance>
  _Gen43:CodeCell
  _Gen44:StorageCell
  _Gen45:OrigStorageCell
  _Gen46:TransientStorageCell
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  <balance>
    BAL3:Int
  </balance>
  _Gen43:CodeCell
  _Gen44:StorageCell
  _Gen45:OrigStorageCell
  _Gen46:TransientStorageCell
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT0:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  <balance>
    BAL3:Int
  </balance>
  _Gen43:CodeCell
  _Gen44:StorageCell
  _Gen45:OrigStorageCell
  _Gen46:TransientStorageCell
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT1:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  <balance>
    BAL3:Int
  </balance>
  _Gen43:CodeCell
  _Gen44:StorageCell
  _Gen45:OrigStorageCell
  _Gen46:TransientStorageCell
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT2:Int #Equals ACCT3:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  <balance>
    BAL3:Int
  </balance>
  _Gen43:CodeCell
  _Gen44:StorageCell
  _Gen45:OrigStorageCell
  _Gen46:TransientStorageCell
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 30:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <useGas>
      false
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals ( notBool _USEGAS_CELL:Bool ) }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT1:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT2:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen43:CodeCell . #Exists _Gen44:StorageCell . #Exists _Gen45:OrigStorageCell . #Exists _Gen46:TransientStorageCell . #Exists _Gen47:NonceCell . #Exists ACCT3:Int . #Exists BAL3:Int . ( { false #Equals <acctID>
  ACCT3:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT3:Int
  </acctID>
  <balance>
    BAL3:Int
  </balance>
  _Gen43:CodeCell
  _Gen44:StorageCell
  _Gen45:OrigStorageCell
  _Gen46:TransientStorageCell
  _Gen47:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT3:Int } ) ) ) ) ) ) ) ) ) )



Node 31:

( <generatedTop>
  <kevm>
    <k>
      BAL2:Int
      ~> #push
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            ACCT2:Int
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          ( <account>
            <acctID>
              ACCT2:Int
            </acctID>
            <balance>
              BAL2:Int
            </balance>
            _Gen38:CodeCell
            _Gen39:StorageCell
            _Gen40:OrigStorageCell
            _Gen41:TransientStorageCell
            _Gen42:NonceCell
          </account>
          _DotVar7:AccountCellMap )
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { _ID_CELL:Account #Equals ACCT2:Int }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals ( notBool <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) ) }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And ( #Not ( ( { ACCT:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { ACCT0:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( ( { ACCT1:Int #Equals ACCT2:Int }
#And #Exists _DotVar8:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar8:AccountCellMap ) #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) } ) ) ) ) ) ) ) ) ) ) ) )



Node 32:

( <generatedTop>
  <kevm>
    <k>
      SELFBALANCE
      ~> #pc [ SELFBALANCE ]
      ~> _K_CELL:K
    </k>
    <schedule>
      _SCHEDULE_CELL:Schedule
    </schedule>
    <useGas>
      true
    </useGas>
    <ethereum>
      <evm>
        <callState>
          <id>
            _ID_CELL:Account
          </id>
          <wordStack>
            _WS:WordStack
          </wordStack>
          <gas>
            _GAS_CELL:Gas -Gas Glow < _SCHEDULE_CELL:Schedule >
          </gas>
          ...
        </callState>
        ...
      </evm>
      <network>
        <accounts>
          _ACCOUNTS_CELL:AccountCellMap
        </accounts>
        ...
      </network>
    </ethereum>
    ...
  </kevm>
  ...
</generatedTop>
#And ( { true #Equals _USEGAS_CELL:Bool }
#And ( { true #Equals #sizeWordStack ( _WS:WordStack , 0 ) <=Int 1023 }
#And ( { true #Equals Glow < _SCHEDULE_CELL:Schedule > <=Gas _GAS_CELL:Gas }
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT0:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT0:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT0:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And ( #Not ( ( { _ID_CELL:Account #Equals ACCT1:Int }
#And #Exists _DotVar7:AccountCellMap . ( { false #Equals <acctID>
  ACCT1:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT1:Int
  </acctID>
  ...
</account>
_DotVar7:AccountCellMap ) } ) ) )
#And #Not ( #Exists _DotVar7:AccountCellMap . #Exists _Gen38:CodeCell . #Exists _Gen39:StorageCell . #Exists _Gen40:OrigStorageCell . #Exists _Gen41:TransientStorageCell . #Exists _Gen42:NonceCell . #Exists ACCT2:Int . #Exists BAL2:Int . ( { false #Equals <acctID>
  ACCT2:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And ( { _ACCOUNTS_CELL:AccountCellMap #Equals ( <account>
  <acctID>
    ACCT2:Int
  </acctID>
  <balance>
    BAL2:Int
  </balance>
  _Gen38:CodeCell
  _Gen39:StorageCell
  _Gen40:OrigStorageCell
  _Gen41:TransientStorageCell
  _Gen42:NonceCell
</account>
_DotVar7:AccountCellMap ) }
#And { _ID_CELL:Account #Equals ACCT2:Int } ) ) ) ) ) ) ) ) ) )




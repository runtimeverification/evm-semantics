INFO 2025-01-15 15:01:32,048 kevm_pyk.summarizer - Number of opcodes: 84
INFO 2025-01-15 15:01:32,049 kevm_pyk.summarizer - Number of passed opcodes: 54
INFO 2025-01-15 15:01:32,049 kevm_pyk.summarizer - Number of todo opcodes: 30
INFO 2025-01-15 15:01:32,049 kevm_pyk.summarizer - Todo opcodes: ['ORIGIN', 'CALLER', 'EXTCODESIZE', 'EXTCODECOPY', 'RETURNDATASIZE', 'EXTCODEHASH', 'COINBASE', 'SELFBALANCE', 'POP', 'MLOAD', 'MSTORE8', 'SLOAD', 'SSTORE', 'JUMP', 'JUMPI', 'MSIZE', 'TLOAD', 'TSTORE', 'PUSH', 'LOG', 'CREATE', 'CALL', 'CALLCODE', 'RETURN', 'DELEGATECALL', 'CREATE2', 'STATICCALL', 'REVERT', 'INVALID', 'SELFDESTRUCT']
INFO 2025-01-15 15:01:32,049 kevm_pyk.__main__ - summarizing ['ORIGIN', 'CALLER', 'EXTCODESIZE', 'EXTCODECOPY', 'RETURNDATASIZE', 'EXTCODEHASH', 'COINBASE', 'SELFBALANCE', 'POP', 'MLOAD', 'MSTORE8', 'SLOAD', 'SSTORE', 'JUMP', 'JUMPI', 'MSIZE', 'TLOAD', 'TSTORE', 'PUSH', 'LOG', 'CREATE', 'CALL', 'CALLCODE', 'RETURN', 'DELEGATECALL', 'CREATE2', 'STATICCALL', 'REVERT', 'INVALID', 'SELFDESTRUCT']
INFO 2025-01-15 15:01:32,049 pyk.kast.outer - Loading JSON definition: /home/zhaoji/.cache/kdist-9ffc41e/evm-semantics/haskell/compiled.json
INFO 2025-01-15 15:01:32,282 pyk.kast.outer - Converting JSON definition to Kast: /home/zhaoji/.cache/kdist-9ffc41e/evm-semantics/haskell/compiled.json
INFO 2025-01-15 15:01:33,104 kevm_pyk.summarizer - Setting the type of `CALLER_CELL` to `Int` for CALLER
INFO 2025-01-15 15:01:33,105 pyk.kore.rpc - Starting KoreServer: kore-rpc-booster /home/zhaoji/.cache/kdist-9ffc41e/evm-semantics/haskell/definition.kore --module EDSL --server-port 0 --llvm-backend-library /home/zhaoji/.cache/kdist-9ffc41e/evm-semantics/haskell/llvm-library/interpreter.so --interim-simplification 25
INFO 2025-01-15 15:01:33,215 pyk.kore.rpc - [PID=2642376][stde] [proxy] Loading definition from /home/zhaoji/.cache/kdist-9ffc41e/evm-semantics/haskell/definition.kore, main module "EDSL"
INFO 2025-01-15 15:01:34,873 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Reading the input file TimeSpec {sec = 0, nsec = 31687306}
INFO 2025-01-15 15:01:35,874 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Parsing the file TimeSpec {sec = 0, nsec = 110}
INFO 2025-01-15 15:01:38,361 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Verifying the definition TimeSpec {sec = 0, nsec = 230}
INFO 2025-01-15 15:01:40,035 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Executing TimeSpec {sec = 1, nsec = 573060489}
INFO 2025-01-15 15:01:41,043 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Reading the input file TimeSpec {sec = 0, nsec = 32878843}
INFO 2025-01-15 15:01:42,044 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Parsing the file TimeSpec {sec = 0, nsec = 200}
INFO 2025-01-15 15:01:43,969 pyk.kore.rpc - [PID=2642376][stde] [kore][info] Verifying the definition TimeSpec {sec = 0, nsec = 230}
INFO 2025-01-15 15:01:43,969 pyk.kore.rpc - [PID=2642376][stde] [proxy] Starting RPC server
INFO 2025-01-15 15:01:43,987 pyk.kore.rpc - KoreServer started: 0.0.0.0:41429, pid=2642376
INFO 2025-01-15 15:01:43,988 pyk.kore.rpc - Connecting to host: localhost:41429
INFO 2025-01-15 15:01:43,988 pyk.kore.rpc - Connected to host: localhost:41429
INFO 2025-01-15 15:01:43,988 kevm_pyk.utils - Computing definedness constraint for initial node: CALLER_0_SPEC
INFO 2025-01-15 15:01:44,003 pyk.kore.rpc - Sending request to localhost:41429: 139979032062096-001 - simplify
INFO 2025-01-15 15:01:44,970 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032062096-001
INFO 2025-01-15 15:01:45,000 pyk.kore.rpc - Received response from localhost:41429: 139979032062096-001 - simplify
INFO 2025-01-15 15:01:45,007 pyk.kore.rpc - Sending request to localhost:41429: 139979032062096-002 - simplify
INFO 2025-01-15 15:01:45,971 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032062096-002
INFO 2025-01-15 15:01:46,055 pyk.kore.rpc - Received response from localhost:41429: 139979032062096-002 - simplify
INFO 2025-01-15 15:01:46,055 kevm_pyk.utils - Simplifying initial and target node: CALLER_0_SPEC
INFO 2025-01-15 15:01:46,060 pyk.kore.rpc - Sending request to localhost:41429: 139979032062096-003 - simplify
INFO 2025-01-15 15:01:46,985 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032062096-003
INFO 2025-01-15 15:01:47,232 pyk.kore.rpc - Received response from localhost:41429: 139979032062096-003 - simplify
INFO 2025-01-15 15:01:47,238 pyk.kore.rpc - Sending request to localhost:41429: 139979032062096-004 - simplify
INFO 2025-01-15 15:01:47,986 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032062096-004
INFO 2025-01-15 15:01:48,263 pyk.kore.rpc - Received response from localhost:41429: 139979032062096-004 - simplify
INFO 2025-01-15 15:01:48,266 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:01:48,268 pyk.kore.rpc - Connecting to host: localhost:41429
INFO 2025-01-15 15:01:48,268 pyk.kore.rpc - Connected to host: localhost:41429
INFO 2025-01-15 15:01:48,268 pyk.proof.proof - [ZJH] prover type: <class 'pyk.proof.reachability.APRProver'>
INFO 2025-01-15 15:01:48,268 pyk.proof.reachability - [ZJH] init proof
INFO 2025-01-15 15:01:48,272 pyk.kore.rpc - Sending request to localhost:41429: 139979032409232-001 - add-module
INFO 2025-01-15 15:01:48,987 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032409232-001
INFO 2025-01-15 15:01:49,541 pyk.kore.rpc - Received response from localhost:41429: 139979032409232-001 - add-module
INFO 2025-01-15 15:01:49,557 pyk.kore.rpc - Sending request to localhost:41429: 139979032409232-002 - add-module
INFO 2025-01-15 15:01:49,989 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032409232-002
INFO 2025-01-15 15:01:51,390 pyk.kore.rpc - Received response from localhost:41429: 139979032409232-002 - add-module
INFO 2025-01-15 15:01:51,390 pyk.proof.reachability - [ZJH] pending: [1]
INFO 2025-01-15 15:01:51,390 pyk.proof.reachability - [ZJH] node_id: 1
INFO 2025-01-15 15:01:51,390 pyk.proof.reachability - [ZJH] is_terminal: False
INFO 2025-01-15 15:01:51,390 pyk.proof.reachability - [ZJH] node_id: 2
INFO 2025-01-15 15:01:51,391 pyk.proof.reachability - [ZJH] is_terminal: False
INFO 2025-01-15 15:01:51,391 pyk.proof.reachability - [ZJH] pending: [1]
INFO 2025-01-15 15:01:51,391 pyk.proof.proof - [ZJH] proof initialized
INFO 2025-01-15 15:01:51,391 pyk.proof.proof - [ZJH] pending: [1]
INFO 2025-01-15 15:01:51,391 pyk.proof.reachability - Before appending step: 1
INFO 2025-01-15 15:01:51,393 pyk.kore.rpc - Connecting to host: localhost:41429
INFO 2025-01-15 15:01:51,393 pyk.proof.proof - Submitted steps for proof: CALLER_0_SPEC
INFO 2025-01-15 15:01:51,393 pyk.kore.rpc - Connected to host: localhost:41429
INFO 2025-01-15 15:01:51,434 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-001 - implies
INFO 2025-01-15 15:01:51,439 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-001
INFO 2025-01-15 15:01:52,425 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-001 - implies
INFO 2025-01-15 15:01:52,431 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:01:52,434 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:01:52,435 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-002 - execute
INFO 2025-01-15 15:01:52,440 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-002
INFO 2025-01-15 15:01:57,668 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-002 - execute
INFO 2025-01-15 15:01:57,669 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:01:57,669 pyk.kore.rpc - [zjh] [kore-client] logs: []
INFO 2025-01-15 15:01:57,692 pyk.kcfg.kcfg - Extending current KCFG with the following: 2 branches: 1 --> [3, 4]: ['1023 <Int #sizeWordStack ( WS:WordStack , 0 )', 'notBool #sizeWordStack ( WS:WordStack , 0 ) <Int 0 andBool notBool 1023 <Int #sizeWordStack ( WS:WordStack , 0 )']
INFO 2025-01-15 15:01:57,692 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:01:57,694 pyk.proof.reachability - Before appending step: 3
INFO 2025-01-15 15:01:57,694 pyk.proof.reachability - Before appending step: 4
INFO 2025-01-15 15:01:57,711 pyk.kore.rpc - Connecting to host: localhost:41429
INFO 2025-01-15 15:01:57,723 pyk.kore.rpc - Connected to host: localhost:41429
INFO 2025-01-15 15:01:57,775 pyk.kore.rpc - Sending request to localhost:41429: 139979032052368-001 - implies
INFO 2025-01-15 15:01:57,782 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-003 - implies
INFO 2025-01-15 15:01:57,789 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032052368-001
INFO 2025-01-15 15:01:58,807 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-003
INFO 2025-01-15 15:01:59,439 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-003 - implies
INFO 2025-01-15 15:01:59,447 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:01:59,447 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:01:59,447 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-004 - execute
INFO 2025-01-15 15:01:59,537 pyk.kore.rpc - Received response from localhost:41429: 139979032052368-001 - implies
INFO 2025-01-15 15:01:59,545 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:01:59,545 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:01:59,545 pyk.kore.rpc - Sending request to localhost:41429: 139979032052368-002 - execute
INFO 2025-01-15 15:01:59,808 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-004
INFO 2025-01-15 15:01:59,808 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032052368-002
INFO 2025-01-15 15:02:07,689 pyk.kore.rpc - Received response from localhost:41429: 139979032052368-002 - execute
INFO 2025-01-15 15:02:07,691 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:02:07,691 pyk.kore.rpc - [zjh] [kore-client] logs: [{'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': 'a49bbf5c4b82ee9c477b266571ac6462951ccd1a83f52cbf657b2c60368c2c04'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': 'f445bdd373dac8403ad00559717364f6630b19cbc6e53d3bbd6fa784e4089f0d'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '252afec90cf7fb845ffd258119c187b355a11eed9c39c5e3f4e0be6d6a362cfd'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}]
INFO 2025-01-15 15:02:07,754 pyk.kcfg.kcfg - Extending current KCFG with the following: basic block at depth 3: 4 --> 5
INFO 2025-01-15 15:02:07,754 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:02:07,756 pyk.proof.reachability - Before appending step: 3
INFO 2025-01-15 15:02:07,756 pyk.proof.reachability - Before appending step: 5
INFO 2025-01-15 15:02:07,791 pyk.kore.rpc - Sending request to localhost:41429: 139979032052368-003 - implies
INFO 2025-01-15 15:02:07,800 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032052368-003
INFO 2025-01-15 15:02:09,273 pyk.kore.rpc - Received response from localhost:41429: 139979032052368-003 - implies
INFO 2025-01-15 15:02:09,281 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:02:09,281 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:02:09,281 pyk.kore.rpc - Sending request to localhost:41429: 139979032052368-004 - execute
INFO 2025-01-15 15:02:09,284 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032052368-004
INFO 2025-01-15 15:02:17,631 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-004 - execute
INFO 2025-01-15 15:02:17,634 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:02:17,634 pyk.kore.rpc - [zjh] [kore-client] logs: [{'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '8665f703a5394319f38d43434dc1e720c47c3bb1f60110b33f6cc02fa0ccd58a'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '7c6df1b7a841ef7cce64eaae0c332bb9383a2692d649e88e8ea49fcb7fa5d540'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}]
INFO 2025-01-15 15:02:17,672 pyk.kcfg.explore - [zjh] next_node_logs: ()
INFO 2025-01-15 15:02:17,678 pyk.kcfg.explore - [zjh] rules: []
INFO 2025-01-15 15:02:17,679 pyk.kcfg.explore - [zjh] _log_succ_rewrites: True
INFO 2025-01-15 15:02:17,680 pyk.kcfg.kcfg - Extending current KCFG with the following: basic block at depth 2: 3 --> 6
INFO 2025-01-15 15:02:17,681 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:02:17,682 pyk.proof.reachability - Before appending step: 5
INFO 2025-01-15 15:02:17,682 pyk.proof.reachability - Before appending step: 6
INFO 2025-01-15 15:02:17,686 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:02:17,688 pyk.proof.reachability - Before appending step: 5
INFO 2025-01-15 15:02:17,863 pyk.kore.rpc - Received response from localhost:41429: 139979032052368-004 - execute
INFO 2025-01-15 15:02:17,864 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:02:17,864 pyk.kore.rpc - [zjh] [kore-client] logs: [{'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}]
INFO 2025-01-15 15:02:17,875 pyk.kcfg.kcfg - Extending current KCFG with the following: 2 branches: 5 --> [7, 8]: ['USEGAS_CELL:Bool', 'notBool USEGAS_CELL:Bool']
INFO 2025-01-15 15:02:17,876 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:02:17,878 pyk.proof.reachability - Before appending step: 7
INFO 2025-01-15 15:02:17,878 pyk.proof.reachability - Before appending step: 8
INFO 2025-01-15 15:02:17,923 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-005 - implies
INFO 2025-01-15 15:02:17,952 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-005
INFO 2025-01-15 15:02:17,959 pyk.kore.rpc - Sending request to localhost:41429: 139979032052368-005 - implies
INFO 2025-01-15 15:02:18,950 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032052368-005
INFO 2025-01-15 15:02:19,602 pyk.kore.rpc - Received response from localhost:41429: 139979032052368-005 - implies
INFO 2025-01-15 15:02:19,610 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:02:19,610 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:02:19,610 pyk.kore.rpc - Sending request to localhost:41429: 139979032052368-006 - execute
INFO 2025-01-15 15:02:19,665 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-005 - implies
INFO 2025-01-15 15:02:19,674 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:02:19,674 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:02:19,674 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-006 - execute
INFO 2025-01-15 15:02:19,956 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-006
INFO 2025-01-15 15:02:19,956 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032052368-006
INFO 2025-01-15 15:02:32,990 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-006 - execute
INFO 2025-01-15 15:02:32,991 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:02:32,991 pyk.kore.rpc - [zjh] [kore-client] logs: [{'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'kore-rpc', 'result': {'tag': 'success', 'rule-id': 'add363ff9fa24e9a97a4cad5848a44dce9315dd67365b44dd01db1cc969472f1'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '8b54e9e5fee12981ade4af6b3f4faeef7fe859bf84b18b4f87a416e5ad14b766'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '858e480d252334ee5df36fb446d3a1c0273f543cd8cce906d5480997378b8af8'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '1782674bcdcf07ae7b02b52660d78e41968cd60b3cb66ab28f2133a8477333ad'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'Uncertain about the remainder after applying a rule', 'rule-id': 'a0a224658695b9eeae4eecf43289c46f78c5b34020e5e6ef966eaaf80525eccf'}}]
INFO 2025-01-15 15:02:33,002 pyk.proof.reachability - Caching next step for edge starting from 7
INFO 2025-01-15 15:02:33,005 pyk.kcfg.kcfg - Extending current KCFG with the following: basic block at depth 4: 7 --> 9
INFO 2025-01-15 15:02:33,006 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:02:33,008 pyk.proof.reachability - Before appending step: 8
INFO 2025-01-15 15:02:33,008 pyk.proof.reachability - Before appending step: 9
INFO 2025-01-15 15:02:33,062 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-007 - implies
INFO 2025-01-15 15:02:33,069 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-007
INFO 2025-01-15 15:02:34,171 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-007 - implies
INFO 2025-01-15 15:02:34,174 pyk.proof.reachability - Using cached step for edge 7 --> 9
INFO 2025-01-15 15:02:34,177 pyk.kcfg.kcfg - Extending current KCFG with the following: 2 branches: 9 --> [10, 11]: ['Gbase < SCHEDULE_CELL:Schedule > <=Gas GAS_CELL:Gas', 'GAS_CELL:Gas <Gas Gbase < SCHEDULE_CELL:Schedule >']
INFO 2025-01-15 15:02:34,177 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:02:34,181 pyk.proof.reachability - Before appending step: 8
INFO 2025-01-15 15:02:34,181 pyk.proof.reachability - Before appending step: 10
INFO 2025-01-15 15:02:34,181 pyk.proof.reachability - Before appending step: 11
INFO 2025-01-15 15:02:34,187 pyk.kore.rpc - Connecting to host: localhost:41429
INFO 2025-01-15 15:02:34,204 pyk.kore.rpc - Connected to host: localhost:41429
INFO 2025-01-15 15:02:34,276 pyk.kore.rpc - Sending request to localhost:41429: 139979029632272-001 - implies
INFO 2025-01-15 15:02:34,278 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-008 - implies
INFO 2025-01-15 15:02:34,283 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979029632272-001
INFO 2025-01-15 15:02:35,283 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-008
INFO 2025-01-15 15:02:36,141 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-008 - implies
INFO 2025-01-15 15:02:36,149 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:02:36,150 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:02:36,150 pyk.kore.rpc - Sending request to localhost:41429: 139979032262352-009 - execute
INFO 2025-01-15 15:02:36,284 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979032262352-009
INFO 2025-01-15 15:02:36,341 pyk.kore.rpc - Received response from localhost:41429: 139979029632272-001 - implies
INFO 2025-01-15 15:02:36,355 pyk.kore.rpc - [zjh] [kore-client] log-successful-rewrites: True
INFO 2025-01-15 15:02:36,355 pyk.kore.rpc - [zjh] [kore-client] log-failed-rewrites: True
INFO 2025-01-15 15:02:36,355 pyk.kore.rpc - Sending request to localhost:41429: 139979029632272-002 - execute
INFO 2025-01-15 15:02:37,432 pyk.kore.rpc - [PID=2642376][stde] [proxy] Processing request 139979029632272-002
INFO 2025-01-15 15:03:06,251 pyk.kore.rpc - Received response from localhost:41429: 139979029632272-002 - execute
INFO 2025-01-15 15:03:06,255 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:03:06,255 pyk.kore.rpc - [zjh] [kore-client] logs: [{'tag': 'rewrite', 'origin': 'proxy', 'result': {'tag': 'success', 'rule-id': 'a0a224658695b9eeae4eecf43289c46f78c5b34020e5e6ef966eaaf80525eccf'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '7c6df1b7a841ef7cce64eaae0c332bb9383a2692d649e88e8ea49fcb7fa5d540'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '3d8b3569577237015e49cc215f5fa1a74dc5cdaa9dddea7123dd1215bd3b0435'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '3d8b3569577237015e49cc215f5fa1a74dc5cdaa9dddea7123dd1215bd3b0435'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '3d8b3569577237015e49cc215f5fa1a74dc5cdaa9dddea7123dd1215bd3b0435'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}]
INFO 2025-01-15 15:03:06,540 pyk.kcfg.explore - [zjh] next_node_logs: ()
INFO 2025-01-15 15:03:06,540 pyk.kcfg.explore - [zjh] rules: []
INFO 2025-01-15 15:03:06,540 pyk.kcfg.explore - [zjh] _log_succ_rewrites: True
INFO 2025-01-15 15:03:06,540 pyk.proof.reachability - Caching next step for edge starting from 11
INFO 2025-01-15 15:03:06,543 pyk.kcfg.kcfg - Extending current KCFG with the following: basic block at depth 5: 11 --> 12
INFO 2025-01-15 15:03:06,544 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:03:06,547 pyk.proof.reachability - Before appending step: 8
INFO 2025-01-15 15:03:06,547 pyk.proof.reachability - Before appending step: 10
INFO 2025-01-15 15:03:06,547 pyk.proof.reachability - Before appending step: 12
INFO 2025-01-15 15:03:06,563 pyk.proof.reachability - Wrote proof data for CALLER_0_SPEC: /home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/proofs/CALLER_0_SPEC/proof.json
INFO 2025-01-15 15:03:06,567 pyk.proof.reachability - Before appending step: 8
INFO 2025-01-15 15:03:06,568 pyk.proof.reachability - Before appending step: 10
INFO 2025-01-15 15:03:41,871 pyk.kore.rpc - Received response from localhost:41429: 139979032052368-006 - execute
INFO 2025-01-15 15:12:01,210 pyk.kore.rpc - Received response from localhost:41429: 139979032262352-009 - execute
INFO 2025-01-15 15:12:02,093 pyk.kore.rpc - [zjh] [kore-client] result: dict_keys(['reason', 'depth', 'state', 'next-states', 'logs'])
INFO 2025-01-15 15:12:02,093 pyk.kore.rpc - [zjh] [kore-client] logs: [{'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': 'e80dae2349dc4cf016147f969cff262399d625e3e979474e412b3c14914c4e77'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '09cfd697b5082c31c9858675910694785a13b2ceafcbea2e875941ef2a778df8'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '41938b5c015f59d5cd0b0e7e087eccc8f20e469f6869536bdf89dd04b2c6bbcf'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': 'cf46a1c55ae03d7124b8c4d35be85667c49f90ee5e2aa9e23faa9190b8e37682'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'success', 'rule-id': '27458eb47839269121ea93b912b579bddb9557fccc51e69983d94b2e6ed21335'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}, {'tag': 'rewrite', 'origin': 'booster', 'result': {'tag': 'failure', 'reason': 'No applicable rules found'}}]
INFO 2025-01-15 15:12:04,806 pyk.kcfg.explore - [zjh] next_node_logs: ()
INFO 2025-01-15 15:12:04,806 pyk.kcfg.explore - [zjh] rules: []
INFO 2025-01-15 15:12:04,806 pyk.kcfg.explore - [zjh] _log_succ_rewrites: True
INFO 2025-01-15 15:12:04,808 pyk.proof.reachability - Caching next step for edge starting from 10
ERROR 2025-01-15 15:12:04,808 kevm_pyk.utils - Proof crashed: CALLER_0_SPEC
{ true #Equals 0 <Int lengthBytes ( OUTPUT_CELL:Bytes ) }
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And #Not ( #Exists _ACCTTO:Int . #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCTFROM:Int . #Exists ORIGFROM:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals ORIGFROM:Int <Int VALUE:Int }
#And { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    ORIGFROM:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #transferFunds ACCTFROM:Int _ACCTTO:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DEST:Int . #Exists _DotVar2:K . { K_CELL:K #Equals JUMPI _DEST:Int 0
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals CALLDATA_CELL:Bytes [ 212 ] <=Int 1 }
#And { 213 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) }
#And { K_CELL:K #Equals BLAKE2F
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals CALLDATA_CELL:Bytes [ 212 ] >Int 1 }
#And { 213 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) }
#And { K_CELL:K #Equals BLAKE2F
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals 0 <Int size ( SELFDESTRUCT_CELL:Set ) }
#And { K_CELL:K #Equals #finalizeTx ( true )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals CALLDEPTH_CELL:Int <Int 1024 }
#And { K_CELL:K #Equals #checkDepthExceeded
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals 1024 <=Int CALLDEPTH_CELL:Int }
#And { K_CELL:K #Equals #checkDepthExceeded
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { 0 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) modInt 192 }
#And { K_CELL:K #Equals ECPAIRING
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #finalizeTx ( true )
~> _DotVar2:K }
#And { SELFDESTRUCT_CELL:Set #Equals .Set } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals BLAKE2F
~> _DotVar2:K }
#And #Not ( { lengthBytes ( CALLDATA_CELL:Bytes ) #Equals 213 } ) )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECPAIRING
~> _DotVar2:K }
#And #Not ( { 0 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) modInt 192 } ) )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #initVM
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #execute
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #halt
~> #execute
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #rewardOmmers ( .JSONs )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #startBlock
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #allocateCreateGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #deleteAccounts ( .List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #endBasicBlock
~> #execute
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #finalizeStorage ( .List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #next [ .NoOpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #pushCallStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #pushWorldState
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals INVALID
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ADDRESS
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals BASEFEE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CALLDATASIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CALLER
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CALLVALUE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CHAINID
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CODESIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals COINBASE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals DIFFICULTY
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals GAS
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals GASLIMIT
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals GASPRICE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals JUMPDEST
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals MSIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals NUMBER
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ORIGIN
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals PC
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals PREVRANDAO
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals RETURNDATASIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals STOP
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals TIMESTAMP
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECADD
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECMUL
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECREC
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ID
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals MODEXP
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals RIP160
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals SHA256
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals PUSHZERO
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists _Gen5:NonceCell . #Exists ACCT:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  _Gen5:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #newAccount ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists _Gen5:NonceCell . #Exists ACCT:Int . #Exists ACCTS:List . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  _Gen5:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #deleteAccounts ( ListItem ( ACCT:Int ) ACCTS:List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists ACCT:Int . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals NONCE:Int <Int maxUInt64 }
#And { true #Equals 0 <=Int NONCE:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #checkNonceExceeded ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists ACCT:Int . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #incrementNonce ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists CODE:Bytes . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals EXTCODESIZE ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCTCODE:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists APPVALUE:Int . #Exists ARGS:Bytes . #Exists CODE:Bytes . #Exists STATIC:Bool . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTCODE:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTCODE:Int
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #call ACCTFROM:Int ACCTTO:Int ACCTCODE:Int VALUE:Int APPVALUE:Int ARGS:Bytes STATIC:Bool
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists ACCT:Int . #Exists CODE:AccountCode . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals notBool CODE:AccountCode ~> .K ==K b"" ~> .K orBool notBool NONCE:Int ==Int 0 }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:AccountCode
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #newExistingAccount ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists _Gen5:CodeCell . #Exists _Gen6:StorageCell . #Exists _Gen7:OrigStorageCell . #Exists _Gen8:TransientStorageCell . #Exists _Gen9:NonceCell . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ORIGFROM:Int . #Exists ORIGTO:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { false #Equals <acctID>
  ACCTTO:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals VALUE:Int <=Int ORIGFROM:Int }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } )
#And { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { false #Equals <acctID>
  ACCTTO:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    ORIGFROM:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> <account>
  <acctID>
    ACCTTO:Int
  </acctID>
  <balance>
    ORIGTO:Int
  </balance>
  _Gen5:CodeCell
  _Gen6:StorageCell
  _Gen7:OrigStorageCell
  _Gen8:TransientStorageCell
  _Gen9:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #transferFunds ACCTFROM:Int ACCTTO:Int VALUE:Int
~> _DotVar2:K }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals BALANCE ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals VALUE:Int <=Int BAL:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #checkBalanceUnderflow ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists ORIGFROM:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals VALUE:Int <=Int ORIGFROM:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    ORIGFROM:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #transferFunds ACCT:Int ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:Map . #Exists _Gen1:BalanceCell . #Exists _Gen2:CodeCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists REST:List . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen1:BalanceCell
  _Gen2:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    _Gen0:Map
  </origStorage>
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #finalizeStorage ( ListItem ( ACCT:Int ) REST:List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:Map . #Exists _Gen1:Map . #Exists _Gen2:BalanceCell . #Exists _Gen3:TransientStorageCell . #Exists ACCT:Int . #Exists CODE:Bytes . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { 0 #Equals lengthBytes ( CODE:Bytes ) }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen2:BalanceCell
  <code>
    CODE:Bytes
  </code>
  <storage>
    _Gen0:Map
  </storage>
  <origStorage>
    _Gen1:Map
  </origStorage>
  _Gen3:TransientStorageCell
  <nonce>
    0
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #newExistingAccount ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:StorageCell . #Exists _Gen1:OrigStorageCell . #Exists _Gen2:TransientStorageCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists CODE:AccountCode . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #accountNonexistent ( ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:StorageCell . #Exists _Gen1:OrigStorageCell . #Exists _Gen2:TransientStorageCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists CODE:Bytes . #Exists NONCE:Int . { false #Equals CODE:Bytes ~> .K ==K b"" ~> .K andBool NONCE:Int ==Int 0 andBool BAL:Int ==Int 0 }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:Bytes
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals EXTCODEHASH ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:MessageCellMap . #Exists _Gen0:TxNonceCell . #Exists _Gen1:TxGasPriceCell . #Exists _Gen2:TxGasLimitCell . #Exists _Gen3:ToCell . #Exists _Gen4:ValueCell . #Exists _Gen5:SigVCell . #Exists _Gen6:SigRCell . #Exists _Gen7:SigSCell . #Exists _Gen8:DataCell . #Exists _Gen9:TxAccessCell . #Exists _Gen10:TxChainIDCell . #Exists _Gen11:TxPriorityFeeCell . #Exists _Gen12:TxMaxFeeCell . #Exists _Gen13:TxTypeCell . #Exists MsgId:Int . #Exists REST:List . { false #Equals <msgID>
  MsgId:Int
</msgID> in_keys ( _DotVar5:MessageCellMap ) }
#And { K_CELL:K #Equals #finalizeTx ( false )
~> _DotVar2:K }
#And { MESSAGES_CELL:MessageCellMap #Equals <message>
  <msgID>
    MsgId:Int
  </msgID>
  _Gen0:TxNonceCell
  _Gen1:TxGasPriceCell
  _Gen2:TxGasLimitCell
  _Gen3:ToCell
  _Gen4:ValueCell
  _Gen5:SigVCell
  _Gen6:SigRCell
  _Gen7:SigSCell
  _Gen8:DataCell
  _Gen9:TxAccessCell
  _Gen10:TxChainIDCell
  _Gen11:TxPriorityFeeCell
  _Gen12:TxMaxFeeCell
  _Gen13:TxTypeCell
</message> _DotVar5:MessageCellMap }
#And { TXPENDING_CELL:List #Equals ListItem ( MsgId:Int ) REST:List } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar6:Map . #Exists ACCT:Account . #Exists INDEX:Int . #Exists TS:Set . { false #Equals ACCT:Account in_keys ( _DotVar6:Map ) }
#And { true #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { false #Equals ACCT:Account in_keys ( _DotVar6:Map ) }
#And { ACCESSEDSTORAGE_CELL:Map #Equals ACCT:Account |-> TS:Set _DotVar6:Map }
#And { K_CELL:K #Equals #accessStorage ACCT:Account INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen0:AccountCode . #Exists _Gen24:BalanceCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:TransientStorageCell . #Exists _Gen28:NonceCell . #Exists ACCT:Int . #Exists OUT:Bytes . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen24:BalanceCell
  <code>
    _Gen0:AccountCode
  </code>
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #finishCodeDeposit ACCT:Int OUT:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen0:JSON . #Exists _Gen1:JSON . #Exists _Gen2:JSON . #Exists _Gen3:JSON . #Exists _Gen4:JSON . #Exists _Gen5:JSON . #Exists _Gen6:JSON . #Exists _Gen7:JSONs . #Exists _Gen37:CodeCell . #Exists _Gen38:StorageCell . #Exists _Gen39:OrigStorageCell . #Exists _Gen40:TransientStorageCell . #Exists _Gen41:NonceCell . #Exists _Gen42:CodeCell . #Exists _Gen43:StorageCell . #Exists _Gen44:OrigStorageCell . #Exists _Gen45:TransientStorageCell . #Exists _Gen46:NonceCell . #Exists MINBAL:Int . #Exists OMMBAL:Int . #Exists OMMER:Int . #Exists OMMNUM:Int . #Exists REST:JSONs . { false #Equals <acctID>
  COINBASE_CELL:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { false #Equals <acctID>
  OMMER:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And #Not ( { OMMER:Int #Equals COINBASE_CELL:Int } )
#And { false #Equals <acctID>
  COINBASE_CELL:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { false #Equals <acctID>
  OMMER:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    COINBASE_CELL:Int
  </acctID>
  <balance>
    MINBAL:Int
  </balance>
  _Gen37:CodeCell
  _Gen38:StorageCell
  _Gen39:OrigStorageCell
  _Gen40:TransientStorageCell
  _Gen41:NonceCell
</account> <account>
  <acctID>
    OMMER:Int
  </acctID>
  <balance>
    OMMBAL:Int
  </balance>
  _Gen42:CodeCell
  _Gen43:StorageCell
  _Gen44:OrigStorageCell
  _Gen45:TransientStorageCell
  _Gen46:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #rewardOmmers ( [ _Gen0:JSON , _Gen1:JSON , OMMER:Int , _Gen2:JSON , _Gen3:JSON , _Gen4:JSON , _Gen5:JSON , _Gen6:JSON , OMMNUM:Int , _Gen7:JSONs ] , REST:JSONs )
~> _DotVar2:K }
#And #Not ( { COINBASE_CELL:Int #Equals OMMER:Int } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen21:BalanceCell . #Exists _Gen22:CodeCell . #Exists _Gen23:StorageCell . #Exists _Gen24:OrigStorageCell . #Exists _Gen25:TransientStorageCell . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists INITCODE:Bytes . #Exists NONCE:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTTO:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTTO:Int
  </acctID>
  _Gen21:BalanceCell
  _Gen22:CodeCell
  _Gen23:StorageCell
  _Gen24:OrigStorageCell
  _Gen25:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #mkCreate ACCTFROM:Int ACCTTO:Int VALUE:Int INITCODE:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen22:BalanceCell . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . #Exists NONCE:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { true #Equals notBool Ghasmaxinitcodesize << SCHEDULE_CELL:Schedule >> orBool MEMWIDTH:Int <=Int maxInitCodeSize < SCHEDULE_CELL:Schedule > }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen22:BalanceCell
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals CREATE VALUE:Int MEMSTART:Int MEMWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists NEW:Int . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SSTORE INDEX:Int NEW:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SLOAD INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists NEW:Int . #Exists TSTORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals TSTORE INDEX:Int NEW:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists TSTORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals TLOAD INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:TransientStorageCell . #Exists ACCT:Int . #Exists NONCE:Int . { false #Equals #rangeNonce ( NONCE:Int ) }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  _Gen27:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #checkNonceExceeded ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists PGM:Bytes . #Exists PGMSTART:Int . #Exists WIDTH:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  <code>
    PGM:Bytes
  </code>
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals EXTCODECOPY ACCT:Int MEMSTART:Int PGMSTART:Int WIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SELFBALANCE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { true #Equals BAL:Int <Int VALUE:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #checkBalanceUnderflow ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen29:BalanceCell . #Exists _Gen30:CodeCell . #Exists _Gen31:OrigStorageCell . #Exists _Gen32:TransientStorageCell . #Exists _Gen33:NonceCell . #Exists M:Map . { false #Equals <acctID>
  339909022928299415537769066420252604268194818
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { true #Equals Ghasbeaconroot << SCHEDULE_CELL:Schedule >> }
#And { false #Equals <acctID>
  339909022928299415537769066420252604268194818
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    339909022928299415537769066420252604268194818
  </acctID>
  _Gen29:BalanceCell
  _Gen30:CodeCell
  <storage>
    M:Map
  </storage>
  _Gen31:OrigStorageCell
  _Gen32:TransientStorageCell
  _Gen33:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #executeBeaconRoots
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen0:Int . #Exists _Gen27:CodeCell . #Exists _Gen28:StorageCell . #Exists _Gen29:OrigStorageCell . #Exists _Gen30:TransientStorageCell . #Exists _Gen31:NonceCell . #Exists ACCT:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    _Gen0:Int
  </balance>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SELFDESTRUCT ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen25:BalanceCell . #Exists _Gen26:CodeCell . #Exists _Gen27:TransientStorageCell . #Exists _Gen28:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists NEW:Int . #Exists ORIGSTORAGE:Map . #Exists SCHED:Schedule . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { true #Equals notBool Ghassstorestipend << SCHED:Schedule >> orBool Gcallstipend < SCHED:Schedule > <Gas GAS_CELL:Gas }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SSTORE INDEX:Int NEW:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen25:CodeCell . #Exists _Gen26:StorageCell . #Exists _Gen27:OrigStorageCell . #Exists _Gen28:TransientStorageCell . #Exists _Gen29:NonceCell . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists BAL:Int . #Exists SCHED:Schedule . { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SELFDESTRUCT ACCTTO:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen26:CodeCell . #Exists _Gen27:StorageCell . #Exists _Gen28:OrigStorageCell . #Exists _Gen29:TransientStorageCell . #Exists _Gen30:NonceCell . #Exists ACCT:Int . #Exists ACCTTO:Int . #Exists BALFROM:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And #Not ( { ACCT:Int #Equals ACCTTO:Int } )
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SELFDESTRUCT ACCTTO:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen32:CodeCell . #Exists _Gen33:StorageCell . #Exists _Gen34:OrigStorageCell . #Exists _Gen35:TransientStorageCell . #Exists _Gen36:NonceCell . #Exists MINBAL:Int . #Exists OMMERS:JSONs . { false #Equals <acctID>
  COINBASE_CELL:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    COINBASE_CELL:Int
  </acctID>
  <balance>
    MINBAL:Int
  </balance>
  _Gen32:CodeCell
  _Gen33:StorageCell
  _Gen34:OrigStorageCell
  _Gen35:TransientStorageCell
  _Gen36:NonceCell
</account> _DotVar8:AccountCellMap }
#And { K_CELL:K #Equals #finalizeBlock
~> _DotVar2:K }
#And { OMMERBLOCKHEADERS_CELL:JSON #Equals [ OMMERS:JSONs ] } )
#And #Not ( #Exists _DotVar2:K . #Exists _G:Gas . { K_CELL:K #Equals _G:Gas
~> #deductMemoryGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals DELEGATECALL _GCAP:Int ACCTTO:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals STATICCALL _GCAP:Int ACCTTO:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . #Exists VALUE:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals CALL _GCAP:Int ACCTTO:Int VALUE:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . #Exists VALUE:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals CALLCODE _GCAP:Int ACCTTO:Int VALUE:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Account . #Exists _Gen1:Int . { false #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { K_CELL:K #Equals #accessStorage _Gen0:Account _Gen1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Bytes . #Exists A:List . #Exists B:List . #Exists LEN:Int . { K_CELL:K #Equals #ecpairing ( A:List , B:List , LEN:Int , _Gen0:Bytes , LEN:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Bytes . #Exists ACCT:Int . { K_CELL:K #Equals #halt
~> #finishCodeDeposit ACCT:Int _Gen1:Bytes
~> _DotVar2:K }
#And { SCHEDULE_CELL:Schedule #Equals FRONTIER }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Int . { K_CELL:K #Equals #halt
~> #codeDeposit _Gen1:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Int . #Exists _Gen2:Bytes . { K_CELL:K #Equals #halt
~> #finishCodeDeposit _Gen1:Int _Gen2:Bytes
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode }
#And #Not ( { SCHEDULE_CELL:Schedule ~> .K #Equals FRONTIER ~> .K } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Int . #Exists _Gen2:Int . { K_CELL:K #Equals #halt
~> #return _Gen1:Int _Gen2:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Gas . { K_CELL:K #Equals _Gen0:Gas
~> #deductGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Gas . { K_CELL:K #Equals #refund _Gen0:Gas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals #halt
~> #codeDeposit _Gen0:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_REVERT } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals #halt
~> _Gen0:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals POP _Gen0:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals UNDEFINED ( _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DELEGATECALL GCAP:Int ACCTTO:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . #Exists VALUE:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLCODE GCAP:Int ACCTTO:Int VALUE:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , STATICCALL GCAP:Int ACCTTO:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . #Exists VALUE:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALL GCAP:Int ACCTTO:Int VALUE:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , EXTCODECOPY ACCT:Int _Gen0:Int _Gen1:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ADDMOD _Gen0:Int _Gen1:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MULMOD _Gen0:Int _Gen1:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CREATE2 _Gen0:Int _Gen1:Int WIDTH:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXTCODECOPY _Gen0:Int _Gen1:Int _Gen2:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { true #Equals Ghassstorestipend << SCHED:Schedule >> }
#And { true #Equals GAS_CELL:Gas <=Gas Gcallstipend < SCHED:Schedule > }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SSTORE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ADD _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , AND _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BYTE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DIV _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EQ _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EVMOR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , JUMPI _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , LT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MOD _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MSTORE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MSTORE8 _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MUL _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , RETURN _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , REVERT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SAR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SDIV _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SGT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SHL _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SHR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SIGNEXTEND _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SLT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SMOD _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SUB _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , TSTORE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , XOR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLDATACOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CODECOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CREATE _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MCOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , RETURNDATACOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:WordStack . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DUP ( _Gen0:Int ) _Gen1:WordStack )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:WordStack . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SWAP ( _Gen0:Int ) _Gen1:WordStack )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists INDEX:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , SSTORE INDEX:Int _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists N:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , LOG ( N:Int ) _Gen0:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BALANCE _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BLOCKHASH _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLDATALOAD _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXTCODEHASH _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXTCODESIZE _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ISZERO _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , JUMP _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MLOAD _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , NOT _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , POP _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , TLOAD _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PUSH ( _Gen0:Int ) )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . #Exists W1:Int . { true #Equals 0 <Int W1:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXP _Gen0:Int W1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . #Exists W1:Int . { true #Equals W1:Int <=Int 0 }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXP _Gen0:Int W1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SHA3 _Gen0:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:KItem . #Exists REST:List . { CALLSTACK_CELL:List #Equals ListItem ( _Gen0:KItem ) REST:List }
#And { K_CELL:K #Equals #dropCallStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:KItem . #Exists REST:List . { INTERIMSTATES_CELL:List #Equals ListItem ( _Gen0:KItem ) REST:List }
#And { K_CELL:K #Equals #dropWorldState
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:List . #Exists _Gen1:List . #Exists _Gen2:Int . #Exists _Gen3:Bytes . #Exists _Gen4:Int . #Exists AK:G1Point . #Exists BK:G2Point . { true #Equals isValidPointWrapper ( BK:G2Point ) }
#And { true #Equals isValidPointWrapper ( AK:G1Point ) }
#And { K_CELL:K #Equals #checkPoint
~> #ecpairing ( ListItem ( AK:G1Point ) _Gen0:List , ListItem ( BK:G2Point ) _Gen1:List , _Gen2:Int , _Gen3:Bytes , _Gen4:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:List . #Exists _Gen1:List . #Exists _Gen2:Int . #Exists _Gen3:Bytes . #Exists _Gen4:Int . #Exists AK:G1Point . #Exists BK:G2Point . { true #Equals notBool isValidPointWrapper ( AK:G1Point ) orBool notBool isValidPointWrapper ( BK:G2Point ) }
#And { K_CELL:K #Equals #checkPoint
~> #ecpairing ( ListItem ( AK:G1Point ) _Gen0:List , ListItem ( BK:G2Point ) _Gen1:List , _Gen2:Int , _Gen3:Bytes , _Gen4:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:List . #Exists _Gen1:List . #Exists DATA:Bytes . #Exists I:Int . #Exists LEN:Int . { K_CELL:K #Equals #ecpairing ( _Gen0:List , _Gen1:List , I:Int , DATA:Bytes , LEN:Int )
~> _DotVar2:K }
#And #Not ( { I:Int #Equals LEN:Int } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { K_CELL:K #Equals #halt
~> _Gen0:OpCode
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { K_CELL:K #Equals #endBasicBlock
~> _Gen0:OpCode
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . #Exists _Gen1:OpCode . { K_CELL:K #Equals #gas [ _Gen0:OpCode , _Gen1:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , ECREC )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , ID )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , RIP160 )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , SHA256 )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . #Exists INDEX:Int . { K_CELL:K #Equals #gasAccess ( _Gen0:Schedule , SLOAD INDEX:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen1:ProgramCell . #Exists _Gen2:JumpDestsCell . #Exists _Gen3:IdCell . #Exists _Gen4:CallerCell . #Exists _Gen5:CallDataCell . #Exists _Gen6:CallValueCell . #Exists _Gen7:WordStackCell . #Exists _Gen8:LocalMemCell . #Exists _Gen9:PcCell . #Exists _Gen10:GasCell . #Exists _Gen11:MemoryUsedCell . #Exists _Gen12:CallGasCell . #Exists _Gen13:StaticCell . #Exists _Gen14:CallDepthCell . #Exists REST:List . { CALLSTACK_CELL:List #Equals ListItem ( <callState>
  _Gen1:ProgramCell
  _Gen2:JumpDestsCell
  _Gen3:IdCell
  _Gen4:CallerCell
  _Gen5:CallDataCell
  _Gen6:CallValueCell
  _Gen7:WordStackCell
  _Gen8:LocalMemCell
  _Gen9:PcCell
  _Gen10:GasCell
  _Gen11:MemoryUsedCell
  _Gen12:CallGasCell
  _Gen13:StaticCell
  _Gen14:CallDepthCell
</callState> ) REST:List }
#And { K_CELL:K #Equals #popCallStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen2:SelfDestructCell . #Exists _Gen3:LogCell . #Exists _Gen4:RefundCell . #Exists _Gen5:AccessedAccountsCell . #Exists _Gen6:AccessedStorageCell . #Exists ACCTDATA:AccountCellMap . #Exists REST:List . { INTERIMSTATES_CELL:List #Equals ListItem ( { <accounts>
  ACCTDATA:AccountCellMap
</accounts> | <substate>
  _Gen2:SelfDestructCell
  _Gen3:LogCell
  _Gen4:RefundCell
  _Gen5:AccessedAccountsCell
  _Gen6:AccessedStorageCell
</substate> } ) REST:List }
#And { K_CELL:K #Equals #popWorldState
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _MEMSTART:Int . #Exists DATASTART:Int . #Exists DATAWIDTH:Int . { true #Equals lengthBytes ( OUTPUT_CELL:Bytes ) <Int DATASTART:Int +Int DATAWIDTH:Int }
#And { K_CELL:K #Equals RETURNDATACOPY _MEMSTART:Int DATASTART:Int DATAWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _S:Int . #Exists P:G1Point . { false #Equals isValidPointWrapper ( P:G1Point ) }
#And { K_CELL:K #Equals #ecmul ( P:G1Point , _S:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _WS:WordStack . #Exists OP:OpCode . #Exists W1:Int . { true #Equals isAddr2Op ( OP:OpCode ) }
#And { K_CELL:K #Equals #addr [ OP:OpCode ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : _WS:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Account . #Exists INDEX:Int . { false #Equals ACCT:Account in_keys ( ACCESSEDSTORAGE_CELL:Map ) }
#And { true #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { K_CELL:K #Equals #accessStorage ACCT:Account INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . { true #Equals #isValidCode ( OUTPUT_CELL:Bytes , SCHEDULE_CELL:Schedule ) }
#And { true #Equals lengthBytes ( OUTPUT_CELL:Bytes ) <=Int maxCodeSize < SCHEDULE_CELL:Schedule > }
#And { K_CELL:K #Equals #mkCodeDeposit ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . { K_CELL:K #Equals #halt
~> #codeDeposit ACCT:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_SUCCESS } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . #Exists N:Int . { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 1 ) }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals LOG ( N:Int ) MEMSTART:Int MEMWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . #Exists SALT:Int . #Exists VALUE:Int . { true #Equals notBool Ghasmaxinitcodesize << SCHEDULE_CELL:Schedule >> orBool MEMWIDTH:Int <=Int maxInitCodeSize < SCHEDULE_CELL:Schedule > }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals CREATE2 VALUE:Int MEMSTART:Int MEMWIDTH:Int SALT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , BALANCE ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , EXTCODEHASH ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , EXTCODESIZE ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , SELFDESTRUCT ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists VALUE:Int . { K_CELL:K #Equals #checkCall ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists VALUE:Int . { K_CELL:K #Equals #checkCreate ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists APPVALUE:Int . #Exists ARGS:Bytes . #Exists BYTES:Bytes . #Exists STATIC:Bool . { K_CELL:K #Equals #mkCall ACCTFROM:Int ACCTTO:Int ACCTCODE:Int BYTES:Bytes APPVALUE:Int ARGS:Bytes STATIC:Bool
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists APPVALUE:Int . #Exists ARGS:Bytes . #Exists BYTES:Bytes . #Exists STATIC:Bool . #Exists VALUE:Int . { K_CELL:K #Equals #callWithCode ACCTFROM:Int ACCTTO:Int ACCTCODE:Int BYTES:Bytes VALUE:Int APPVALUE:Int ARGS:Bytes STATIC:Bool
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists SCHED:Schedule . { true #Equals 0 <Int ACCTCODE:Int }
#And { true #Equals ACCTCODE:Int <=Int #precompiledAccountsUB ( SCHED:Schedule ) }
#And { K_CELL:K #Equals #precompiled? ( ACCTCODE:Int , SCHED:Schedule )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists SCHED:Schedule . { false #Equals #range ( 0 < ACCTCODE:Int <= #precompiledAccountsUB ( SCHED:Schedule ) ) }
#And { K_CELL:K #Equals #precompiled? ( ACCTCODE:Int , SCHED:Schedule )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . { true #Equals Gemptyisnonexistent << SCHEDULE_CELL:Schedule >> }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } )
#And { K_CELL:K #Equals #transferFundsToNonExistent ACCTFROM:Int ACCTTO:Int 0
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists INITCODE:Bytes . #Exists VALUE:Int . { K_CELL:K #Equals #create ACCTFROM:Int ACCTTO:Int VALUE:Int INITCODE:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists VALUE:Int . { true #Equals 0 <Int VALUE:Int orBool notBool Gemptyisnonexistent << SCHEDULE_CELL:Schedule >> }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } )
#And { K_CELL:K #Equals #transferFundsToNonExistent ACCTFROM:Int ACCTTO:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR:Account . { K_CELL:K #Equals #accessAccounts ADDR:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR:Account . { K_CELL:K #Equals #touchAccounts ADDR:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR1:Account . #Exists ADDR2:Account . { K_CELL:K #Equals #accessAccounts ADDR1:Account ADDR2:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR1:Account . #Exists ADDR2:Account . { K_CELL:K #Equals #touchAccounts ADDR1:Account ADDR2:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR1:Account . #Exists ADDR2:Account . #Exists ADDRSET:Set . { K_CELL:K #Equals #accessAccounts ADDR1:Account ADDR2:Account ADDRSET:Set
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDRSET:Set . { K_CELL:K #Equals #accessAccounts ADDRSET:Set
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists AOP:OpCode . #Exists OP:OpCode . { true #Equals #usesAccessList ( OP:OpCode ) }
#And { true #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { K_CELL:K #Equals #access [ OP:OpCode , AOP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists AOP:OpCode . #Exists OP:OpCode . { true #Equals #usesMemory ( OP:OpCode ) }
#And { K_CELL:K #Equals #memory [ OP:OpCode , AOP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists BAL:Int . #Exists ISEMPTY:Bool . #Exists SCHED:Schedule . { K_CELL:K #Equals Cselfdestruct ( SCHED:Schedule , ISEMPTY:Bool , BAL:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists BOP:BinStackOp . #Exists W1:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ BOP:BinStackOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists BYTES:Bytes . { K_CELL:K #Equals #loadProgram BYTES:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists CO:CallOp . #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists W4:Int . #Exists W5:Int . #Exists W6:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ CO:CallOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : W3:Int : W4:Int : W5:Int : W6:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists CSO:CallSixOp . #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists W4:Int . #Exists W5:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ CSO:CallSixOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : W3:Int : W4:Int : W5:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists DATASTART:Int . { K_CELL:K #Equals CALLDATALOAD DATASTART:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DATASTART:Int . #Exists DATAWIDTH:Int . #Exists MEMSTART:Int . { true #Equals DATASTART:Int +Int DATAWIDTH:Int <=Int lengthBytes ( OUTPUT_CELL:Bytes ) }
#And { K_CELL:K #Equals RETURNDATACOPY MEMSTART:Int DATASTART:Int DATAWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DATASTART:Int . #Exists DATAWIDTH:Int . #Exists MEMSTART:Int . { K_CELL:K #Equals CALLDATACOPY MEMSTART:Int DATASTART:Int DATAWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DEST:Int . { true #Equals DEST:Int <Int lengthBytes ( JUMPDESTS_CELL:Bytes ) }
#And { 1 #Equals JUMPDESTS_CELL:Bytes [ DEST:Int ] }
#And { K_CELL:K #Equals JUMP DEST:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DEST:Int . #Exists I:Int . { K_CELL:K #Equals JUMPI DEST:Int I:Int
~> _DotVar2:K }
#And #Not ( { I:Int #Equals 0 } ) )
#And #Not ( #Exists _DotVar2:K . #Exists DST:Int . #Exists LEN:Int . #Exists SRC:Int . { K_CELL:K #Equals MCOPY DST:Int SRC:Int LEN:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists GAVAIL:Gas . #Exists GCAP:Gas . #Exists ISEMPTY:Bool . #Exists ISWARM:Bool . #Exists SCHED:Schedule . #Exists VALUE:Int . { K_CELL:K #Equals Ccall ( SCHED:Schedule , ISEMPTY:Bool , GCAP:Gas , GAVAIL:Gas , VALUE:Int , ISWARM:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists GAVAIL:Gas . #Exists GCAP:Gas . #Exists ISEMPTY:Bool . #Exists ISWARM:Bool . #Exists SCHED:Schedule . #Exists VALUE:Int . { K_CELL:K #Equals Ccallgas ( SCHED:Schedule , ISEMPTY:Bool , GCAP:Gas , GAVAIL:Gas , VALUE:Int , ISWARM:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists GCALL:Gas . { K_CELL:K #Equals GCALL:Gas
~> #allocateCallGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { false #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals Ccall ( K0:Schedule , HOLE:BExp , K2:Gas , K3:Gas , K4:Int , K5:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { false #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals Ccallgas ( K0:Schedule , HOLE:BExp , K2:Gas , K3:Gas , K4:Int , K5:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { true #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals HOLE:BExp
~> #freezerCcall1_ ( K0:Schedule ~> .K , K2:Gas ~> .K , K3:Gas ~> .K , K4:Int ~> .K , K5:Bool ~> .K )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { true #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals HOLE:BExp
~> #freezerCcallgas1_ ( K0:Schedule ~> .K , K2:Gas ~> .K , K3:Gas ~> .K , K4:Int ~> .K , K5:Bool ~> .K )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Int . { false #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals Cselfdestruct ( K0:Schedule , HOLE:BExp , K2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Int . { true #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals HOLE:BExp
~> #freezerCselfdestruct1_ ( K0:Schedule ~> .K , K2:Int ~> .K )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . { K_CELL:K #Equals MLOAD INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SLOAD INDEX:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists VALUE:Int . { K_CELL:K #Equals MSTORE INDEX:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists VALUE:Int . { K_CELL:K #Equals MSTORE8 INDEX:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists W:Int . { K_CELL:K #Equals BYTE INDEX:Int W:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists IOP:InvalidOp . { K_CELL:K #Equals #exec [ IOP:InvalidOp ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . { K_CELL:K #Equals SHA3 MEMSTART:Int MEMWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists MEMSTART:Int . #Exists PGMSTART:Int . #Exists WIDTH:Int . { K_CELL:K #Equals CODECOPY MEMSTART:Int PGMSTART:Int WIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists MU':Int . { K_CELL:K #Equals MU':Int
~> #deductMemory
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . { K_CELL:K #Equals BLOCKHASH N:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . { K_CELL:K #Equals PUSH ( N:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . { K_CELL:K #Equals SWAP ( N:Int ) W0:Int : WS:WordStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . #Exists WS:WordStack . { K_CELL:K #Equals DUP ( N:Int ) WS:WordStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { false #Equals isAddr1Op ( OP:OpCode ) }
#And { false #Equals isAddr2Op ( OP:OpCode ) }
#And { K_CELL:K #Equals #addr [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { false #Equals #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 0 andBool #sizeWordStack ( WS:WordStack , 1 ) +Int #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 1024 }
#And { false #Equals STATIC_CELL:Bool andBool #changesState ( OP:OpCode , CALLER_CELL:Int : WS:WordStack ) }
#And { false #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { false #Equals #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 0 andBool #sizeWordStack ( WS:WordStack , 1 ) +Int #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 1024 }
#And { false #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) }
#And { true #Equals #changesState ( OP:OpCode , CALLER_CELL:Int : WS:WordStack ) }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K }
#And { STATIC_CELL:Bool #Equals true } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals isNullStackOp ( OP:OpCode ~> .K ) orBool isPushOp ( OP:OpCode ~> .K ) }
#And { K_CELL:K #Equals #exec [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 0 }
#And { true #Equals #sizeWordStack ( WS:WordStack , 1 ) +Int #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 1024 }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals isAddr1Op ( OP:OpCode ) }
#And { K_CELL:K #Equals #addr [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { K_CELL:K #Equals #gas [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { K_CELL:K #Equals #pc [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists P:G1Point . #Exists S:Int . { true #Equals isValidPointWrapper ( P:G1Point ) }
#And { K_CELL:K #Equals #ecmul ( P:G1Point , S:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists P1:G1Point . #Exists P2:G1Point . { true #Equals isValidPointWrapper ( P1:G1Point ) }
#And { true #Equals isValidPointWrapper ( P2:G1Point ) }
#And { K_CELL:K #Equals #ecadd ( P1:G1Point , P2:G1Point )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists P1:G1Point . #Exists P2:G1Point . { true #Equals notBool isValidPointWrapper ( P1:G1Point ) orBool notBool isValidPointWrapper ( P2:G1Point ) }
#And { K_CELL:K #Equals #ecadd ( P1:G1Point , P2:G1Point )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists QOP:QuadStackOp . #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ QOP:QuadStackOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : W3:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals #halt
~> #return RETSTART:Int RETWIDTH:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_REVERT } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals #halt
~> #return RETSTART:Int RETWIDTH:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_SUCCESS } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals RETURN RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals REVERT RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SC:StatusCode . { K_CELL:K #Equals #end SC:StatusCode
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ADDRESS )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BASEFEE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLDATASIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLER )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLVALUE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CHAINID )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CODESIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , COINBASE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DIFFICULTY )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GAS )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GASLIMIT )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GASPRICE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , JUMPDEST )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MSIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , NUMBER )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ORIGIN )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PC )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PREVRANDAO )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , RETURNDATASIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SELFBALANCE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , STOP )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , TIMESTAMP )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BLAKE2F )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ECADD )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ECMUL )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ECPAIRING )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MODEXP )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PUSHZERO )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SO:StackOp . { K_CELL:K #Equals #exec [ SO:StackOp ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists START:Int . #Exists WIDTH:Int . #Exists WS:Bytes . { K_CELL:K #Equals #setLocalMem START:Int WIDTH:Int WS:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists TOP:TernStackOp . #Exists W1:Int . #Exists W2:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ TOP:TernStackOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists UOP:UnStackOp . { K_CELL:K #Equals #exec [ UOP:UnStackOp ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W:Int . { K_CELL:K #Equals ISZERO W:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W:Int . { K_CELL:K #Equals NOT W:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . { K_CELL:K #Equals W0:Int
~> #push
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals ADD W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals AND W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals DIV W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals EQ W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals EVMOR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals EXP W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals GT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals LT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals MOD W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals MUL W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SAR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SDIV W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SGT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SHL W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SHR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SIGNEXTEND W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SLT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SMOD W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SUB W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals XOR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . #Exists W2:Int . { K_CELL:K #Equals ADDMOD W0:Int W1:Int W2:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . #Exists W2:Int . { K_CELL:K #Equals MULMOD W0:Int W1:Int W2:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists WS:WordStack . { K_CELL:K #Equals #setStack WS:WordStack
~> _DotVar2:K } )
#And #Not ( #Exists _K_CELL:K . { K_CELL:K #Equals #next [ CALLER ]
~> _K_CELL:K } )
Traceback (most recent call last):
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kore/rpc.py", line 926, in _request
    return self._client.request(method, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kore/rpc.py", line 246, in request
    return self._default_client.request(method, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kore/rpc.py", line 325, in request
    self._check(data)
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kore/rpc.py", line 336, in _check
    raise JsonRpcError(**response['error'])
pyk.kore.rpc.JsonRpcError: Smt solver error

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/cterm/symbolic.py", line 110, in execute
    response = self._kore_client.execute(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kore/rpc.py", line 990, in execute
    result = self._request('execute', **params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kore/rpc.py", line 928, in _request
    raise self._error(err) from err
pyk.kore.rpc.SmtSolverError: SMT solver error: canceled Pattern: \and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(\dv{SortInt{}}("0"), LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarOUTPUT'Unds'CELL : SortBytes{}))), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("0")), \dv{SortInt{}}("1023")))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'ACCTTO : SortInt{}, \exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarORIGFROM : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(VarORIGFROM : SortInt{}, VarVALUE : SortInt{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarORIGFROM : SortInt{}), Var'Unds'Gen0 : SortCodeCell{}, Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'transferFunds'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int{}(VarACCTFROM : SortInt{}, Var'Unds'ACCTTO : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DEST : SortInt{}, \exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblJUMPI'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'DEST : SortInt{}, \dv{SortInt{}}("0"))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(Lbl'UndsLSqBUndsRSqBUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes'Unds'Int{}(VarCALLDATA'Unds'CELL : SortBytes{}, \dv{SortInt{}}("212")), \dv{SortInt{}}("1"))), \equals{SortInt{}, SortBool{}}(\dv{SortInt{}}("213"), LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarCALLDATA'Unds'CELL : SortBytes{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblBLAKE2F'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-GT-'Int'Unds'{}(Lbl'UndsLSqBUndsRSqBUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes'Unds'Int{}(VarCALLDATA'Unds'CELL : SortBytes{}, \dv{SortInt{}}("212")), \dv{SortInt{}}("1"))), \and{SortBool{}}(\equals{SortInt{}, SortBool{}}(\dv{SortInt{}}("213"), LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarCALLDATA'Unds'CELL : SortBytes{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblBLAKE2F'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(\dv{SortInt{}}("0"), Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(VarSELFDESTRUCT'Unds'CELL : SortSet{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'finalizeTx{}(\dv{SortBool{}}("true"))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(VarCALLDEPTH'Unds'CELL : SortInt{}, \dv{SortInt{}}("1024"))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkDepthExceeded'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(\dv{SortInt{}}("1024"), VarCALLDEPTH'Unds'CELL : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkDepthExceeded'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortInt{}, SortBool{}}(\dv{SortInt{}}("0"), Lbl'Unds'modInt'Unds'{}(LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarCALLDATA'Unds'CELL : SortBytes{}), \dv{SortInt{}}("192"))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblECPAIRING'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'finalizeTx{}(\dv{SortBool{}}("true"))), Var'Unds'DotVar2 : SortK{})), \equals{SortSet{}, SortBool{}}(VarSELFDESTRUCT'Unds'CELL : SortSet{}, Lbl'Stop'Set{}()))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblBLAKE2F'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarCALLDATA'Unds'CELL : SortBytes{}), \dv{SortInt{}}("213"))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblECPAIRING'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(\dv{SortInt{}}("0"), Lbl'Unds'modInt'Unds'{}(LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarCALLDATA'Unds'CELL : SortBytes{}), \dv{SortInt{}}("192")))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'initVM'Unds'EVM'Unds'KItem{}(), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblexecute{}(), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lblexecute{}(), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortEthereumCommand{}, SortKItem{}}(Lbl'Hash'rewardOmmers{}(Lbl'Stop'List'LBraQuot'JSONs'QuotRBra'{}())), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortEthereumCommand{}, SortKItem{}}(Lbl'Hash'startBlock'Unds'EVM'Unds'EthereumCommand{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'allocateCreateGas'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'deleteAccounts{}(Lbl'Stop'List{}())), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'endBasicBlock'Unds'EVM'Unds'InternalOp{}()), kseq{}(Lblexecute{}(), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'finalizeStorage{}(Lbl'Stop'List{}())), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'next'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'MaybeOpCode{}(Lbl'Stop'NoOpCode'Unds'EVM'Unds'MaybeOpCode{}())), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'pushCallStack'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'pushWorldState'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInvalidOp{}, SortKItem{}}(LblINVALID'Unds'EVM'Unds'InvalidOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblADDRESS'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblBASEFEE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblCALLDATASIZE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblCALLER'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblCALLVALUE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblCHAINID'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblCODESIZE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblCOINBASE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblDIFFICULTY'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblGAS'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblGASLIMIT'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblGASPRICE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblJUMPDEST'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblMSIZE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblNUMBER'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblORIGIN'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblPC'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblPREVRANDAO'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblRETURNDATASIZE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblSTOP'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblTIMESTAMP'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblECADD'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblECMUL'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblECREC'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblID'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblMODEXP'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblRIP160'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPrecompiledOp{}, SortKItem{}}(LblSHA256'Unds'EVM'Unds'PrecompiledOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPushOp{}, SortKItem{}}(LblPUSHZERO'Unds'EVM'Unds'PushOp{}()), Var'Unds'DotVar2 : SortK{}))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Var'Unds'Gen1 : SortCodeCell{}, Var'Unds'Gen2 : SortStorageCell{}, Var'Unds'Gen3 : SortOrigStorageCell{}, Var'Unds'Gen4 : SortTransientStorageCell{}, Var'Unds'Gen5 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'newAccount'UndsUnds'EVM'Unds'InternalOp'Unds'Int{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarACCTS : SortList{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Var'Unds'Gen1 : SortCodeCell{}, Var'Unds'Gen2 : SortStorageCell{}, Var'Unds'Gen3 : SortOrigStorageCell{}, Var'Unds'Gen4 : SortTransientStorageCell{}, Var'Unds'Gen5 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'deleteAccounts{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(VarACCT : SortInt{})), VarACCTS : SortList{}))), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(VarNONCE : SortInt{}, \dv{SortInt{}}("18446744073709551615"))), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(\dv{SortInt{}}("0"), VarNONCE : SortInt{})))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Var'Unds'Gen1 : SortCodeCell{}, Var'Unds'Gen2 : SortStorageCell{}, Var'Unds'Gen3 : SortOrigStorageCell{}, Var'Unds'Gen4 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkNonceExceeded'UndsUnds'EVM'Unds'InternalOp'Unds'Int{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Var'Unds'Gen1 : SortCodeCell{}, Var'Unds'Gen2 : SortStorageCell{}, Var'Unds'Gen3 : SortOrigStorageCell{}, Var'Unds'Gen4 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'incrementNonce'UndsUnds'EVM'Unds'InternalOp'Unds'Int{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarCODE : SortBytes{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Lbl'-LT-'code'-GT-'{}(inj{SortBytes{}, SortAccountCode{}}(VarCODE : SortBytes{})), Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblEXTCODESIZE'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCTCODE : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarAPPVALUE : SortInt{}, \exists{SortBool{}}(VarARGS : SortBytes{}, \exists{SortBool{}}(VarCODE : SortBytes{}, \exists{SortBool{}}(VarSTATIC : SortBool{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTCODE : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTCODE : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTCODE : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Lbl'-LT-'code'-GT-'{}(inj{SortBytes{}, SortAccountCode{}}(VarCODE : SortBytes{})), Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'call'UndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Bytes'Unds'Bool{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarACCTCODE : SortInt{}, VarVALUE : SortInt{}, VarAPPVALUE : SortInt{}, VarARGS : SortBytes{}, VarSTATIC : SortBool{})), Var'Unds'DotVar2 : SortK{}))))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarCODE : SortAccountCode{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortAccountCode{}, SortKItem{}}(VarCODE : SortAccountCode{}), dotk{}()), kseq{}(inj{SortBytes{}, SortKItem{}}(\dv{SortBytes{}}("")), dotk{}()))), LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'Unds'{}(VarNONCE : SortInt{}, \dv{SortInt{}}("0")))))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen0 : SortBalanceCell{}, Lbl'-LT-'code'-GT-'{}(VarCODE : SortAccountCode{}), Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'newExistingAccount'UndsUnds'EVM'Unds'InternalOp'Unds'Int{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen6 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen7 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen8 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen9 : SortNonceCell{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarORIGFROM : SortInt{}, \exists{SortBool{}}(VarORIGTO : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarVALUE : SortInt{}, VarORIGFROM : SortInt{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}))))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarORIGFROM : SortInt{}), Var'Unds'Gen0 : SortCodeCell{}, Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarORIGTO : SortInt{}), Var'Unds'Gen5 : SortCodeCell{}, Var'Unds'Gen6 : SortStorageCell{}, Var'Unds'Gen7 : SortOrigStorageCell{}, Var'Unds'Gen8 : SortTransientStorageCell{}, Var'Unds'Gen9 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{}))), \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'transferFunds'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{})))))))))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Var'Unds'Gen0 : SortCodeCell{}, Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblBALANCE'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarVALUE : SortInt{}, VarBAL : SortInt{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Var'Unds'Gen0 : SortCodeCell{}, Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkBalanceUnderflow'UndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int{}(VarACCT : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarORIGFROM : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarVALUE : SortInt{}, VarORIGFROM : SortInt{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarORIGFROM : SortInt{}), Var'Unds'Gen0 : SortCodeCell{}, Var'Unds'Gen1 : SortStorageCell{}, Var'Unds'Gen2 : SortOrigStorageCell{}, Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'transferFunds'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int{}(VarACCT : SortInt{}, VarACCT : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortMap{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarREST : SortList{}, \exists{SortBool{}}(VarSTORAGE : SortMap{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen1 : SortBalanceCell{}, Var'Unds'Gen2 : SortCodeCell{}, Lbl'-LT-'storage'-GT-'{}(VarSTORAGE : SortMap{}), Lbl'-LT-'origStorage'-GT-'{}(Var'Unds'Gen0 : SortMap{}), Var'Unds'Gen3 : SortTransientStorageCell{}, Var'Unds'Gen4 : SortNonceCell{})), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'finalizeStorage{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(VarACCT : SortInt{})), VarREST : SortList{}))), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortMap{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortMap{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarCODE : SortBytes{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortInt{}, SortBool{}}(\dv{SortInt{}}("0"), LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarCODE : SortBytes{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen2 : SortBalanceCell{}, Lbl'-LT-'code'-GT-'{}(inj{SortBytes{}, SortAccountCode{}}(VarCODE : SortBytes{})), Lbl'-LT-'storage'-GT-'{}(Var'Unds'Gen0 : SortMap{}), Lbl'-LT-'origStorage'-GT-'{}(Var'Unds'Gen1 : SortMap{}), Var'Unds'Gen3 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(\dv{SortInt{}}("0")))), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'newExistingAccount'UndsUnds'EVM'Unds'InternalOp'Unds'Int{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \exists{SortBool{}}(VarCODE : SortAccountCode{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Lbl'-LT-'code'-GT-'{}(VarCODE : SortAccountCode{}), Var'Unds'Gen0 : SortStorageCell{}, Var'Unds'Gen1 : SortOrigStorageCell{}, Var'Unds'Gen2 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Hash'accountNonexistent{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \exists{SortBool{}}(VarCODE : SortBytes{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortBytes{}, SortKItem{}}(VarCODE : SortBytes{}), dotk{}()), kseq{}(inj{SortBytes{}, SortKItem{}}(\dv{SortBytes{}}("")), dotk{}())), Lbl'UndsEqlsEqls'Int'Unds'{}(VarNONCE : SortInt{}, \dv{SortInt{}}("0"))), Lbl'UndsEqlsEqls'Int'Unds'{}(VarBAL : SortInt{}, \dv{SortInt{}}("0")))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar5 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Lbl'-LT-'code'-GT-'{}(inj{SortBytes{}, SortAccountCode{}}(VarCODE : SortBytes{})), Var'Unds'Gen0 : SortStorageCell{}, Var'Unds'Gen1 : SortOrigStorageCell{}, Var'Unds'Gen2 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar5 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblEXTCODEHASH'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar5 : SortMessageCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortTxNonceCell{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortTxGasPriceCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortTxGasLimitCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortToCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortValueCell{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortSigVCell{}, \exists{SortBool{}}(Var'Unds'Gen6 : SortSigRCell{}, \exists{SortBool{}}(Var'Unds'Gen7 : SortSigSCell{}, \exists{SortBool{}}(Var'Unds'Gen8 : SortDataCell{}, \exists{SortBool{}}(Var'Unds'Gen9 : SortTxAccessCell{}, \exists{SortBool{}}(Var'Unds'Gen10 : SortTxChainIDCell{}, \exists{SortBool{}}(Var'Unds'Gen11 : SortTxPriorityFeeCell{}, \exists{SortBool{}}(Var'Unds'Gen12 : SortTxMaxFeeCell{}, \exists{SortBool{}}(Var'Unds'Gen13 : SortTxTypeCell{}, \exists{SortBool{}}(VarMsgId : SortInt{}, \exists{SortBool{}}(VarREST : SortList{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblMessageCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'msgID'-GT-'{}(VarMsgId : SortInt{}), Var'Unds'DotVar5 : SortMessageCellMap{})), \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'finalizeTx{}(\dv{SortBool{}}("false"))), Var'Unds'DotVar2 : SortK{})), \and{SortBool{}}(\equals{SortMessageCellMap{}, SortBool{}}(VarMESSAGES'Unds'CELL : SortMessageCellMap{}, Lbl'Unds'MessageCellMap'Unds'{}(LblMessageCellMapItem{}(Lbl'-LT-'msgID'-GT-'{}(VarMsgId : SortInt{}), Lbl'-LT-'message'-GT-'{}(Lbl'-LT-'msgID'-GT-'{}(VarMsgId : SortInt{}), Var'Unds'Gen0 : SortTxNonceCell{}, Var'Unds'Gen1 : SortTxGasPriceCell{}, Var'Unds'Gen2 : SortTxGasLimitCell{}, Var'Unds'Gen3 : SortToCell{}, Var'Unds'Gen4 : SortValueCell{}, Var'Unds'Gen5 : SortSigVCell{}, Var'Unds'Gen6 : SortSigRCell{}, Var'Unds'Gen7 : SortSigSCell{}, Var'Unds'Gen8 : SortDataCell{}, Var'Unds'Gen9 : SortTxAccessCell{}, Var'Unds'Gen10 : SortTxChainIDCell{}, Var'Unds'Gen11 : SortTxPriorityFeeCell{}, Var'Unds'Gen12 : SortTxMaxFeeCell{}, Var'Unds'Gen13 : SortTxTypeCell{})), Var'Unds'DotVar5 : SortMessageCellMap{})), \equals{SortList{}, SortBool{}}(VarTXPENDING'Unds'CELL : SortList{}, Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(VarMsgId : SortInt{})), VarREST : SortList{}))))))))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar6 : SortMap{}, \exists{SortBool{}}(VarACCT : SortAccount{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarTS : SortSet{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(inj{SortAccount{}, SortKItem{}}(VarACCT : SortAccount{}), Var'Unds'DotVar6 : SortMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasaccesslist'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(inj{SortAccount{}, SortKItem{}}(VarACCT : SortAccount{}), Var'Unds'DotVar6 : SortMap{})), \and{SortBool{}}(\equals{SortMap{}, SortBool{}}(VarACCESSEDSTORAGE'Unds'CELL : SortMap{}, Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortAccount{}, SortKItem{}}(VarACCT : SortAccount{}), inj{SortSet{}, SortKItem{}}(VarTS : SortSet{})), Var'Unds'DotVar6 : SortMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessStorage'UndsUndsUnds'EVM'Unds'KItem'Unds'Account'Unds'Int{}(VarACCT : SortAccount{}, VarINDEX : SortInt{}), Var'Unds'DotVar2 : SortK{})))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortAccountCode{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen28 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarOUT : SortBytes{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen24 : SortBalanceCell{}, Lbl'-LT-'code'-GT-'{}(Var'Unds'Gen0 : SortAccountCode{}), Var'Unds'Gen25 : SortStorageCell{}, Var'Unds'Gen26 : SortOrigStorageCell{}, Var'Unds'Gen27 : SortTransientStorageCell{}, Var'Unds'Gen28 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'finishCodeDeposit'UndsUndsUnds'EVM'Unds'KItem'Unds'Int'Unds'Bytes{}(VarACCT : SortInt{}, VarOUT : SortBytes{}), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen6 : SortJSON{}, \exists{SortBool{}}(Var'Unds'Gen7 : SortJSONs{}, \exists{SortBool{}}(Var'Unds'Gen37 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen38 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen39 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen40 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen41 : SortNonceCell{}, \exists{SortBool{}}(Var'Unds'Gen42 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen43 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen44 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen45 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen46 : SortNonceCell{}, \exists{SortBool{}}(VarMINBAL : SortInt{}, \exists{SortBool{}}(VarOMMBAL : SortInt{}, \exists{SortBool{}}(VarOMMER : SortInt{}, \exists{SortBool{}}(VarOMMNUM : SortInt{}, \exists{SortBool{}}(VarREST : SortJSONs{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarOMMER : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarOMMER : SortInt{}, VarCOINBASE'Unds'CELL : SortInt{})))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarOMMER : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarMINBAL : SortInt{}), Var'Unds'Gen37 : SortCodeCell{}, Var'Unds'Gen38 : SortStorageCell{}, Var'Unds'Gen39 : SortOrigStorageCell{}, Var'Unds'Gen40 : SortTransientStorageCell{}, Var'Unds'Gen41 : SortNonceCell{})), Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarOMMER : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarOMMER : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarOMMBAL : SortInt{}), Var'Unds'Gen42 : SortCodeCell{}, Var'Unds'Gen43 : SortStorageCell{}, Var'Unds'Gen44 : SortOrigStorageCell{}, Var'Unds'Gen45 : SortTransientStorageCell{}, Var'Unds'Gen46 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{}))), \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortEthereumCommand{}, SortKItem{}}(Lbl'Hash'rewardOmmers{}(LblJSONs{}(LblJSONList{}(LblJSONs{}(Var'Unds'Gen0 : SortJSON{}, LblJSONs{}(Var'Unds'Gen1 : SortJSON{}, LblJSONs{}(inj{SortInt{}, SortJSON{}}(VarOMMER : SortInt{}), LblJSONs{}(Var'Unds'Gen2 : SortJSON{}, LblJSONs{}(Var'Unds'Gen3 : SortJSON{}, LblJSONs{}(Var'Unds'Gen4 : SortJSON{}, LblJSONs{}(Var'Unds'Gen5 : SortJSON{}, LblJSONs{}(Var'Unds'Gen6 : SortJSON{}, LblJSONs{}(inj{SortInt{}, SortJSON{}}(VarOMMNUM : SortInt{}), Var'Unds'Gen7 : SortJSONs{})))))))))), VarREST : SortJSONs{}))), Var'Unds'DotVar2 : SortK{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarCOINBASE'Unds'CELL : SortInt{}, VarOMMER : SortInt{})))))))))))))))))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen21 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen22 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarINITCODE : SortBytes{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTTO : SortInt{}), Var'Unds'Gen21 : SortBalanceCell{}, Var'Unds'Gen22 : SortCodeCell{}, Var'Unds'Gen23 : SortStorageCell{}, Var'Unds'Gen24 : SortOrigStorageCell{}, Var'Unds'Gen25 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'mkCreate'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int'Unds'Bytes{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{}, VarINITCODE : SortBytes{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen22 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \exists{SortBool{}}(VarMEMWIDTH : SortInt{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblnotBool'Unds'{}(Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasmaxinitcodesize'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{})), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarMEMWIDTH : SortInt{}, Lbl'Unds-LT-Unds-GT-Unds'SCHEDULE'Unds'Int'Unds'ScheduleConst'Unds'Schedule{}(LblmaxInitCodeSize'Unds'SCHEDULE'Unds'ScheduleConst{}(), VarSCHEDULE'Unds'CELL : SortSchedule{}))))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen22 : SortBalanceCell{}, Var'Unds'Gen23 : SortCodeCell{}, Var'Unds'Gen24 : SortStorageCell{}, Var'Unds'Gen25 : SortOrigStorageCell{}, Var'Unds'Gen26 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblCREATE'Unds'EVM'Unds'TernStackOp{}(), VarVALUE : SortInt{}, VarMEMSTART : SortInt{}, VarMEMWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarNEW : SortInt{}, \exists{SortBool{}}(VarSTORAGE : SortMap{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen23 : SortBalanceCell{}, Var'Unds'Gen24 : SortCodeCell{}, Lbl'-LT-'storage'-GT-'{}(VarSTORAGE : SortMap{}), Var'Unds'Gen25 : SortOrigStorageCell{}, Var'Unds'Gen26 : SortTransientStorageCell{}, Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSSTORE'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, VarNEW : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarSTORAGE : SortMap{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen23 : SortBalanceCell{}, Var'Unds'Gen24 : SortCodeCell{}, Lbl'-LT-'storage'-GT-'{}(VarSTORAGE : SortMap{}), Var'Unds'Gen25 : SortOrigStorageCell{}, Var'Unds'Gen26 : SortTransientStorageCell{}, Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSLOAD'Unds'EVM'Unds'UnStackOp{}(), VarINDEX : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarNEW : SortInt{}, \exists{SortBool{}}(VarTSTORAGE : SortMap{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen23 : SortBalanceCell{}, Var'Unds'Gen24 : SortCodeCell{}, Var'Unds'Gen25 : SortStorageCell{}, Var'Unds'Gen26 : SortOrigStorageCell{}, Lbl'-LT-'transientStorage'-GT-'{}(VarTSTORAGE : SortMap{}), Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblTSTORE'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, VarNEW : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarTSTORAGE : SortMap{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen23 : SortBalanceCell{}, Var'Unds'Gen24 : SortCodeCell{}, Var'Unds'Gen25 : SortStorageCell{}, Var'Unds'Gen26 : SortOrigStorageCell{}, Lbl'-LT-'transientStorage'-GT-'{}(VarTSTORAGE : SortMap{}), Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblTLOAD'Unds'EVM'Unds'UnStackOp{}(), VarINDEX : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortTransientStorageCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarNONCE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'andBool'Unds'{}(Lbl'Unds-LT-Eqls'Int'Unds'{}(\dv{SortInt{}}("0"), VarNONCE : SortInt{}), Lbl'Unds-LT-'Int'Unds'{}(VarNONCE : SortInt{}, \dv{SortInt{}}("18446744073709551615")))), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen23 : SortBalanceCell{}, Var'Unds'Gen24 : SortCodeCell{}, Var'Unds'Gen25 : SortStorageCell{}, Var'Unds'Gen26 : SortOrigStorageCell{}, Var'Unds'Gen27 : SortTransientStorageCell{}, Lbl'-LT-'nonce'-GT-'{}(VarNONCE : SortInt{}))), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkNonceExceeded'UndsUnds'EVM'Unds'InternalOp'Unds'Int{}(VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \exists{SortBool{}}(VarPGM : SortBytes{}, \exists{SortBool{}}(VarPGMSTART : SortInt{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen23 : SortBalanceCell{}, Lbl'-LT-'code'-GT-'{}(inj{SortBytes{}, SortAccountCode{}}(VarPGM : SortBytes{})), Var'Unds'Gen24 : SortStorageCell{}, Var'Unds'Gen25 : SortOrigStorageCell{}, Var'Unds'Gen26 : SortTransientStorageCell{}, Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'QuadStackOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblEXTCODECOPY'Unds'EVM'Unds'QuadStackOp{}(), VarACCT : SortInt{}, VarMEMSTART : SortInt{}, VarPGMSTART : SortInt{}, VarWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Var'Unds'Gen23 : SortCodeCell{}, Var'Unds'Gen24 : SortStorageCell{}, Var'Unds'Gen25 : SortOrigStorageCell{}, Var'Unds'Gen26 : SortTransientStorageCell{}, Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortNullStackOp{}, SortKItem{}}(LblSELFBALANCE'Unds'EVM'Unds'NullStackOp{}()), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen23 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen24 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(VarBAL : SortInt{}, VarVALUE : SortInt{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Var'Unds'Gen23 : SortCodeCell{}, Var'Unds'Gen24 : SortStorageCell{}, Var'Unds'Gen25 : SortOrigStorageCell{}, Var'Unds'Gen26 : SortTransientStorageCell{}, Var'Unds'Gen27 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkBalanceUnderflow'UndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int{}(VarACCT : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar7 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen29 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen30 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen31 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen32 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen33 : SortNonceCell{}, \exists{SortBool{}}(VarM : SortMap{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(\dv{SortInt{}}("339909022928299415537769066420252604268194818")), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasbeaconroot'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(\dv{SortInt{}}("339909022928299415537769066420252604268194818")), Var'Unds'DotVar7 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(\dv{SortInt{}}("339909022928299415537769066420252604268194818")), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(\dv{SortInt{}}("339909022928299415537769066420252604268194818")), Var'Unds'Gen29 : SortBalanceCell{}, Var'Unds'Gen30 : SortCodeCell{}, Lbl'-LT-'storage'-GT-'{}(VarM : SortMap{}), Var'Unds'Gen31 : SortOrigStorageCell{}, Var'Unds'Gen32 : SortTransientStorageCell{}, Var'Unds'Gen33 : SortNonceCell{})), Var'Unds'DotVar7 : SortAccountCellMap{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortEthereumCommand{}, SortKItem{}}(Lbl'Hash'executeBeaconRoots{}()), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar8 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen28 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen29 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen30 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen31 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(Var'Unds'Gen0 : SortInt{}), Var'Unds'Gen27 : SortCodeCell{}, Var'Unds'Gen28 : SortStorageCell{}, Var'Unds'Gen29 : SortOrigStorageCell{}, Var'Unds'Gen30 : SortTransientStorageCell{}, Var'Unds'Gen31 : SortNonceCell{})), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSELFDESTRUCT'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar8 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortBalanceCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen28 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarNEW : SortInt{}, \exists{SortBool{}}(VarORIGSTORAGE : SortMap{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarSTORAGE : SortMap{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblnotBool'Unds'{}(Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhassstorestipend'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHED : SortSchedule{})), Lbl'Unds-LT-'Gas'UndsUnds'GAS-SYNTAX'Unds'Bool'Unds'Gas'Unds'Gas{}(inj{SortInt{}, SortGas{}}(Lbl'Unds-LT-Unds-GT-Unds'SCHEDULE'Unds'Int'Unds'ScheduleConst'Unds'Schedule{}(LblGcallstipend'Unds'SCHEDULE'Unds'ScheduleConst{}(), VarSCHED : SortSchedule{})), VarGAS'Unds'CELL : SortGas{}))), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'Gen25 : SortBalanceCell{}, Var'Unds'Gen26 : SortCodeCell{}, Lbl'-LT-'storage'-GT-'{}(VarSTORAGE : SortMap{}), Lbl'-LT-'origStorage'-GT-'{}(VarORIGSTORAGE : SortMap{}), Var'Unds'Gen27 : SortTransientStorageCell{}, Var'Unds'Gen28 : SortNonceCell{})), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSSTORE'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, VarNEW : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar8 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen25 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen28 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen29 : SortNonceCell{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarBAL : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCTFROM : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBAL : SortInt{}), Var'Unds'Gen25 : SortCodeCell{}, Var'Unds'Gen26 : SortStorageCell{}, Var'Unds'Gen27 : SortOrigStorageCell{}, Var'Unds'Gen28 : SortTransientStorageCell{}, Var'Unds'Gen29 : SortNonceCell{})), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSELFDESTRUCT'Unds'EVM'Unds'UnStackOp{}(), VarACCTTO : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar8 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen26 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen27 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen28 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen29 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen30 : SortNonceCell{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarBALFROM : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar8 : SortAccountCellMap{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarACCT : SortInt{}, VarACCTTO : SortInt{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarACCT : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarBALFROM : SortInt{}), Var'Unds'Gen26 : SortCodeCell{}, Var'Unds'Gen27 : SortStorageCell{}, Var'Unds'Gen28 : SortOrigStorageCell{}, Var'Unds'Gen29 : SortTransientStorageCell{}, Var'Unds'Gen30 : SortNonceCell{})), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSELFDESTRUCT'Unds'EVM'Unds'UnStackOp{}(), VarACCTTO : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'DotVar8 : SortAccountCellMap{}, \exists{SortBool{}}(Var'Unds'Gen32 : SortCodeCell{}, \exists{SortBool{}}(Var'Unds'Gen33 : SortStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen34 : SortOrigStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen35 : SortTransientStorageCell{}, \exists{SortBool{}}(Var'Unds'Gen36 : SortNonceCell{}, \exists{SortBool{}}(VarMINBAL : SortInt{}, \exists{SortBool{}}(VarOMMERS : SortJSONs{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblAccountCellMap'Coln'in'Unds'keys{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortAccountCellMap{}, SortBool{}}(VarACCOUNTS'Unds'CELL : SortAccountCellMap{}, Lbl'Unds'AccountCellMap'Unds'{}(LblAccountCellMapItem{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Lbl'-LT-'account'-GT-'{}(Lbl'-LT-'acctID'-GT-'{}(VarCOINBASE'Unds'CELL : SortInt{}), Lbl'-LT-'balance'-GT-'{}(VarMINBAL : SortInt{}), Var'Unds'Gen32 : SortCodeCell{}, Var'Unds'Gen33 : SortStorageCell{}, Var'Unds'Gen34 : SortOrigStorageCell{}, Var'Unds'Gen35 : SortTransientStorageCell{}, Var'Unds'Gen36 : SortNonceCell{})), Var'Unds'DotVar8 : SortAccountCellMap{})), \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortEthereumCommand{}, SortKItem{}}(Lbl'Hash'finalizeBlock'Unds'EVM'Unds'EthereumCommand{}()), Var'Unds'DotVar2 : SortK{})), \equals{SortJSON{}, SortBool{}}(VarOMMERBLOCKHEADERS'Unds'CELL : SortJSON{}, LblJSONList{}(VarOMMERS : SortJSONs{})))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'G : SortGas{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortGas{}, SortKItem{}}(Var'Unds'G : SortGas{}), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'deductMemoryGas'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'GCAP : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarARGSTART : SortInt{}, \exists{SortBool{}}(VarARGWIDTH : SortInt{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallSixOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblDELEGATECALL'Unds'EVM'Unds'CallSixOp{}(), Var'Unds'GCAP : SortInt{}, VarACCTTO : SortInt{}, VarARGSTART : SortInt{}, VarARGWIDTH : SortInt{}, VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'GCAP : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarARGSTART : SortInt{}, \exists{SortBool{}}(VarARGWIDTH : SortInt{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallSixOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblSTATICCALL'Unds'EVM'Unds'CallSixOp{}(), Var'Unds'GCAP : SortInt{}, VarACCTTO : SortInt{}, VarARGSTART : SortInt{}, VarARGWIDTH : SortInt{}, VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'GCAP : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarARGSTART : SortInt{}, \exists{SortBool{}}(VarARGWIDTH : SortInt{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblCALL'Unds'EVM'Unds'CallOp{}(), Var'Unds'GCAP : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{}, VarARGSTART : SortInt{}, VarARGWIDTH : SortInt{}, VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'GCAP : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarARGSTART : SortInt{}, \exists{SortBool{}}(VarARGWIDTH : SortInt{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblCALLCODE'Unds'EVM'Unds'CallOp{}(), Var'Unds'GCAP : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{}, VarARGSTART : SortInt{}, VarARGWIDTH : SortInt{}, VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortAccount{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasaccesslist'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessStorage'UndsUndsUnds'EVM'Unds'KItem'Unds'Account'Unds'Int{}(Var'Unds'Gen0 : SortAccount{}, Var'Unds'Gen1 : SortInt{}), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortBytes{}, \exists{SortBool{}}(VarA : SortList{}, \exists{SortBool{}}(VarB : SortList{}, \exists{SortBool{}}(VarLEN : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecpairing{}(VarA : SortList{}, VarB : SortList{}, VarLEN : SortInt{}, Var'Unds'Gen0 : SortBytes{}, VarLEN : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortBytes{}, \exists{SortBool{}}(VarACCT : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'finishCodeDeposit'UndsUndsUnds'EVM'Unds'KItem'Unds'Int'Unds'Bytes{}(VarACCT : SortInt{}, Var'Unds'Gen1 : SortBytes{}), Var'Unds'DotVar2 : SortK{}))), \and{SortBool{}}(\equals{SortSchedule{}, SortBool{}}(VarSCHEDULE'Unds'CELL : SortSchedule{}, LblFRONTIER'Unds'EVM{}()), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortExceptionalStatusCode{}, SortStatusCode{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{})))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'codeDeposit'UndsUnds'EVM'Unds'KItem'Unds'Int{}(Var'Unds'Gen1 : SortInt{}), Var'Unds'DotVar2 : SortK{}))), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortExceptionalStatusCode{}, SortStatusCode{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortBytes{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'finishCodeDeposit'UndsUndsUnds'EVM'Unds'KItem'Unds'Int'Unds'Bytes{}(Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortBytes{}), Var'Unds'DotVar2 : SortK{}))), \and{SortBool{}}(\equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortExceptionalStatusCode{}, SortStatusCode{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{})), \not{SortBool{}}(\equals{SortK{}, SortBool{}}(kseq{}(inj{SortSchedule{}, SortKItem{}}(VarSCHEDULE'Unds'CELL : SortSchedule{}), dotk{}()), kseq{}(inj{SortSchedule{}, SortKItem{}}(LblFRONTIER'Unds'EVM{}()), dotk{}()))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'return'UndsUndsUnds'EVM'Unds'KItem'Unds'Int'Unds'Int{}(Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{}), Var'Unds'DotVar2 : SortK{}))), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortExceptionalStatusCode{}, SortStatusCode{}}(Var'Unds'Gen0 : SortExceptionalStatusCode{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortGas{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortGas{}, SortKItem{}}(Var'Unds'Gen0 : SortGas{}), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'deductGas'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortGas{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'refund'UndsUnds'EVM'Unds'InternalOp'Unds'Gas{}(Var'Unds'Gen0 : SortGas{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'codeDeposit'UndsUnds'EVM'Unds'KItem'Unds'Int{}(Var'Unds'Gen0 : SortInt{}), Var'Unds'DotVar2 : SortK{}))), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortEndStatusCode{}, SortStatusCode{}}(LblEVMC'Unds'REVERT'Unds'NETWORK'Unds'EndStatusCode{}()))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(inj{SortInt{}, SortKItem{}}(Var'Unds'Gen0 : SortInt{}), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblPOP'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInvalidOp{}, SortKItem{}}(LblUNDEFINED'LParUndsRParUnds'EVM'Unds'InvalidOp'Unds'Int{}(Var'Unds'Gen0 : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarGCAP : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallSixOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblDELEGATECALL'Unds'EVM'Unds'CallSixOp{}(), VarGCAP : SortInt{}, VarACCTTO : SortInt{}, Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{}, Var'Unds'Gen3 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarGCAP : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCTFROM : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblCALLCODE'Unds'EVM'Unds'CallOp{}(), VarGCAP : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{}, Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{}, Var'Unds'Gen3 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarGCAP : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallSixOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblSTATICCALL'Unds'EVM'Unds'CallSixOp{}(), VarGCAP : SortInt{}, VarACCTTO : SortInt{}, Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{}, Var'Unds'Gen3 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarGCAP : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'CallOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblCALL'Unds'EVM'Unds'CallOp{}(), VarGCAP : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{}, Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{}, Var'Unds'Gen3 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'QuadStackOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblEXTCODECOPY'Unds'EVM'Unds'QuadStackOp{}(), VarACCT : SortInt{}, Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblADDMOD'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblMULMOD'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'QuadStackOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblCREATE2'Unds'EVM'Unds'QuadStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, VarWIDTH : SortInt{}, Var'Unds'Gen2 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'QuadStackOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblEXTCODECOPY'Unds'EVM'Unds'QuadStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, Var'Unds'Gen2 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhassstorestipend'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHED : SortSchedule{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Gas'UndsUnds'GAS-SYNTAX'Unds'Bool'Unds'Gas'Unds'Gas{}(VarGAS'Unds'CELL : SortGas{}, inj{SortInt{}, SortGas{}}(Lbl'Unds-LT-Unds-GT-Unds'SCHEDULE'Unds'Int'Unds'ScheduleConst'Unds'Schedule{}(LblGcallstipend'Unds'SCHEDULE'Unds'ScheduleConst{}(), VarSCHED : SortSchedule{}))))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSSTORE'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblADD'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblAND'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblBYTE'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblDIV'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEQ'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEVMOR'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblGT'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblJUMPI'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblLT'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMOD'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMSTORE'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMSTORE8'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMUL'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblRETURN'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblREVERT'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSAR'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSDIV'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSGT'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSHL'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSHR'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSIGNEXTEND'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSLT'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSMOD'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSUB'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblTSTORE'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblXOR'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblCALLDATACOPY'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblCODECOPY'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblCREATE'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblMCOPY'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblRETURNDATACOPY'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'Gen0 : SortInt{}, Var'Unds'Gen1 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortWordStack{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'StackOp'Unds'WordStack{}(LblDUP{}(Var'Unds'Gen0 : SortInt{}), Var'Unds'Gen1 : SortWordStack{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortWordStack{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'StackOp'Unds'WordStack{}(LblSWAP{}(Var'Unds'Gen0 : SortInt{}), Var'Unds'Gen1 : SortWordStack{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSSTORE'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarN : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(inj{SortLogOp{}, SortBinStackOp{}}(LblLOG{}(VarN : SortInt{})), Var'Unds'Gen0 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblBALANCE'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblBLOCKHASH'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblCALLDATALOAD'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblEXTCODEHASH'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblEXTCODESIZE'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblISZERO'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblJUMP'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblMLOAD'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblNOT'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblPOP'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblTLOAD'Unds'EVM'Unds'UnStackOp{}(), Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPushOp{}, SortOpCode{}}(LblPUSH{}(Var'Unds'Gen0 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarW1 : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(\dv{SortInt{}}("0"), VarW1 : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEXP'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, VarW1 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarW1 : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarW1 : SortInt{}, \dv{SortInt{}}("0"))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEXP'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, VarW1 : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSHA3'Unds'EVM'Unds'BinStackOp{}(), Var'Unds'Gen0 : SortInt{}, VarWIDTH : SortInt{})))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortKItem{}, \exists{SortBool{}}(VarREST : SortList{}, \and{SortBool{}}(\equals{SortList{}, SortBool{}}(VarCALLSTACK'Unds'CELL : SortList{}, Lbl'Unds'List'Unds'{}(LblListItem{}(Var'Unds'Gen0 : SortKItem{}), VarREST : SortList{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'dropCallStack'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortKItem{}, \exists{SortBool{}}(VarREST : SortList{}, \and{SortBool{}}(\equals{SortList{}, SortBool{}}(VarINTERIMSTATES'Unds'CELL : SortList{}, Lbl'Unds'List'Unds'{}(LblListItem{}(Var'Unds'Gen0 : SortKItem{}), VarREST : SortList{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'dropWorldState'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortList{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortList{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortBytes{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortInt{}, \exists{SortBool{}}(VarAK : SortG1Point{}, \exists{SortBool{}}(VarBK : SortG2Point{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisValidG2PointWrapper{}(VarBK : SortG2Point{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisValidPointWrapper{}(VarAK : SortG1Point{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkPoint'Unds'EVM'Unds'InternalOp{}()), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecpairing{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortG1Point{}, SortKItem{}}(VarAK : SortG1Point{})), Var'Unds'Gen0 : SortList{}), Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortG2Point{}, SortKItem{}}(VarBK : SortG2Point{})), Var'Unds'Gen1 : SortList{}), Var'Unds'Gen2 : SortInt{}, Var'Unds'Gen3 : SortBytes{}, Var'Unds'Gen4 : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortList{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortList{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortInt{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortBytes{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortInt{}, \exists{SortBool{}}(VarAK : SortG1Point{}, \exists{SortBool{}}(VarBK : SortG2Point{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblnotBool'Unds'{}(LblisValidPointWrapper{}(VarAK : SortG1Point{})), LblnotBool'Unds'{}(LblisValidG2PointWrapper{}(VarBK : SortG2Point{})))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkPoint'Unds'EVM'Unds'InternalOp{}()), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecpairing{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortG1Point{}, SortKItem{}}(VarAK : SortG1Point{})), Var'Unds'Gen0 : SortList{}), Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortG2Point{}, SortKItem{}}(VarBK : SortG2Point{})), Var'Unds'Gen1 : SortList{}), Var'Unds'Gen2 : SortInt{}, Var'Unds'Gen3 : SortBytes{}, Var'Unds'Gen4 : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortList{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortList{}, \exists{SortBool{}}(VarDATA : SortBytes{}, \exists{SortBool{}}(VarI : SortInt{}, \exists{SortBool{}}(VarLEN : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecpairing{}(Var'Unds'Gen0 : SortList{}, Var'Unds'Gen1 : SortList{}, VarI : SortInt{}, VarDATA : SortBytes{}, VarLEN : SortInt{})), Var'Unds'DotVar2 : SortK{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarI : SortInt{}, VarLEN : SortInt{}))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortOpCode{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(inj{SortOpCode{}, SortKItem{}}(Var'Unds'Gen0 : SortOpCode{}), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortOpCode{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'endBasicBlock'Unds'EVM'Unds'InternalOp{}()), kseq{}(inj{SortOpCode{}, SortKItem{}}(Var'Unds'Gen0 : SortOpCode{}), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortOpCode{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortOpCode{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gas'LSqBUndsCommUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode'Unds'OpCode{}(Var'Unds'Gen0 : SortOpCode{}, Var'Unds'Gen1 : SortOpCode{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(Var'Unds'Gen0 : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblECREC'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(Var'Unds'Gen0 : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblID'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(Var'Unds'Gen0 : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblRIP160'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(Var'Unds'Gen0 : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblSHA256'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen0 : SortSchedule{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(Var'Unds'Gen0 : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSLOAD'Unds'EVM'Unds'UnStackOp{}(), VarINDEX : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen1 : SortProgramCell{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortJumpDestsCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortIdCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortCallerCell{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortCallDataCell{}, \exists{SortBool{}}(Var'Unds'Gen6 : SortCallValueCell{}, \exists{SortBool{}}(Var'Unds'Gen7 : SortWordStackCell{}, \exists{SortBool{}}(Var'Unds'Gen8 : SortLocalMemCell{}, \exists{SortBool{}}(Var'Unds'Gen9 : SortPcCell{}, \exists{SortBool{}}(Var'Unds'Gen10 : SortGasCell{}, \exists{SortBool{}}(Var'Unds'Gen11 : SortMemoryUsedCell{}, \exists{SortBool{}}(Var'Unds'Gen12 : SortCallGasCell{}, \exists{SortBool{}}(Var'Unds'Gen13 : SortStaticCell{}, \exists{SortBool{}}(Var'Unds'Gen14 : SortCallDepthCell{}, \exists{SortBool{}}(VarREST : SortList{}, \and{SortBool{}}(\equals{SortList{}, SortBool{}}(VarCALLSTACK'Unds'CELL : SortList{}, Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortCallStateCell{}, SortKItem{}}(Lbl'-LT-'callState'-GT-'{}(Var'Unds'Gen1 : SortProgramCell{}, Var'Unds'Gen2 : SortJumpDestsCell{}, Var'Unds'Gen3 : SortIdCell{}, Var'Unds'Gen4 : SortCallerCell{}, Var'Unds'Gen5 : SortCallDataCell{}, Var'Unds'Gen6 : SortCallValueCell{}, Var'Unds'Gen7 : SortWordStackCell{}, Var'Unds'Gen8 : SortLocalMemCell{}, Var'Unds'Gen9 : SortPcCell{}, Var'Unds'Gen10 : SortGasCell{}, Var'Unds'Gen11 : SortMemoryUsedCell{}, Var'Unds'Gen12 : SortCallGasCell{}, Var'Unds'Gen13 : SortStaticCell{}, Var'Unds'Gen14 : SortCallDepthCell{}))), VarREST : SortList{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'popCallStack'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'Gen2 : SortSelfDestructCell{}, \exists{SortBool{}}(Var'Unds'Gen3 : SortLogCell{}, \exists{SortBool{}}(Var'Unds'Gen4 : SortRefundCell{}, \exists{SortBool{}}(Var'Unds'Gen5 : SortAccessedAccountsCell{}, \exists{SortBool{}}(Var'Unds'Gen6 : SortAccessedStorageCell{}, \exists{SortBool{}}(VarACCTDATA : SortAccountCellMap{}, \exists{SortBool{}}(VarREST : SortList{}, \and{SortBool{}}(\equals{SortList{}, SortBool{}}(VarINTERIMSTATES'Unds'CELL : SortList{}, Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortAccounts{}, SortKItem{}}(Lbl'LBraUndsPipeUndsRBraUnds'EVM'Unds'Accounts'Unds'AccountsCell'Unds'SubstateCell{}(Lbl'-LT-'accounts'-GT-'{}(VarACCTDATA : SortAccountCellMap{}), Lbl'-LT-'substate'-GT-'{}(Var'Unds'Gen2 : SortSelfDestructCell{}, Var'Unds'Gen3 : SortLogCell{}, Var'Unds'Gen4 : SortRefundCell{}, Var'Unds'Gen5 : SortAccessedAccountsCell{}, Var'Unds'Gen6 : SortAccessedStorageCell{})))), VarREST : SortList{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'popWorldState'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'MEMSTART : SortInt{}, \exists{SortBool{}}(VarDATASTART : SortInt{}, \exists{SortBool{}}(VarDATAWIDTH : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarOUTPUT'Unds'CELL : SortBytes{}), Lbl'UndsPlus'Int'Unds'{}(VarDATASTART : SortInt{}, VarDATAWIDTH : SortInt{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblRETURNDATACOPY'Unds'EVM'Unds'TernStackOp{}(), Var'Unds'MEMSTART : SortInt{}, VarDATASTART : SortInt{}, VarDATAWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'S : SortInt{}, \exists{SortBool{}}(VarP : SortG1Point{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblisValidPointWrapper{}(VarP : SortG1Point{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecmul{}(VarP : SortG1Point{}, Var'Unds'S : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(Var'Unds'WS : SortWordStack{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \exists{SortBool{}}(VarW1 : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisAddr2Op{}(VarOP : SortOpCode{})), \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'addr'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(VarOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{})), \equals{SortWordStack{}, SortBool{}}(VarWS : SortWordStack{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW1 : SortInt{}, Var'Unds'WS : SortWordStack{})))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortAccount{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(inj{SortAccount{}, SortKItem{}}(VarACCT : SortAccount{}), VarACCESSEDSTORAGE'Unds'CELL : SortMap{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasaccesslist'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessStorage'UndsUndsUnds'EVM'Unds'KItem'Unds'Account'Unds'Int{}(VarACCT : SortAccount{}, VarINDEX : SortInt{}), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Hash'isValidCode{}(VarOUTPUT'Unds'CELL : SortBytes{}, VarSCHEDULE'Unds'CELL : SortSchedule{})), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarOUTPUT'Unds'CELL : SortBytes{}), Lbl'Unds-LT-Unds-GT-Unds'SCHEDULE'Unds'Int'Unds'ScheduleConst'Unds'Schedule{}(LblmaxCodeSize'Unds'SCHEDULE'Unds'ScheduleConst{}(), VarSCHEDULE'Unds'CELL : SortSchedule{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'mkCodeDeposit'UndsUnds'EVM'Unds'KItem'Unds'Int{}(VarACCT : SortInt{}), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'codeDeposit'UndsUnds'EVM'Unds'KItem'Unds'Int{}(VarACCT : SortInt{}), Var'Unds'DotVar2 : SortK{}))), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortEndStatusCode{}, SortStatusCode{}}(LblEVMC'Unds'SUCCESS'Unds'NETWORK'Unds'EndStatusCode{}()))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \exists{SortBool{}}(VarMEMWIDTH : SortInt{}, \exists{SortBool{}}(VarN : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarN : SortInt{}, LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")))), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(inj{SortLogOp{}, SortBinStackOp{}}(LblLOG{}(VarN : SortInt{})), VarMEMSTART : SortInt{}, VarMEMWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \exists{SortBool{}}(VarMEMWIDTH : SortInt{}, \exists{SortBool{}}(VarSALT : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblnotBool'Unds'{}(Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasmaxinitcodesize'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{})), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarMEMWIDTH : SortInt{}, Lbl'Unds-LT-Unds-GT-Unds'SCHEDULE'Unds'Int'Unds'ScheduleConst'Unds'Schedule{}(LblmaxInitCodeSize'Unds'SCHEDULE'Unds'ScheduleConst{}(), VarSCHEDULE'Unds'CELL : SortSchedule{})))), \and{SortBool{}}(\equals{SortAccount{}, SortBool{}}(VarID'Unds'CELL : SortAccount{}, inj{SortInt{}, SortAccount{}}(VarACCT : SortInt{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'QuadStackOp'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(LblCREATE2'Unds'EVM'Unds'QuadStackOp{}(), VarVALUE : SortInt{}, VarMEMSTART : SortInt{}, VarMEMWIDTH : SortInt{}, VarSALT : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblBALANCE'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblEXTCODEHASH'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblEXTCODESIZE'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasAccess{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSELFDESTRUCT'Unds'EVM'Unds'UnStackOp{}(), VarACCT : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkCall'UndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int{}(VarACCT : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCT : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'checkCreate'UndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int{}(VarACCT : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTCODE : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarAPPVALUE : SortInt{}, \exists{SortBool{}}(VarARGS : SortBytes{}, \exists{SortBool{}}(VarBYTES : SortBytes{}, \exists{SortBool{}}(VarSTATIC : SortBool{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'mkCall'UndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int'Unds'Bytes'Unds'Int'Unds'Bytes'Unds'Bool{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarACCTCODE : SortInt{}, VarBYTES : SortBytes{}, VarAPPVALUE : SortInt{}, VarARGS : SortBytes{}, VarSTATIC : SortBool{})), Var'Unds'DotVar2 : SortK{})))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTCODE : SortInt{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarAPPVALUE : SortInt{}, \exists{SortBool{}}(VarARGS : SortBytes{}, \exists{SortBool{}}(VarBYTES : SortBytes{}, \exists{SortBool{}}(VarSTATIC : SortBool{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'callWithCode'UndsUndsUndsUndsUndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int'Unds'Bytes'Unds'Int'Unds'Int'Unds'Bytes'Unds'Bool{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarACCTCODE : SortInt{}, VarBYTES : SortBytes{}, VarVALUE : SortInt{}, VarAPPVALUE : SortInt{}, VarARGS : SortBytes{}, VarSTATIC : SortBool{})), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTCODE : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(\dv{SortInt{}}("0"), VarACCTCODE : SortInt{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarACCTCODE : SortInt{}, Lbl'Hash'precompiledAccountsUB{}(VarSCHED : SortSchedule{})))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'precompiled'QuesLParUndsCommUndsRParUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Schedule{}(VarACCTCODE : SortInt{}, VarSCHED : SortSchedule{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTCODE : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'andBool'Unds'{}(Lbl'Unds-LT-'Int'Unds'{}(\dv{SortInt{}}("0"), VarACCTCODE : SortInt{}), Lbl'Unds-LT-Eqls'Int'Unds'{}(VarACCTCODE : SortInt{}, Lbl'Hash'precompiledAccountsUB{}(VarSCHED : SortSchedule{})))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'precompiled'QuesLParUndsCommUndsRParUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Schedule{}(VarACCTCODE : SortInt{}, VarSCHED : SortSchedule{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGemptyisnonexistent'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'transferFundsToNonExistent'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, \dv{SortInt{}}("0"))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarINITCODE : SortBytes{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'create'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int'Unds'Bytes{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{}, VarINITCODE : SortBytes{})), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarACCTFROM : SortInt{}, \exists{SortBool{}}(VarACCTTO : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(Lbl'Unds-LT-'Int'Unds'{}(\dv{SortInt{}}("0"), VarVALUE : SortInt{}), LblnotBool'Unds'{}(Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGemptyisnonexistent'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{})))), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'transferFundsToNonExistent'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Int{}(VarACCTFROM : SortInt{}, VarACCTTO : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarADDR : SortAccount{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessAccounts'UndsUnds'EVM'Unds'KItem'Unds'Account{}(VarADDR : SortAccount{}), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarADDR : SortAccount{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'touchAccounts'UndsUnds'EVM'Unds'KItem'Unds'Account{}(VarADDR : SortAccount{}), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarADDR1 : SortAccount{}, \exists{SortBool{}}(VarADDR2 : SortAccount{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessAccounts'UndsUndsUnds'EVM'Unds'KItem'Unds'Account'Unds'Account{}(VarADDR1 : SortAccount{}, VarADDR2 : SortAccount{}), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarADDR1 : SortAccount{}, \exists{SortBool{}}(VarADDR2 : SortAccount{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'touchAccounts'UndsUndsUnds'EVM'Unds'KItem'Unds'Account'Unds'Account{}(VarADDR1 : SortAccount{}, VarADDR2 : SortAccount{}), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarADDR1 : SortAccount{}, \exists{SortBool{}}(VarADDR2 : SortAccount{}, \exists{SortBool{}}(VarADDRSET : SortSet{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessAccounts'UndsUndsUndsUnds'EVM'Unds'KItem'Unds'Account'Unds'Account'Unds'Set{}(VarADDR1 : SortAccount{}, VarADDR2 : SortAccount{}, VarADDRSET : SortSet{}), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarADDRSET : SortSet{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lbl'Hash'accessAccounts'UndsUnds'EVM'Unds'KItem'Unds'Set{}(VarADDRSET : SortSet{}), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarAOP : SortOpCode{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Hash'usesAccessList{}(VarOP : SortOpCode{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT--LT-Unds-GT--GT-Unds'SCHEDULE'Unds'Bool'Unds'ScheduleFlag'Unds'Schedule{}(LblGhasaccesslist'Unds'SCHEDULE'Unds'ScheduleFlag{}(), VarSCHEDULE'Unds'CELL : SortSchedule{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'access'LSqBUndsCommUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode'Unds'OpCode{}(VarOP : SortOpCode{}, VarAOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarAOP : SortOpCode{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Hash'usesMemory{}(VarOP : SortOpCode{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'memory'LSqBUndsCommUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode'Unds'OpCode{}(VarOP : SortOpCode{}, VarAOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarBAL : SortInt{}, \exists{SortBool{}}(VarISEMPTY : SortBool{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortExp{}, SortKItem{}}(LblCselfdestruct{}(VarSCHED : SortSchedule{}, inj{SortBool{}, SortBExp{}}(VarISEMPTY : SortBool{}), VarBAL : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarBOP : SortBinStackOp{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarWS0 : SortWordStack{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortBinStackOp{}, SortOpCode{}}(VarBOP : SortBinStackOp{}))), Var'Unds'DotVar2 : SortK{})), \equals{SortWordStack{}, SortBool{}}(VarWS : SortWordStack{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW1 : SortInt{}, VarWS0 : SortWordStack{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarBYTES : SortBytes{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(LblloadProgram{}(VarBYTES : SortBytes{}), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarCO : SortCallOp{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarW2 : SortInt{}, \exists{SortBool{}}(VarW3 : SortInt{}, \exists{SortBool{}}(VarW4 : SortInt{}, \exists{SortBool{}}(VarW5 : SortInt{}, \exists{SortBool{}}(VarW6 : SortInt{}, \exists{SortBool{}}(VarWS0 : SortWordStack{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortCallOp{}, SortOpCode{}}(VarCO : SortCallOp{}))), Var'Unds'DotVar2 : SortK{})), \equals{SortWordStack{}, SortBool{}}(VarWS : SortWordStack{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW1 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW2 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW3 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW4 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW5 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW6 : SortInt{}, VarWS0 : SortWordStack{}))))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarCSO : SortCallSixOp{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarW2 : SortInt{}, \exists{SortBool{}}(VarW3 : SortInt{}, \exists{SortBool{}}(VarW4 : SortInt{}, \exists{SortBool{}}(VarW5 : SortInt{}, \exists{SortBool{}}(VarWS0 : SortWordStack{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortCallSixOp{}, SortOpCode{}}(VarCSO : SortCallSixOp{}))), Var'Unds'DotVar2 : SortK{})), \equals{SortWordStack{}, SortBool{}}(VarWS : SortWordStack{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW1 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW2 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW3 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW4 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW5 : SortInt{}, VarWS0 : SortWordStack{}))))))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarDATASTART : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblCALLDATALOAD'Unds'EVM'Unds'UnStackOp{}(), VarDATASTART : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarDATASTART : SortInt{}, \exists{SortBool{}}(VarDATAWIDTH : SortInt{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-Eqls'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(VarDATASTART : SortInt{}, VarDATAWIDTH : SortInt{}), LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarOUTPUT'Unds'CELL : SortBytes{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblRETURNDATACOPY'Unds'EVM'Unds'TernStackOp{}(), VarMEMSTART : SortInt{}, VarDATASTART : SortInt{}, VarDATAWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarDATASTART : SortInt{}, \exists{SortBool{}}(VarDATAWIDTH : SortInt{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblCALLDATACOPY'Unds'EVM'Unds'TernStackOp{}(), VarMEMSTART : SortInt{}, VarDATASTART : SortInt{}, VarDATAWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarDEST : SortInt{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(VarDEST : SortInt{}, LbllengthBytes'LParUndsRParUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes{}(VarJUMPDESTS'Unds'CELL : SortBytes{}))), \equals{SortInt{}, SortBool{}}(\dv{SortInt{}}("1"), Lbl'UndsLSqBUndsRSqBUnds'BYTES-HOOKED'Unds'Int'Unds'Bytes'Unds'Int{}(VarJUMPDESTS'Unds'CELL : SortBytes{}, VarDEST : SortInt{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblJUMP'Unds'EVM'Unds'UnStackOp{}(), VarDEST : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarDEST : SortInt{}, \exists{SortBool{}}(VarI : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblJUMPI'Unds'EVM'Unds'BinStackOp{}(), VarDEST : SortInt{}, VarI : SortInt{})), Var'Unds'DotVar2 : SortK{})), \not{SortBool{}}(\equals{SortInt{}, SortBool{}}(VarI : SortInt{}, \dv{SortInt{}}("0"))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarDST : SortInt{}, \exists{SortBool{}}(VarLEN : SortInt{}, \exists{SortBool{}}(VarSRC : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblMCOPY'Unds'EVM'Unds'TernStackOp{}(), VarDST : SortInt{}, VarSRC : SortInt{}, VarLEN : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarGAVAIL : SortGas{}, \exists{SortBool{}}(VarGCAP : SortGas{}, \exists{SortBool{}}(VarISEMPTY : SortBool{}, \exists{SortBool{}}(VarISWARM : SortBool{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortExp{}, SortKItem{}}(LblCcall{}(VarSCHED : SortSchedule{}, inj{SortBool{}, SortBExp{}}(VarISEMPTY : SortBool{}), VarGCAP : SortGas{}, VarGAVAIL : SortGas{}, VarVALUE : SortInt{}, VarISWARM : SortBool{})), Var'Unds'DotVar2 : SortK{}))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarGAVAIL : SortGas{}, \exists{SortBool{}}(VarGCAP : SortGas{}, \exists{SortBool{}}(VarISEMPTY : SortBool{}, \exists{SortBool{}}(VarISWARM : SortBool{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortExp{}, SortKItem{}}(LblCcallgas{}(VarSCHED : SortSchedule{}, inj{SortBool{}, SortBExp{}}(VarISEMPTY : SortBool{}), VarGCAP : SortGas{}, VarGAVAIL : SortGas{}, VarVALUE : SortInt{}, VarISWARM : SortBool{})), Var'Unds'DotVar2 : SortK{}))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarGCALL : SortGas{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortGas{}, SortKItem{}}(VarGCALL : SortGas{}), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'allocateCallGas'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarHOLE : SortBExp{}, \exists{SortBool{}}(VarK0 : SortSchedule{}, \exists{SortBool{}}(VarK2 : SortGas{}, \exists{SortBool{}}(VarK3 : SortGas{}, \exists{SortBool{}}(VarK4 : SortInt{}, \exists{SortBool{}}(VarK5 : SortBool{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), dotk{}()))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortExp{}, SortKItem{}}(LblCcall{}(VarK0 : SortSchedule{}, VarHOLE : SortBExp{}, VarK2 : SortGas{}, VarK3 : SortGas{}, VarK4 : SortInt{}, VarK5 : SortBool{})), Var'Unds'DotVar2 : SortK{})))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarHOLE : SortBExp{}, \exists{SortBool{}}(VarK0 : SortSchedule{}, \exists{SortBool{}}(VarK2 : SortGas{}, \exists{SortBool{}}(VarK3 : SortGas{}, \exists{SortBool{}}(VarK4 : SortInt{}, \exists{SortBool{}}(VarK5 : SortBool{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), dotk{}()))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortExp{}, SortKItem{}}(LblCcallgas{}(VarK0 : SortSchedule{}, VarHOLE : SortBExp{}, VarK2 : SortGas{}, VarK3 : SortGas{}, VarK4 : SortInt{}, VarK5 : SortBool{})), Var'Unds'DotVar2 : SortK{})))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarHOLE : SortBExp{}, \exists{SortBool{}}(VarK0 : SortSchedule{}, \exists{SortBool{}}(VarK2 : SortGas{}, \exists{SortBool{}}(VarK3 : SortGas{}, \exists{SortBool{}}(VarK4 : SortInt{}, \exists{SortBool{}}(VarK5 : SortBool{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), dotk{}()))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), kseq{}(Lbl'Hash'freezerCcall1'Unds'{}(kseq{}(inj{SortSchedule{}, SortKItem{}}(VarK0 : SortSchedule{}), dotk{}()), kseq{}(inj{SortGas{}, SortKItem{}}(VarK2 : SortGas{}), dotk{}()), kseq{}(inj{SortGas{}, SortKItem{}}(VarK3 : SortGas{}), dotk{}()), kseq{}(inj{SortInt{}, SortKItem{}}(VarK4 : SortInt{}), dotk{}()), kseq{}(inj{SortBool{}, SortKItem{}}(VarK5 : SortBool{}), dotk{}())), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarHOLE : SortBExp{}, \exists{SortBool{}}(VarK0 : SortSchedule{}, \exists{SortBool{}}(VarK2 : SortGas{}, \exists{SortBool{}}(VarK3 : SortGas{}, \exists{SortBool{}}(VarK4 : SortInt{}, \exists{SortBool{}}(VarK5 : SortBool{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), dotk{}()))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), kseq{}(Lbl'Hash'freezerCcallgas1'Unds'{}(kseq{}(inj{SortSchedule{}, SortKItem{}}(VarK0 : SortSchedule{}), dotk{}()), kseq{}(inj{SortGas{}, SortKItem{}}(VarK2 : SortGas{}), dotk{}()), kseq{}(inj{SortGas{}, SortKItem{}}(VarK3 : SortGas{}), dotk{}()), kseq{}(inj{SortInt{}, SortKItem{}}(VarK4 : SortInt{}), dotk{}()), kseq{}(inj{SortBool{}, SortKItem{}}(VarK5 : SortBool{}), dotk{}())), Var'Unds'DotVar2 : SortK{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarHOLE : SortBExp{}, \exists{SortBool{}}(VarK0 : SortSchedule{}, \exists{SortBool{}}(VarK2 : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), dotk{}()))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortExp{}, SortKItem{}}(LblCselfdestruct{}(VarK0 : SortSchedule{}, VarHOLE : SortBExp{}, VarK2 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarHOLE : SortBExp{}, \exists{SortBool{}}(VarK0 : SortSchedule{}, \exists{SortBool{}}(VarK2 : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), dotk{}()))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE : SortBExp{}), kseq{}(Lbl'Hash'freezerCselfdestruct1'Unds'{}(kseq{}(inj{SortSchedule{}, SortKItem{}}(VarK0 : SortSchedule{}), dotk{}()), kseq{}(inj{SortInt{}, SortKItem{}}(VarK2 : SortInt{}), dotk{}())), Var'Unds'DotVar2 : SortK{})))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblMLOAD'Unds'EVM'Unds'UnStackOp{}(), VarINDEX : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortInternalOp{}, SortOpCode{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblSLOAD'Unds'EVM'Unds'UnStackOp{}(), VarINDEX : SortInt{})))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMSTORE'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarVALUE : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMSTORE8'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, VarVALUE : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarINDEX : SortInt{}, \exists{SortBool{}}(VarW : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblBYTE'Unds'EVM'Unds'BinStackOp{}(), VarINDEX : SortInt{}, VarW : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarIOP : SortInvalidOp{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortInvalidOp{}, SortOpCode{}}(VarIOP : SortInvalidOp{}))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \exists{SortBool{}}(VarMEMWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSHA3'Unds'EVM'Unds'BinStackOp{}(), VarMEMSTART : SortInt{}, VarMEMWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarMEMSTART : SortInt{}, \exists{SortBool{}}(VarPGMSTART : SortInt{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblCODECOPY'Unds'EVM'Unds'TernStackOp{}(), VarMEMSTART : SortInt{}, VarPGMSTART : SortInt{}, VarWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarMU'Apos' : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInt{}, SortKItem{}}(VarMU'Apos' : SortInt{}), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'deductMemory'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarN : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblBLOCKHASH'Unds'EVM'Unds'UnStackOp{}(), VarN : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarN : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortPushOp{}, SortKItem{}}(LblPUSH{}(VarN : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarN : SortInt{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarWS : SortWordStack{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'StackOp'Unds'WordStack{}(LblSWAP{}(VarN : SortInt{}), Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW0 : SortInt{}, VarWS : SortWordStack{}))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarN : SortInt{}, \exists{SortBool{}}(VarWS : SortWordStack{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'StackOp'Unds'WordStack{}(LblDUP{}(VarN : SortInt{}), VarWS : SortWordStack{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblisAddr1Op{}(VarOP : SortOpCode{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), LblisAddr2Op{}(VarOP : SortOpCode{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'addr'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(VarOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'andBool'Unds'{}(Lbl'Unds-GT-'Int'Unds'{}(Lbl'Unds'-Int'Unds'{}(Lbl'Hash'stackAdded{}(VarOP : SortOpCode{}), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{})), \dv{SortInt{}}("0")), Lbl'Unds-GT-'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")), Lbl'Unds'-Int'Unds'{}(Lbl'Hash'stackAdded{}(VarOP : SortOpCode{}), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{}))), \dv{SortInt{}}("1024")))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'andBool'Unds'{}(VarSTATIC'Unds'CELL : SortBool{}, Lbl'Hash'changesState{}(VarOP : SortOpCode{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarCALLER'Unds'CELL : SortInt{}, VarWS : SortWordStack{})))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds-LT-'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'next'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'MaybeOpCode{}(inj{SortOpCode{}, SortMaybeOpCode{}}(VarOP : SortOpCode{}))), Var'Unds'DotVar2 : SortK{}))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds'andBool'Unds'{}(Lbl'Unds-GT-'Int'Unds'{}(Lbl'Unds'-Int'Unds'{}(Lbl'Hash'stackAdded{}(VarOP : SortOpCode{}), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{})), \dv{SortInt{}}("0")), Lbl'Unds-GT-'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")), Lbl'Unds'-Int'Unds'{}(Lbl'Hash'stackAdded{}(VarOP : SortOpCode{}), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{}))), \dv{SortInt{}}("1024")))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("false"), Lbl'Unds-LT-'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{}))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Hash'changesState{}(VarOP : SortOpCode{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarCALLER'Unds'CELL : SortInt{}, VarWS : SortWordStack{}))), \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'next'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'MaybeOpCode{}(inj{SortOpCode{}, SortMaybeOpCode{}}(VarOP : SortOpCode{}))), Var'Unds'DotVar2 : SortK{})), \equals{SortBool{}, SortBool{}}(VarSTATIC'Unds'CELL : SortBool{}, \dv{SortBool{}}("true")))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblisNullStackOp{}(kseq{}(inj{SortOpCode{}, SortKItem{}}(VarOP : SortOpCode{}), dotk{}())), LblisPushOp{}(kseq{}(inj{SortOpCode{}, SortKItem{}}(VarOP : SortOpCode{}), dotk{}())))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(VarOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-GT-'Int'Unds'{}(Lbl'Unds'-Int'Unds'{}(Lbl'Hash'stackAdded{}(VarOP : SortOpCode{}), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{})), \dv{SortInt{}}("0"))), \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-GT-'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")), Lbl'Unds'-Int'Unds'{}(Lbl'Hash'stackAdded{}(VarOP : SortOpCode{}), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{}))), \dv{SortInt{}}("1024"))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'next'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'MaybeOpCode{}(inj{SortOpCode{}, SortMaybeOpCode{}}(VarOP : SortOpCode{}))), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds-LT-'Int'Unds'{}(LblsizeWordStackAux{}(VarWS : SortWordStack{}, \dv{SortInt{}}("1")), Lbl'Hash'stackNeeded{}(VarOP : SortOpCode{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'next'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'MaybeOpCode{}(inj{SortOpCode{}, SortMaybeOpCode{}}(VarOP : SortOpCode{}))), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisAddr1Op{}(VarOP : SortOpCode{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'addr'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(VarOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gas'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(VarOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarOP : SortOpCode{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lblpc{}(VarOP : SortOpCode{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarP : SortG1Point{}, \exists{SortBool{}}(VarS : SortInt{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisValidPointWrapper{}(VarP : SortG1Point{})), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecmul{}(VarP : SortG1Point{}, VarS : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarP1 : SortG1Point{}, \exists{SortBool{}}(VarP2 : SortG1Point{}, \and{SortBool{}}(\and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisValidPointWrapper{}(VarP1 : SortG1Point{})), \equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), LblisValidPointWrapper{}(VarP2 : SortG1Point{}))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecadd{}(VarP1 : SortG1Point{}, VarP2 : SortG1Point{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarP1 : SortG1Point{}, \exists{SortBool{}}(VarP2 : SortG1Point{}, \and{SortBool{}}(\equals{SortBool{}, SortBool{}}(\dv{SortBool{}}("true"), Lbl'Unds'orBool'Unds'{}(LblnotBool'Unds'{}(LblisValidPointWrapper{}(VarP1 : SortG1Point{})), LblnotBool'Unds'{}(LblisValidPointWrapper{}(VarP2 : SortG1Point{})))), \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'ecadd{}(VarP1 : SortG1Point{}, VarP2 : SortG1Point{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarQOP : SortQuadStackOp{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarW2 : SortInt{}, \exists{SortBool{}}(VarW3 : SortInt{}, \exists{SortBool{}}(VarWS0 : SortWordStack{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortQuadStackOp{}, SortOpCode{}}(VarQOP : SortQuadStackOp{}))), Var'Unds'DotVar2 : SortK{})), \equals{SortWordStack{}, SortBool{}}(VarWS : SortWordStack{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW1 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW2 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW3 : SortInt{}, VarWS0 : SortWordStack{}))))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'return'UndsUndsUnds'EVM'Unds'KItem'Unds'Int'Unds'Int{}(VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{}), Var'Unds'DotVar2 : SortK{}))), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortEndStatusCode{}, SortStatusCode{}}(LblEVMC'Unds'REVERT'Unds'NETWORK'Unds'EndStatusCode{}())))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblhalt{}(), kseq{}(Lbl'Hash'return'UndsUndsUnds'EVM'Unds'KItem'Unds'Int'Unds'Int{}(VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{}), Var'Unds'DotVar2 : SortK{}))), \equals{SortStatusCode{}, SortBool{}}(VarSTATUSCODE'Unds'CELL : SortStatusCode{}, inj{SortEndStatusCode{}, SortStatusCode{}}(LblEVMC'Unds'SUCCESS'Unds'NETWORK'Unds'EndStatusCode{}())))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblRETURN'Unds'EVM'Unds'BinStackOp{}(), VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarRETSTART : SortInt{}, \exists{SortBool{}}(VarRETWIDTH : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblREVERT'Unds'EVM'Unds'BinStackOp{}(), VarRETSTART : SortInt{}, VarRETWIDTH : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSC : SortStatusCode{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(Lblend{}(VarSC : SortStatusCode{}), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblADDRESS'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblBASEFEE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblCALLDATASIZE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblCALLER'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblCALLVALUE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblCHAINID'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblCODESIZE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblCOINBASE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblDIFFICULTY'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblGAS'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblGASLIMIT'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblGASPRICE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblJUMPDEST'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblMSIZE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblNUMBER'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblORIGIN'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblPC'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblPREVRANDAO'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblRETURNDATASIZE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblSELFBALANCE'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblSTOP'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortNullStackOp{}, SortOpCode{}}(LblTIMESTAMP'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblBLAKE2F'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblECADD'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblECMUL'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblECPAIRING'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPrecompiledOp{}, SortOpCode{}}(LblMODEXP'Unds'EVM'Unds'PrecompiledOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSCHED : SortSchedule{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'gasExec{}(VarSCHED : SortSchedule{}, inj{SortPushOp{}, SortOpCode{}}(LblPUSHZERO'Unds'EVM'Unds'PushOp{}()))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSO : SortStackOp{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortStackOp{}, SortOpCode{}}(VarSO : SortStackOp{}))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarSTART : SortInt{}, \exists{SortBool{}}(VarWIDTH : SortInt{}, \exists{SortBool{}}(VarWS : SortBytes{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'setLocalMem'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'Int'Unds'Int'Unds'Bytes{}(VarSTART : SortInt{}, VarWIDTH : SortInt{}, VarWS : SortBytes{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarTOP : SortTernStackOp{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarW2 : SortInt{}, \exists{SortBool{}}(VarWS0 : SortWordStack{}, \and{SortBool{}}(\equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortTernStackOp{}, SortOpCode{}}(VarTOP : SortTernStackOp{}))), Var'Unds'DotVar2 : SortK{})), \equals{SortWordStack{}, SortBool{}}(VarWS : SortWordStack{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW1 : SortInt{}, Lbl'UndsColnUndsUnds'EVM-TYPES'Unds'WordStack'Unds'Int'Unds'WordStack{}(VarW2 : SortInt{}, VarWS0 : SortWordStack{}))))))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarUOP : SortUnStackOp{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'exec'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'OpCode{}(inj{SortUnStackOp{}, SortOpCode{}}(VarUOP : SortUnStackOp{}))), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblISZERO'Unds'EVM'Unds'UnStackOp{}(), VarW : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUnds'EVM'Unds'InternalOp'Unds'UnStackOp'Unds'Int{}(LblNOT'Unds'EVM'Unds'UnStackOp{}(), VarW : SortInt{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInt{}, SortKItem{}}(VarW0 : SortInt{}), kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'push'Unds'EVM'Unds'InternalOp{}()), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblADD'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblAND'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblDIV'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEQ'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEVMOR'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblEXP'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblGT'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblLT'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMOD'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblMUL'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSAR'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSDIV'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSGT'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSHL'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSHR'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSIGNEXTEND'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSLT'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSMOD'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblSUB'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'BinStackOp'Unds'Int'Unds'Int{}(LblXOR'Unds'EVM'Unds'BinStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{})), Var'Unds'DotVar2 : SortK{}))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarW2 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblADDMOD'Unds'EVM'Unds'TernStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{}, VarW2 : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarW0 : SortInt{}, \exists{SortBool{}}(VarW1 : SortInt{}, \exists{SortBool{}}(VarW2 : SortInt{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'UndsUndsUndsUndsUnds'EVM'Unds'InternalOp'Unds'TernStackOp'Unds'Int'Unds'Int'Unds'Int{}(LblMULMOD'Unds'EVM'Unds'TernStackOp{}(), VarW0 : SortInt{}, VarW1 : SortInt{}, VarW2 : SortInt{})), Var'Unds'DotVar2 : SortK{})))))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'DotVar2 : SortK{}, \exists{SortBool{}}(VarWS : SortWordStack{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'setStack'UndsUnds'EVM'Unds'InternalOp'Unds'WordStack{}(VarWS : SortWordStack{})), Var'Unds'DotVar2 : SortK{})))))), \not{SortBool{}}(\exists{SortBool{}}(Var'Unds'K'Unds'CELL : SortK{}, \equals{SortK{}, SortBool{}}(VarK'Unds'CELL : SortK{}, kseq{}(inj{SortInternalOp{}, SortKItem{}}(Lbl'Hash'next'LSqBUndsRSqBUnds'EVM'Unds'InternalOp'Unds'MaybeOpCode{}(inj{SortNullStackOp{}, SortMaybeOpCode{}}(LblCALLER'Unds'EVM'Unds'NullStackOp{}()))), Var'Unds'K'Unds'CELL : SortK{})))))

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/zhaoji/evm-semantics/kevm-pyk/src/kevm_pyk/utils.py", line 152, in run_prover
    parallel_advance_proof(
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/proof/proof.py", line 386, in parallel_advance_proof
    proof_results = future.result()
                    ^^^^^^^^^^^^^^^
  File "/nix/store/7hnr99nxrd2aw6lghybqdmkckq60j6l9-python3-3.11.9/lib/python3.11/concurrent/futures/_base.py", line 449, in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
  File "/nix/store/7hnr99nxrd2aw6lghybqdmkckq60j6l9-python3-3.11.9/lib/python3.11/concurrent/futures/_base.py", line 401, in __get_result
    raise self._exception
  File "/nix/store/7hnr99nxrd2aw6lghybqdmkckq60j6l9-python3-3.11.9/lib/python3.11/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/proof/proof.py", line 465, in step
    return prover.step_proof(proof_step)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/proof/reachability.py", line 897, in step_proof
    extend_results = self.kcfg_explore.extend_cterm(
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/kcfg/explore.py", line 231, in extend_cterm
    cterm, next_states, depth, vacuous, next_node_logs = self.cterm_symbolic.execute(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zhaoji/.cache/pypoetry/virtualenvs/kevm-pyk-9eA2lNH8-py3.11/lib/python3.11/site-packages/pyk/cterm/symbolic.py", line 120, in execute
    raise self._smt_solver_error(err) from err
pyk.cterm.symbolic.CTermSMTError: { true #Equals 0 <Int lengthBytes ( OUTPUT_CELL:Bytes ) }
#And { true #Equals #sizeWordStack ( WS:WordStack , 0 ) <=Int 1023 }
#And #Not ( #Exists _ACCTTO:Int . #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCTFROM:Int . #Exists ORIGFROM:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals ORIGFROM:Int <Int VALUE:Int }
#And { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    ORIGFROM:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #transferFunds ACCTFROM:Int _ACCTTO:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DEST:Int . #Exists _DotVar2:K . { K_CELL:K #Equals JUMPI _DEST:Int 0
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals CALLDATA_CELL:Bytes [ 212 ] <=Int 1 }
#And { 213 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) }
#And { K_CELL:K #Equals BLAKE2F
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals CALLDATA_CELL:Bytes [ 212 ] >Int 1 }
#And { 213 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) }
#And { K_CELL:K #Equals BLAKE2F
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals 0 <Int size ( SELFDESTRUCT_CELL:Set ) }
#And { K_CELL:K #Equals #finalizeTx ( true )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals CALLDEPTH_CELL:Int <Int 1024 }
#And { K_CELL:K #Equals #checkDepthExceeded
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { true #Equals 1024 <=Int CALLDEPTH_CELL:Int }
#And { K_CELL:K #Equals #checkDepthExceeded
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { 0 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) modInt 192 }
#And { K_CELL:K #Equals ECPAIRING
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #finalizeTx ( true )
~> _DotVar2:K }
#And { SELFDESTRUCT_CELL:Set #Equals .Set } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals BLAKE2F
~> _DotVar2:K }
#And #Not ( { lengthBytes ( CALLDATA_CELL:Bytes ) #Equals 213 } ) )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECPAIRING
~> _DotVar2:K }
#And #Not ( { 0 #Equals lengthBytes ( CALLDATA_CELL:Bytes ) modInt 192 } ) )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #initVM
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #execute
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #halt
~> #execute
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #rewardOmmers ( .JSONs )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #startBlock
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #allocateCreateGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #deleteAccounts ( .List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #endBasicBlock
~> #execute
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #finalizeStorage ( .List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #next [ .NoOpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #pushCallStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals #pushWorldState
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals INVALID
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ADDRESS
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals BASEFEE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CALLDATASIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CALLER
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CALLVALUE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CHAINID
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals CODESIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals COINBASE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals DIFFICULTY
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals GAS
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals GASLIMIT
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals GASPRICE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals JUMPDEST
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals MSIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals NUMBER
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ORIGIN
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals PC
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals PREVRANDAO
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals RETURNDATASIZE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals STOP
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals TIMESTAMP
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECADD
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECMUL
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ECREC
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals ID
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals MODEXP
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals RIP160
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals SHA256
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . { K_CELL:K #Equals PUSHZERO
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists _Gen5:NonceCell . #Exists ACCT:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  _Gen5:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #newAccount ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists _Gen5:NonceCell . #Exists ACCT:Int . #Exists ACCTS:List . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  _Gen5:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #deleteAccounts ( ListItem ( ACCT:Int ) ACCTS:List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists ACCT:Int . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals NONCE:Int <Int maxUInt64 }
#And { true #Equals 0 <=Int NONCE:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #checkNonceExceeded ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:CodeCell . #Exists _Gen2:StorageCell . #Exists _Gen3:OrigStorageCell . #Exists _Gen4:TransientStorageCell . #Exists ACCT:Int . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  _Gen1:CodeCell
  _Gen2:StorageCell
  _Gen3:OrigStorageCell
  _Gen4:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #incrementNonce ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists CODE:Bytes . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals EXTCODESIZE ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCTCODE:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists APPVALUE:Int . #Exists ARGS:Bytes . #Exists CODE:Bytes . #Exists STATIC:Bool . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTCODE:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTCODE:Int
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:Bytes
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #call ACCTFROM:Int ACCTTO:Int ACCTCODE:Int VALUE:Int APPVALUE:Int ARGS:Bytes STATIC:Bool
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:BalanceCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists ACCT:Int . #Exists CODE:AccountCode . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals notBool CODE:AccountCode ~> .K ==K b"" ~> .K orBool notBool NONCE:Int ==Int 0 }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen0:BalanceCell
  <code>
    CODE:AccountCode
  </code>
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #newExistingAccount ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists _Gen5:CodeCell . #Exists _Gen6:StorageCell . #Exists _Gen7:OrigStorageCell . #Exists _Gen8:TransientStorageCell . #Exists _Gen9:NonceCell . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ORIGFROM:Int . #Exists ORIGTO:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { false #Equals <acctID>
  ACCTTO:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals VALUE:Int <=Int ORIGFROM:Int }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } )
#And { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { false #Equals <acctID>
  ACCTTO:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    ORIGFROM:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> <account>
  <acctID>
    ACCTTO:Int
  </acctID>
  <balance>
    ORIGTO:Int
  </balance>
  _Gen5:CodeCell
  _Gen6:StorageCell
  _Gen7:OrigStorageCell
  _Gen8:TransientStorageCell
  _Gen9:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #transferFunds ACCTFROM:Int ACCTTO:Int VALUE:Int
~> _DotVar2:K }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals BALANCE ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals VALUE:Int <=Int BAL:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #checkBalanceUnderflow ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:CodeCell . #Exists _Gen1:StorageCell . #Exists _Gen2:OrigStorageCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists ORIGFROM:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { true #Equals VALUE:Int <=Int ORIGFROM:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    ORIGFROM:Int
  </balance>
  _Gen0:CodeCell
  _Gen1:StorageCell
  _Gen2:OrigStorageCell
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #transferFunds ACCT:Int ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:Map . #Exists _Gen1:BalanceCell . #Exists _Gen2:CodeCell . #Exists _Gen3:TransientStorageCell . #Exists _Gen4:NonceCell . #Exists ACCT:Int . #Exists REST:List . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen1:BalanceCell
  _Gen2:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    _Gen0:Map
  </origStorage>
  _Gen3:TransientStorageCell
  _Gen4:NonceCell
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #finalizeStorage ( ListItem ( ACCT:Int ) REST:List )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:Map . #Exists _Gen1:Map . #Exists _Gen2:BalanceCell . #Exists _Gen3:TransientStorageCell . #Exists ACCT:Int . #Exists CODE:Bytes . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { 0 #Equals lengthBytes ( CODE:Bytes ) }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen2:BalanceCell
  <code>
    CODE:Bytes
  </code>
  <storage>
    _Gen0:Map
  </storage>
  <origStorage>
    _Gen1:Map
  </origStorage>
  _Gen3:TransientStorageCell
  <nonce>
    0
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #newExistingAccount ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:StorageCell . #Exists _Gen1:OrigStorageCell . #Exists _Gen2:TransientStorageCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists CODE:AccountCode . #Exists NONCE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:AccountCode
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals #accountNonexistent ( ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:AccountCellMap . #Exists _Gen0:StorageCell . #Exists _Gen1:OrigStorageCell . #Exists _Gen2:TransientStorageCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists CODE:Bytes . #Exists NONCE:Int . { false #Equals CODE:Bytes ~> .K ==K b"" ~> .K andBool NONCE:Int ==Int 0 andBool BAL:Int ==Int 0 }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar5:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  <code>
    CODE:Bytes
  </code>
  _Gen0:StorageCell
  _Gen1:OrigStorageCell
  _Gen2:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar5:AccountCellMap }
#And { K_CELL:K #Equals EXTCODEHASH ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar5:MessageCellMap . #Exists _Gen0:TxNonceCell . #Exists _Gen1:TxGasPriceCell . #Exists _Gen2:TxGasLimitCell . #Exists _Gen3:ToCell . #Exists _Gen4:ValueCell . #Exists _Gen5:SigVCell . #Exists _Gen6:SigRCell . #Exists _Gen7:SigSCell . #Exists _Gen8:DataCell . #Exists _Gen9:TxAccessCell . #Exists _Gen10:TxChainIDCell . #Exists _Gen11:TxPriorityFeeCell . #Exists _Gen12:TxMaxFeeCell . #Exists _Gen13:TxTypeCell . #Exists MsgId:Int . #Exists REST:List . { false #Equals <msgID>
  MsgId:Int
</msgID> in_keys ( _DotVar5:MessageCellMap ) }
#And { K_CELL:K #Equals #finalizeTx ( false )
~> _DotVar2:K }
#And { MESSAGES_CELL:MessageCellMap #Equals <message>
  <msgID>
    MsgId:Int
  </msgID>
  _Gen0:TxNonceCell
  _Gen1:TxGasPriceCell
  _Gen2:TxGasLimitCell
  _Gen3:ToCell
  _Gen4:ValueCell
  _Gen5:SigVCell
  _Gen6:SigRCell
  _Gen7:SigSCell
  _Gen8:DataCell
  _Gen9:TxAccessCell
  _Gen10:TxChainIDCell
  _Gen11:TxPriorityFeeCell
  _Gen12:TxMaxFeeCell
  _Gen13:TxTypeCell
</message> _DotVar5:MessageCellMap }
#And { TXPENDING_CELL:List #Equals ListItem ( MsgId:Int ) REST:List } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar6:Map . #Exists ACCT:Account . #Exists INDEX:Int . #Exists TS:Set . { false #Equals ACCT:Account in_keys ( _DotVar6:Map ) }
#And { true #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { false #Equals ACCT:Account in_keys ( _DotVar6:Map ) }
#And { ACCESSEDSTORAGE_CELL:Map #Equals ACCT:Account |-> TS:Set _DotVar6:Map }
#And { K_CELL:K #Equals #accessStorage ACCT:Account INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen0:AccountCode . #Exists _Gen24:BalanceCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:TransientStorageCell . #Exists _Gen28:NonceCell . #Exists ACCT:Int . #Exists OUT:Bytes . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen24:BalanceCell
  <code>
    _Gen0:AccountCode
  </code>
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #finishCodeDeposit ACCT:Int OUT:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen0:JSON . #Exists _Gen1:JSON . #Exists _Gen2:JSON . #Exists _Gen3:JSON . #Exists _Gen4:JSON . #Exists _Gen5:JSON . #Exists _Gen6:JSON . #Exists _Gen7:JSONs . #Exists _Gen37:CodeCell . #Exists _Gen38:StorageCell . #Exists _Gen39:OrigStorageCell . #Exists _Gen40:TransientStorageCell . #Exists _Gen41:NonceCell . #Exists _Gen42:CodeCell . #Exists _Gen43:StorageCell . #Exists _Gen44:OrigStorageCell . #Exists _Gen45:TransientStorageCell . #Exists _Gen46:NonceCell . #Exists MINBAL:Int . #Exists OMMBAL:Int . #Exists OMMER:Int . #Exists OMMNUM:Int . #Exists REST:JSONs . { false #Equals <acctID>
  COINBASE_CELL:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { false #Equals <acctID>
  OMMER:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And #Not ( { OMMER:Int #Equals COINBASE_CELL:Int } )
#And { false #Equals <acctID>
  COINBASE_CELL:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { false #Equals <acctID>
  OMMER:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    COINBASE_CELL:Int
  </acctID>
  <balance>
    MINBAL:Int
  </balance>
  _Gen37:CodeCell
  _Gen38:StorageCell
  _Gen39:OrigStorageCell
  _Gen40:TransientStorageCell
  _Gen41:NonceCell
</account> <account>
  <acctID>
    OMMER:Int
  </acctID>
  <balance>
    OMMBAL:Int
  </balance>
  _Gen42:CodeCell
  _Gen43:StorageCell
  _Gen44:OrigStorageCell
  _Gen45:TransientStorageCell
  _Gen46:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #rewardOmmers ( [ _Gen0:JSON , _Gen1:JSON , OMMER:Int , _Gen2:JSON , _Gen3:JSON , _Gen4:JSON , _Gen5:JSON , _Gen6:JSON , OMMNUM:Int , _Gen7:JSONs ] , REST:JSONs )
~> _DotVar2:K }
#And #Not ( { COINBASE_CELL:Int #Equals OMMER:Int } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen21:BalanceCell . #Exists _Gen22:CodeCell . #Exists _Gen23:StorageCell . #Exists _Gen24:OrigStorageCell . #Exists _Gen25:TransientStorageCell . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists INITCODE:Bytes . #Exists NONCE:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCTTO:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTTO:Int
  </acctID>
  _Gen21:BalanceCell
  _Gen22:CodeCell
  _Gen23:StorageCell
  _Gen24:OrigStorageCell
  _Gen25:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #mkCreate ACCTFROM:Int ACCTTO:Int VALUE:Int INITCODE:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen22:BalanceCell . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . #Exists NONCE:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { true #Equals notBool Ghasmaxinitcodesize << SCHEDULE_CELL:Schedule >> orBool MEMWIDTH:Int <=Int maxInitCodeSize < SCHEDULE_CELL:Schedule > }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen22:BalanceCell
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals CREATE VALUE:Int MEMSTART:Int MEMWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists NEW:Int . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SSTORE INDEX:Int NEW:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SLOAD INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists NEW:Int . #Exists TSTORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals TSTORE INDEX:Int NEW:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists TSTORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  <transientStorage>
    TSTORAGE:Map
  </transientStorage>
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals TLOAD INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:CodeCell . #Exists _Gen25:StorageCell . #Exists _Gen26:OrigStorageCell . #Exists _Gen27:TransientStorageCell . #Exists ACCT:Int . #Exists NONCE:Int . { false #Equals #rangeNonce ( NONCE:Int ) }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  _Gen24:CodeCell
  _Gen25:StorageCell
  _Gen26:OrigStorageCell
  _Gen27:TransientStorageCell
  <nonce>
    NONCE:Int
  </nonce>
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #checkNonceExceeded ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:BalanceCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists PGM:Bytes . #Exists PGMSTART:Int . #Exists WIDTH:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen23:BalanceCell
  <code>
    PGM:Bytes
  </code>
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals EXTCODECOPY ACCT:Int MEMSTART:Int PGMSTART:Int WIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SELFBALANCE
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen23:CodeCell . #Exists _Gen24:StorageCell . #Exists _Gen25:OrigStorageCell . #Exists _Gen26:TransientStorageCell . #Exists _Gen27:NonceCell . #Exists ACCT:Int . #Exists BAL:Int . #Exists VALUE:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { true #Equals BAL:Int <Int VALUE:Int }
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen23:CodeCell
  _Gen24:StorageCell
  _Gen25:OrigStorageCell
  _Gen26:TransientStorageCell
  _Gen27:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #checkBalanceUnderflow ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar7:AccountCellMap . #Exists _Gen29:BalanceCell . #Exists _Gen30:CodeCell . #Exists _Gen31:OrigStorageCell . #Exists _Gen32:TransientStorageCell . #Exists _Gen33:NonceCell . #Exists M:Map . { false #Equals <acctID>
  339909022928299415537769066420252604268194818
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { true #Equals Ghasbeaconroot << SCHEDULE_CELL:Schedule >> }
#And { false #Equals <acctID>
  339909022928299415537769066420252604268194818
</acctID> in_keys ( _DotVar7:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    339909022928299415537769066420252604268194818
  </acctID>
  _Gen29:BalanceCell
  _Gen30:CodeCell
  <storage>
    M:Map
  </storage>
  _Gen31:OrigStorageCell
  _Gen32:TransientStorageCell
  _Gen33:NonceCell
</account> _DotVar7:AccountCellMap }
#And { K_CELL:K #Equals #executeBeaconRoots
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen0:Int . #Exists _Gen27:CodeCell . #Exists _Gen28:StorageCell . #Exists _Gen29:OrigStorageCell . #Exists _Gen30:TransientStorageCell . #Exists _Gen31:NonceCell . #Exists ACCT:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    _Gen0:Int
  </balance>
  _Gen27:CodeCell
  _Gen28:StorageCell
  _Gen29:OrigStorageCell
  _Gen30:TransientStorageCell
  _Gen31:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SELFDESTRUCT ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen25:BalanceCell . #Exists _Gen26:CodeCell . #Exists _Gen27:TransientStorageCell . #Exists _Gen28:NonceCell . #Exists ACCT:Int . #Exists INDEX:Int . #Exists NEW:Int . #Exists ORIGSTORAGE:Map . #Exists SCHED:Schedule . #Exists STORAGE:Map . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { true #Equals notBool Ghassstorestipend << SCHED:Schedule >> orBool Gcallstipend < SCHED:Schedule > <Gas GAS_CELL:Gas }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  _Gen25:BalanceCell
  _Gen26:CodeCell
  <storage>
    STORAGE:Map
  </storage>
  <origStorage>
    ORIGSTORAGE:Map
  </origStorage>
  _Gen27:TransientStorageCell
  _Gen28:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SSTORE INDEX:Int NEW:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen25:CodeCell . #Exists _Gen26:StorageCell . #Exists _Gen27:OrigStorageCell . #Exists _Gen28:TransientStorageCell . #Exists _Gen29:NonceCell . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists BAL:Int . #Exists SCHED:Schedule . { false #Equals <acctID>
  ACCTFROM:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCTFROM:Int
  </acctID>
  <balance>
    BAL:Int
  </balance>
  _Gen25:CodeCell
  _Gen26:StorageCell
  _Gen27:OrigStorageCell
  _Gen28:TransientStorageCell
  _Gen29:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SELFDESTRUCT ACCTTO:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen26:CodeCell . #Exists _Gen27:StorageCell . #Exists _Gen28:OrigStorageCell . #Exists _Gen29:TransientStorageCell . #Exists _Gen30:NonceCell . #Exists ACCT:Int . #Exists ACCTTO:Int . #Exists BALFROM:Int . { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And #Not ( { ACCT:Int #Equals ACCTTO:Int } )
#And { false #Equals <acctID>
  ACCT:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    ACCT:Int
  </acctID>
  <balance>
    BALFROM:Int
  </balance>
  _Gen26:CodeCell
  _Gen27:StorageCell
  _Gen28:OrigStorageCell
  _Gen29:TransientStorageCell
  _Gen30:NonceCell
</account> _DotVar8:AccountCellMap }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals SELFDESTRUCT ACCTTO:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _DotVar8:AccountCellMap . #Exists _Gen32:CodeCell . #Exists _Gen33:StorageCell . #Exists _Gen34:OrigStorageCell . #Exists _Gen35:TransientStorageCell . #Exists _Gen36:NonceCell . #Exists MINBAL:Int . #Exists OMMERS:JSONs . { false #Equals <acctID>
  COINBASE_CELL:Int
</acctID> in_keys ( _DotVar8:AccountCellMap ) }
#And { ACCOUNTS_CELL:AccountCellMap #Equals <account>
  <acctID>
    COINBASE_CELL:Int
  </acctID>
  <balance>
    MINBAL:Int
  </balance>
  _Gen32:CodeCell
  _Gen33:StorageCell
  _Gen34:OrigStorageCell
  _Gen35:TransientStorageCell
  _Gen36:NonceCell
</account> _DotVar8:AccountCellMap }
#And { K_CELL:K #Equals #finalizeBlock
~> _DotVar2:K }
#And { OMMERBLOCKHEADERS_CELL:JSON #Equals [ OMMERS:JSONs ] } )
#And #Not ( #Exists _DotVar2:K . #Exists _G:Gas . { K_CELL:K #Equals _G:Gas
~> #deductMemoryGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals DELEGATECALL _GCAP:Int ACCTTO:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals STATICCALL _GCAP:Int ACCTTO:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . #Exists VALUE:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals CALL _GCAP:Int ACCTTO:Int VALUE:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _GCAP:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists ARGSTART:Int . #Exists ARGWIDTH:Int . #Exists RETSTART:Int . #Exists RETWIDTH:Int . #Exists VALUE:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals CALLCODE _GCAP:Int ACCTTO:Int VALUE:Int ARGSTART:Int ARGWIDTH:Int RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Account . #Exists _Gen1:Int . { false #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { K_CELL:K #Equals #accessStorage _Gen0:Account _Gen1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Bytes . #Exists A:List . #Exists B:List . #Exists LEN:Int . { K_CELL:K #Equals #ecpairing ( A:List , B:List , LEN:Int , _Gen0:Bytes , LEN:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Bytes . #Exists ACCT:Int . { K_CELL:K #Equals #halt
~> #finishCodeDeposit ACCT:Int _Gen1:Bytes
~> _DotVar2:K }
#And { SCHEDULE_CELL:Schedule #Equals FRONTIER }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Int . { K_CELL:K #Equals #halt
~> #codeDeposit _Gen1:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Int . #Exists _Gen2:Bytes . { K_CELL:K #Equals #halt
~> #finishCodeDeposit _Gen1:Int _Gen2:Bytes
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode }
#And #Not ( { SCHEDULE_CELL:Schedule ~> .K #Equals FRONTIER ~> .K } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:ExceptionalStatusCode . #Exists _Gen1:Int . #Exists _Gen2:Int . { K_CELL:K #Equals #halt
~> #return _Gen1:Int _Gen2:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals _Gen0:ExceptionalStatusCode } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Gas . { K_CELL:K #Equals _Gen0:Gas
~> #deductGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Gas . { K_CELL:K #Equals #refund _Gen0:Gas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals #halt
~> #codeDeposit _Gen0:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_REVERT } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals #halt
~> _Gen0:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals POP _Gen0:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . { K_CELL:K #Equals UNDEFINED ( _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DELEGATECALL GCAP:Int ACCTTO:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . #Exists VALUE:Int . { ID_CELL:Account #Equals ACCTFROM:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLCODE GCAP:Int ACCTTO:Int VALUE:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , STATICCALL GCAP:Int ACCTTO:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists _Gen3:Int . #Exists ACCTTO:Int . #Exists GCAP:Int . #Exists SCHED:Schedule . #Exists VALUE:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALL GCAP:Int ACCTTO:Int VALUE:Int _Gen0:Int _Gen1:Int _Gen2:Int _Gen3:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , EXTCODECOPY ACCT:Int _Gen0:Int _Gen1:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ADDMOD _Gen0:Int _Gen1:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MULMOD _Gen0:Int _Gen1:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CREATE2 _Gen0:Int _Gen1:Int WIDTH:Int _Gen2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists _Gen2:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXTCODECOPY _Gen0:Int _Gen1:Int _Gen2:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { true #Equals Ghassstorestipend << SCHED:Schedule >> }
#And { true #Equals GAS_CELL:Gas <=Gas Gcallstipend < SCHED:Schedule > }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SSTORE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ADD _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , AND _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BYTE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DIV _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EQ _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EVMOR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , JUMPI _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , LT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MOD _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MSTORE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MSTORE8 _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MUL _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , RETURN _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , REVERT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SAR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SDIV _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SGT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SHL _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SHR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SIGNEXTEND _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SLT _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SMOD _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SUB _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , TSTORE _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , XOR _Gen0:Int _Gen1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLDATACOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CODECOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CREATE _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MCOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , RETURNDATACOPY _Gen0:Int _Gen1:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:WordStack . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DUP ( _Gen0:Int ) _Gen1:WordStack )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists _Gen1:WordStack . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SWAP ( _Gen0:Int ) _Gen1:WordStack )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists INDEX:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , SSTORE INDEX:Int _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists N:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , LOG ( N:Int ) _Gen0:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BALANCE _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BLOCKHASH _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLDATALOAD _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXTCODEHASH _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXTCODESIZE _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ISZERO _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , JUMP _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MLOAD _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , NOT _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , POP _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , TLOAD _Gen0:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PUSH ( _Gen0:Int ) )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . #Exists W1:Int . { true #Equals 0 <Int W1:Int }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXP _Gen0:Int W1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . #Exists W1:Int . { true #Equals W1:Int <=Int 0 }
#And { K_CELL:K #Equals #gasExec ( SCHED:Schedule , EXP _Gen0:Int W1:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Int . #Exists SCHED:Schedule . #Exists WIDTH:Int . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SHA3 _Gen0:Int WIDTH:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:KItem . #Exists REST:List . { CALLSTACK_CELL:List #Equals ListItem ( _Gen0:KItem ) REST:List }
#And { K_CELL:K #Equals #dropCallStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:KItem . #Exists REST:List . { INTERIMSTATES_CELL:List #Equals ListItem ( _Gen0:KItem ) REST:List }
#And { K_CELL:K #Equals #dropWorldState
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:List . #Exists _Gen1:List . #Exists _Gen2:Int . #Exists _Gen3:Bytes . #Exists _Gen4:Int . #Exists AK:G1Point . #Exists BK:G2Point . { true #Equals isValidPointWrapper ( BK:G2Point ) }
#And { true #Equals isValidPointWrapper ( AK:G1Point ) }
#And { K_CELL:K #Equals #checkPoint
~> #ecpairing ( ListItem ( AK:G1Point ) _Gen0:List , ListItem ( BK:G2Point ) _Gen1:List , _Gen2:Int , _Gen3:Bytes , _Gen4:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:List . #Exists _Gen1:List . #Exists _Gen2:Int . #Exists _Gen3:Bytes . #Exists _Gen4:Int . #Exists AK:G1Point . #Exists BK:G2Point . { true #Equals notBool isValidPointWrapper ( AK:G1Point ) orBool notBool isValidPointWrapper ( BK:G2Point ) }
#And { K_CELL:K #Equals #checkPoint
~> #ecpairing ( ListItem ( AK:G1Point ) _Gen0:List , ListItem ( BK:G2Point ) _Gen1:List , _Gen2:Int , _Gen3:Bytes , _Gen4:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:List . #Exists _Gen1:List . #Exists DATA:Bytes . #Exists I:Int . #Exists LEN:Int . { K_CELL:K #Equals #ecpairing ( _Gen0:List , _Gen1:List , I:Int , DATA:Bytes , LEN:Int )
~> _DotVar2:K }
#And #Not ( { I:Int #Equals LEN:Int } ) )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { K_CELL:K #Equals #halt
~> _Gen0:OpCode
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . { K_CELL:K #Equals #endBasicBlock
~> _Gen0:OpCode
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:OpCode . #Exists _Gen1:OpCode . { K_CELL:K #Equals #gas [ _Gen0:OpCode , _Gen1:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , ECREC )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , ID )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , RIP160 )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . { K_CELL:K #Equals #gasExec ( _Gen0:Schedule , SHA256 )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen0:Schedule . #Exists INDEX:Int . { K_CELL:K #Equals #gasAccess ( _Gen0:Schedule , SLOAD INDEX:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen1:ProgramCell . #Exists _Gen2:JumpDestsCell . #Exists _Gen3:IdCell . #Exists _Gen4:CallerCell . #Exists _Gen5:CallDataCell . #Exists _Gen6:CallValueCell . #Exists _Gen7:WordStackCell . #Exists _Gen8:LocalMemCell . #Exists _Gen9:PcCell . #Exists _Gen10:GasCell . #Exists _Gen11:MemoryUsedCell . #Exists _Gen12:CallGasCell . #Exists _Gen13:StaticCell . #Exists _Gen14:CallDepthCell . #Exists REST:List . { CALLSTACK_CELL:List #Equals ListItem ( <callState>
  _Gen1:ProgramCell
  _Gen2:JumpDestsCell
  _Gen3:IdCell
  _Gen4:CallerCell
  _Gen5:CallDataCell
  _Gen6:CallValueCell
  _Gen7:WordStackCell
  _Gen8:LocalMemCell
  _Gen9:PcCell
  _Gen10:GasCell
  _Gen11:MemoryUsedCell
  _Gen12:CallGasCell
  _Gen13:StaticCell
  _Gen14:CallDepthCell
</callState> ) REST:List }
#And { K_CELL:K #Equals #popCallStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _Gen2:SelfDestructCell . #Exists _Gen3:LogCell . #Exists _Gen4:RefundCell . #Exists _Gen5:AccessedAccountsCell . #Exists _Gen6:AccessedStorageCell . #Exists ACCTDATA:AccountCellMap . #Exists REST:List . { INTERIMSTATES_CELL:List #Equals ListItem ( { <accounts>
  ACCTDATA:AccountCellMap
</accounts> | <substate>
  _Gen2:SelfDestructCell
  _Gen3:LogCell
  _Gen4:RefundCell
  _Gen5:AccessedAccountsCell
  _Gen6:AccessedStorageCell
</substate> } ) REST:List }
#And { K_CELL:K #Equals #popWorldState
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _MEMSTART:Int . #Exists DATASTART:Int . #Exists DATAWIDTH:Int . { true #Equals lengthBytes ( OUTPUT_CELL:Bytes ) <Int DATASTART:Int +Int DATAWIDTH:Int }
#And { K_CELL:K #Equals RETURNDATACOPY _MEMSTART:Int DATASTART:Int DATAWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _S:Int . #Exists P:G1Point . { false #Equals isValidPointWrapper ( P:G1Point ) }
#And { K_CELL:K #Equals #ecmul ( P:G1Point , _S:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists _WS:WordStack . #Exists OP:OpCode . #Exists W1:Int . { true #Equals isAddr2Op ( OP:OpCode ) }
#And { K_CELL:K #Equals #addr [ OP:OpCode ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : _WS:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Account . #Exists INDEX:Int . { false #Equals ACCT:Account in_keys ( ACCESSEDSTORAGE_CELL:Map ) }
#And { true #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { K_CELL:K #Equals #accessStorage ACCT:Account INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . { true #Equals #isValidCode ( OUTPUT_CELL:Bytes , SCHEDULE_CELL:Schedule ) }
#And { true #Equals lengthBytes ( OUTPUT_CELL:Bytes ) <=Int maxCodeSize < SCHEDULE_CELL:Schedule > }
#And { K_CELL:K #Equals #mkCodeDeposit ACCT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . { K_CELL:K #Equals #halt
~> #codeDeposit ACCT:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_SUCCESS } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . #Exists N:Int . { true #Equals N:Int <=Int #sizeWordStack ( WS:WordStack , 1 ) }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals LOG ( N:Int ) MEMSTART:Int MEMWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . #Exists SALT:Int . #Exists VALUE:Int . { true #Equals notBool Ghasmaxinitcodesize << SCHEDULE_CELL:Schedule >> orBool MEMWIDTH:Int <=Int maxInitCodeSize < SCHEDULE_CELL:Schedule > }
#And { ID_CELL:Account #Equals ACCT:Int }
#And { K_CELL:K #Equals CREATE2 VALUE:Int MEMSTART:Int MEMWIDTH:Int SALT:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , BALANCE ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , EXTCODEHASH ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , EXTCODESIZE ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasAccess ( SCHED:Schedule , SELFDESTRUCT ACCT:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists VALUE:Int . { K_CELL:K #Equals #checkCall ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCT:Int . #Exists VALUE:Int . { K_CELL:K #Equals #checkCreate ACCT:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists APPVALUE:Int . #Exists ARGS:Bytes . #Exists BYTES:Bytes . #Exists STATIC:Bool . { K_CELL:K #Equals #mkCall ACCTFROM:Int ACCTTO:Int ACCTCODE:Int BYTES:Bytes APPVALUE:Int ARGS:Bytes STATIC:Bool
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists APPVALUE:Int . #Exists ARGS:Bytes . #Exists BYTES:Bytes . #Exists STATIC:Bool . #Exists VALUE:Int . { K_CELL:K #Equals #callWithCode ACCTFROM:Int ACCTTO:Int ACCTCODE:Int BYTES:Bytes VALUE:Int APPVALUE:Int ARGS:Bytes STATIC:Bool
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists SCHED:Schedule . { true #Equals 0 <Int ACCTCODE:Int }
#And { true #Equals ACCTCODE:Int <=Int #precompiledAccountsUB ( SCHED:Schedule ) }
#And { K_CELL:K #Equals #precompiled? ( ACCTCODE:Int , SCHED:Schedule )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTCODE:Int . #Exists SCHED:Schedule . { false #Equals #range ( 0 < ACCTCODE:Int <= #precompiledAccountsUB ( SCHED:Schedule ) ) }
#And { K_CELL:K #Equals #precompiled? ( ACCTCODE:Int , SCHED:Schedule )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . { true #Equals Gemptyisnonexistent << SCHEDULE_CELL:Schedule >> }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } )
#And { K_CELL:K #Equals #transferFundsToNonExistent ACCTFROM:Int ACCTTO:Int 0
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists INITCODE:Bytes . #Exists VALUE:Int . { K_CELL:K #Equals #create ACCTFROM:Int ACCTTO:Int VALUE:Int INITCODE:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ACCTFROM:Int . #Exists ACCTTO:Int . #Exists VALUE:Int . { true #Equals 0 <Int VALUE:Int orBool notBool Gemptyisnonexistent << SCHEDULE_CELL:Schedule >> }
#And #Not ( { ACCTFROM:Int #Equals ACCTTO:Int } )
#And { K_CELL:K #Equals #transferFundsToNonExistent ACCTFROM:Int ACCTTO:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR:Account . { K_CELL:K #Equals #accessAccounts ADDR:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR:Account . { K_CELL:K #Equals #touchAccounts ADDR:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR1:Account . #Exists ADDR2:Account . { K_CELL:K #Equals #accessAccounts ADDR1:Account ADDR2:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR1:Account . #Exists ADDR2:Account . { K_CELL:K #Equals #touchAccounts ADDR1:Account ADDR2:Account
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDR1:Account . #Exists ADDR2:Account . #Exists ADDRSET:Set . { K_CELL:K #Equals #accessAccounts ADDR1:Account ADDR2:Account ADDRSET:Set
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists ADDRSET:Set . { K_CELL:K #Equals #accessAccounts ADDRSET:Set
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists AOP:OpCode . #Exists OP:OpCode . { true #Equals #usesAccessList ( OP:OpCode ) }
#And { true #Equals Ghasaccesslist << SCHEDULE_CELL:Schedule >> }
#And { K_CELL:K #Equals #access [ OP:OpCode , AOP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists AOP:OpCode . #Exists OP:OpCode . { true #Equals #usesMemory ( OP:OpCode ) }
#And { K_CELL:K #Equals #memory [ OP:OpCode , AOP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists BAL:Int . #Exists ISEMPTY:Bool . #Exists SCHED:Schedule . { K_CELL:K #Equals Cselfdestruct ( SCHED:Schedule , ISEMPTY:Bool , BAL:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists BOP:BinStackOp . #Exists W1:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ BOP:BinStackOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists BYTES:Bytes . { K_CELL:K #Equals #loadProgram BYTES:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists CO:CallOp . #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists W4:Int . #Exists W5:Int . #Exists W6:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ CO:CallOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : W3:Int : W4:Int : W5:Int : W6:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists CSO:CallSixOp . #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists W4:Int . #Exists W5:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ CSO:CallSixOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : W3:Int : W4:Int : W5:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists DATASTART:Int . { K_CELL:K #Equals CALLDATALOAD DATASTART:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DATASTART:Int . #Exists DATAWIDTH:Int . #Exists MEMSTART:Int . { true #Equals DATASTART:Int +Int DATAWIDTH:Int <=Int lengthBytes ( OUTPUT_CELL:Bytes ) }
#And { K_CELL:K #Equals RETURNDATACOPY MEMSTART:Int DATASTART:Int DATAWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DATASTART:Int . #Exists DATAWIDTH:Int . #Exists MEMSTART:Int . { K_CELL:K #Equals CALLDATACOPY MEMSTART:Int DATASTART:Int DATAWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DEST:Int . { true #Equals DEST:Int <Int lengthBytes ( JUMPDESTS_CELL:Bytes ) }
#And { 1 #Equals JUMPDESTS_CELL:Bytes [ DEST:Int ] }
#And { K_CELL:K #Equals JUMP DEST:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists DEST:Int . #Exists I:Int . { K_CELL:K #Equals JUMPI DEST:Int I:Int
~> _DotVar2:K }
#And #Not ( { I:Int #Equals 0 } ) )
#And #Not ( #Exists _DotVar2:K . #Exists DST:Int . #Exists LEN:Int . #Exists SRC:Int . { K_CELL:K #Equals MCOPY DST:Int SRC:Int LEN:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists GAVAIL:Gas . #Exists GCAP:Gas . #Exists ISEMPTY:Bool . #Exists ISWARM:Bool . #Exists SCHED:Schedule . #Exists VALUE:Int . { K_CELL:K #Equals Ccall ( SCHED:Schedule , ISEMPTY:Bool , GCAP:Gas , GAVAIL:Gas , VALUE:Int , ISWARM:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists GAVAIL:Gas . #Exists GCAP:Gas . #Exists ISEMPTY:Bool . #Exists ISWARM:Bool . #Exists SCHED:Schedule . #Exists VALUE:Int . { K_CELL:K #Equals Ccallgas ( SCHED:Schedule , ISEMPTY:Bool , GCAP:Gas , GAVAIL:Gas , VALUE:Int , ISWARM:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists GCALL:Gas . { K_CELL:K #Equals GCALL:Gas
~> #allocateCallGas
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { false #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals Ccall ( K0:Schedule , HOLE:BExp , K2:Gas , K3:Gas , K4:Int , K5:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { false #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals Ccallgas ( K0:Schedule , HOLE:BExp , K2:Gas , K3:Gas , K4:Int , K5:Bool )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { true #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals HOLE:BExp
~> #freezerCcall1_ ( K0:Schedule ~> .K , K2:Gas ~> .K , K3:Gas ~> .K , K4:Int ~> .K , K5:Bool ~> .K )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Gas . #Exists K3:Gas . #Exists K4:Int . #Exists K5:Bool . { true #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals HOLE:BExp
~> #freezerCcallgas1_ ( K0:Schedule ~> .K , K2:Gas ~> .K , K3:Gas ~> .K , K4:Int ~> .K , K5:Bool ~> .K )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Int . { false #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals Cselfdestruct ( K0:Schedule , HOLE:BExp , K2:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists HOLE:BExp . #Exists K0:Schedule . #Exists K2:Int . { true #Equals isKResult ( HOLE:BExp ~> .K ) }
#And { K_CELL:K #Equals HOLE:BExp
~> #freezerCselfdestruct1_ ( K0:Schedule ~> .K , K2:Int ~> .K )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . { K_CELL:K #Equals MLOAD INDEX:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SLOAD INDEX:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists VALUE:Int . { K_CELL:K #Equals MSTORE INDEX:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists VALUE:Int . { K_CELL:K #Equals MSTORE8 INDEX:Int VALUE:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists INDEX:Int . #Exists W:Int . { K_CELL:K #Equals BYTE INDEX:Int W:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists IOP:InvalidOp . { K_CELL:K #Equals #exec [ IOP:InvalidOp ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists MEMSTART:Int . #Exists MEMWIDTH:Int . { K_CELL:K #Equals SHA3 MEMSTART:Int MEMWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists MEMSTART:Int . #Exists PGMSTART:Int . #Exists WIDTH:Int . { K_CELL:K #Equals CODECOPY MEMSTART:Int PGMSTART:Int WIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists MU':Int . { K_CELL:K #Equals MU':Int
~> #deductMemory
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . { K_CELL:K #Equals BLOCKHASH N:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . { K_CELL:K #Equals PUSH ( N:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . #Exists W0:Int . #Exists WS:WordStack . { K_CELL:K #Equals SWAP ( N:Int ) W0:Int : WS:WordStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists N:Int . #Exists WS:WordStack . { K_CELL:K #Equals DUP ( N:Int ) WS:WordStack
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { false #Equals isAddr1Op ( OP:OpCode ) }
#And { false #Equals isAddr2Op ( OP:OpCode ) }
#And { K_CELL:K #Equals #addr [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { false #Equals #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 0 andBool #sizeWordStack ( WS:WordStack , 1 ) +Int #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 1024 }
#And { false #Equals STATIC_CELL:Bool andBool #changesState ( OP:OpCode , CALLER_CELL:Int : WS:WordStack ) }
#And { false #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { false #Equals #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 0 andBool #sizeWordStack ( WS:WordStack , 1 ) +Int #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 1024 }
#And { false #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) }
#And { true #Equals #changesState ( OP:OpCode , CALLER_CELL:Int : WS:WordStack ) }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K }
#And { STATIC_CELL:Bool #Equals true } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals isNullStackOp ( OP:OpCode ~> .K ) orBool isPushOp ( OP:OpCode ~> .K ) }
#And { K_CELL:K #Equals #exec [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 0 }
#And { true #Equals #sizeWordStack ( WS:WordStack , 1 ) +Int #stackAdded ( OP:OpCode ) -Int #stackNeeded ( OP:OpCode ) >Int 1024 }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals #sizeWordStack ( WS:WordStack , 1 ) <Int #stackNeeded ( OP:OpCode ) }
#And { K_CELL:K #Equals #next [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { true #Equals isAddr1Op ( OP:OpCode ) }
#And { K_CELL:K #Equals #addr [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { K_CELL:K #Equals #gas [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists OP:OpCode . { K_CELL:K #Equals #pc [ OP:OpCode ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists P:G1Point . #Exists S:Int . { true #Equals isValidPointWrapper ( P:G1Point ) }
#And { K_CELL:K #Equals #ecmul ( P:G1Point , S:Int )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists P1:G1Point . #Exists P2:G1Point . { true #Equals isValidPointWrapper ( P1:G1Point ) }
#And { true #Equals isValidPointWrapper ( P2:G1Point ) }
#And { K_CELL:K #Equals #ecadd ( P1:G1Point , P2:G1Point )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists P1:G1Point . #Exists P2:G1Point . { true #Equals notBool isValidPointWrapper ( P1:G1Point ) orBool notBool isValidPointWrapper ( P2:G1Point ) }
#And { K_CELL:K #Equals #ecadd ( P1:G1Point , P2:G1Point )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists QOP:QuadStackOp . #Exists W1:Int . #Exists W2:Int . #Exists W3:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ QOP:QuadStackOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : W3:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals #halt
~> #return RETSTART:Int RETWIDTH:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_REVERT } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals #halt
~> #return RETSTART:Int RETWIDTH:Int
~> _DotVar2:K }
#And { STATUSCODE_CELL:StatusCode #Equals EVMC_SUCCESS } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals RETURN RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists RETSTART:Int . #Exists RETWIDTH:Int . { K_CELL:K #Equals REVERT RETSTART:Int RETWIDTH:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SC:StatusCode . { K_CELL:K #Equals #end SC:StatusCode
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ADDRESS )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BASEFEE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLDATASIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLER )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CALLVALUE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CHAINID )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , CODESIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , COINBASE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , DIFFICULTY )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GAS )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GASLIMIT )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , GASPRICE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , JUMPDEST )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MSIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , NUMBER )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ORIGIN )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PC )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PREVRANDAO )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , RETURNDATASIZE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , SELFBALANCE )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , STOP )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , TIMESTAMP )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , BLAKE2F )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ECADD )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ECMUL )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , ECPAIRING )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , MODEXP )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SCHED:Schedule . { K_CELL:K #Equals #gasExec ( SCHED:Schedule , PUSHZERO )
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists SO:StackOp . { K_CELL:K #Equals #exec [ SO:StackOp ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists START:Int . #Exists WIDTH:Int . #Exists WS:Bytes . { K_CELL:K #Equals #setLocalMem START:Int WIDTH:Int WS:Bytes
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists TOP:TernStackOp . #Exists W1:Int . #Exists W2:Int . #Exists WS0:WordStack . { K_CELL:K #Equals #exec [ TOP:TernStackOp ]
~> _DotVar2:K }
#And { WS:WordStack #Equals W1:Int : W2:Int : WS0:WordStack } )
#And #Not ( #Exists _DotVar2:K . #Exists UOP:UnStackOp . { K_CELL:K #Equals #exec [ UOP:UnStackOp ]
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W:Int . { K_CELL:K #Equals ISZERO W:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W:Int . { K_CELL:K #Equals NOT W:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . { K_CELL:K #Equals W0:Int
~> #push
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals ADD W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals AND W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals DIV W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals EQ W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals EVMOR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals EXP W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals GT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals LT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals MOD W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals MUL W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SAR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SDIV W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SGT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SHL W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SHR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SIGNEXTEND W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SLT W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SMOD W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals SUB W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . { K_CELL:K #Equals XOR W0:Int W1:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . #Exists W2:Int . { K_CELL:K #Equals ADDMOD W0:Int W1:Int W2:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists W0:Int . #Exists W1:Int . #Exists W2:Int . { K_CELL:K #Equals MULMOD W0:Int W1:Int W2:Int
~> _DotVar2:K } )
#And #Not ( #Exists _DotVar2:K . #Exists WS:WordStack . { K_CELL:K #Equals #setStack WS:WordStack
~> _DotVar2:K } )
#And #Not ( #Exists _K_CELL:K . { K_CELL:K #Equals #next [ CALLER ]
~> _K_CELL:K } )
INFO 2025-01-15 15:12:04,811 pyk.kore.rpc - Stopping KoreServer: 0.0.0.0:41429, pid=2642376
INFO 2025-01-15 15:12:04,908 pyk.kore.rpc - KoreServer stopped: 0.0.0.0:41429, pid=2642376
Proof timing CALLER_0_SPEC: 616.6405799388885s

requires "edsl.md"

module ERC721-CONTRACT
    imports public EDSL
    
    syntax Contract ::= S2KERC721Contract
    
    syntax S2KERC721Contract ::= "S2KERC721" [symbol(contract_ERC721)]
    
    rule  ( #binRuntime ( S2KERC721 ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= ERC721Field
    
    syntax ERC721Field ::= "_name" [symbol(field_ERC721__name)]
    
    syntax ERC721Field ::= "_symbol" [symbol(field_ERC721__symbol)]
    
    syntax ERC721Field ::= "_owners" [symbol(field_ERC721__owners)]
    
    syntax ERC721Field ::= "_balances" [symbol(field_ERC721__balances)]
    
    syntax ERC721Field ::= "_tokenApprovals" [symbol(field_ERC721__tokenApprovals)]
    
    syntax ERC721Field ::= "_operatorApprovals" [symbol(field_ERC721__operatorApprovals)]
    
    rule  ( #loc ( S2KERC721 . _name ) => 0 )
      
    
    rule  ( #loc ( S2KERC721 . _symbol ) => 1 )
      
    
    rule  ( #loc ( S2KERC721 . _owners ) => 2 )
      
    
    rule  ( #loc ( S2KERC721 . _balances ) => 3 )
      
    
    rule  ( #loc ( S2KERC721 . _tokenApprovals ) => 4 )
      
    
    rule  ( #loc ( S2KERC721 . _operatorApprovals ) => 5 )
      
    
    syntax Bytes ::= S2KERC721Contract "." S2KERC721Method [function(), symbol(method_ERC721)]
    
    syntax S2KERC721Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(method_ERC721_S2Kapprove_address_uint256)]
    
    syntax S2KERC721Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(method_ERC721_S2KbalanceOf_address)]
    
    syntax S2KERC721Method ::= "S2KgetApproved" "(" Int ":" "uint256" ")" [symbol(method_ERC721_S2KgetApproved_uint256)]
    
    syntax S2KERC721Method ::= "S2KisApprovedForAll" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(method_ERC721_S2KisApprovedForAll_address_address)]
    
    syntax S2KERC721Method ::= "S2Kname" "(" ")" [symbol(method_ERC721_S2Kname_)]
    
    syntax S2KERC721Method ::= "S2KownerOf" "(" Int ":" "uint256" ")" [symbol(method_ERC721_S2KownerOf_uint256)]
    
    syntax S2KERC721Method ::= "S2KsafeTransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(method_ERC721_S2KsafeTransferFrom_address_address_uint256)]
    
    syntax S2KERC721Method ::= "S2KsafeTransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(method_ERC721_S2KsafeTransferFrom_address_address_uint256_bytes)]
    
    syntax S2KERC721Method ::= "S2KsetApprovalForAll" "(" Int ":" "address" "," Int ":" "bool" ")" [symbol(method_ERC721_S2KsetApprovalForAll_address_bool)]
    
    syntax S2KERC721Method ::= "S2KsupportsInterface" "(" Int ":" "bytes4" ")" [symbol(method_ERC721_S2KsupportsInterface_bytes4)]
    
    syntax S2KERC721Method ::= "S2Ksymbol" "(" ")" [symbol(method_ERC721_S2Ksymbol_)]
    
    syntax S2KERC721Method ::= "S2KtokenURI" "(" Int ":" "uint256" ")" [symbol(method_ERC721_S2KtokenURI_uint256)]
    
    syntax S2KERC721Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(method_ERC721_S2KtransferFrom_address_address_uint256)]
    
    rule  ( S2KERC721 . S2Kapprove ( V0_to : address , V1_tokenId : uint256 ) => #abiCallData ( "approve" , #address ( V0_to ) , #uint256 ( V1_tokenId ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_to )
       andBool ( #rangeUInt ( 256 , V1_tokenId )
               ))
      
    
    rule  ( S2KERC721 . S2KbalanceOf ( V0_owner : address ) => #abiCallData ( "balanceOf" , #address ( V0_owner ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_owner )
      
    
    rule  ( S2KERC721 . S2KgetApproved ( V0_tokenId : uint256 ) => #abiCallData ( "getApproved" , #uint256 ( V0_tokenId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_tokenId )
      
    
    rule  ( S2KERC721 . S2KisApprovedForAll ( V0_owner : address , V1_operator : address ) => #abiCallData ( "isApprovedForAll" , #address ( V0_owner ) , #address ( V1_operator ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_owner )
       andBool ( #rangeAddress ( V1_operator )
               ))
      
    
    rule  ( S2KERC721 . S2Kname ( ) => #abiCallData ( "name" , .TypedArgs ) )
      
    
    rule  ( S2KERC721 . S2KownerOf ( V0_tokenId : uint256 ) => #abiCallData ( "ownerOf" , #uint256 ( V0_tokenId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_tokenId )
      
    
    rule  ( S2KERC721 . S2KsafeTransferFrom ( V0_from : address , V1_to : address , V2_tokenId : uint256 ) => #abiCallData ( "safeTransferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_tokenId ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_tokenId )
               )))
      
    
    rule  ( S2KERC721 . S2KsafeTransferFrom ( V0_from : address , V1_to : address , V2_tokenId : uint256 , V3__data : bytes ) => #abiCallData ( "safeTransferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_tokenId ) , #bytes ( V3__data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_tokenId )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3__data ) )
               ))))
      
    
    rule  ( S2KERC721 . S2KsetApprovalForAll ( V0_operator : address , V1_approved : bool ) => #abiCallData ( "setApprovalForAll" , #address ( V0_operator ) , #bool ( V1_approved ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_operator )
       andBool ( #rangeBool ( V1_approved )
               ))
      
    
    rule  ( S2KERC721 . S2KsupportsInterface ( V0_interfaceId : bytes4 ) => #abiCallData ( "supportsInterface" , #bytes4 ( V0_interfaceId ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_interfaceId )
      
    
    rule  ( S2KERC721 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KERC721 . S2KtokenURI ( V0_tokenId : uint256 ) => #abiCallData ( "tokenURI" , #uint256 ( V0_tokenId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_tokenId )
      
    
    rule  ( S2KERC721 . S2KtransferFrom ( V0_from : address , V1_to : address , V2_tokenId : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_tokenId ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_tokenId )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "getApproved(uint256)" ) => 135795452 )
      
    
    rule  ( selector ( "isApprovedForAll(address,address)" ) => 3917867461 )
      
    
    rule  ( selector ( "name()" ) => 117300739 )
      
    
    rule  ( selector ( "ownerOf(uint256)" ) => 1666326814 )
      
    
    rule  ( selector ( "safeTransferFrom(address,address,uint256)" ) => 1115958798 )
      
    
    rule  ( selector ( "safeTransferFrom(address,address,uint256,bytes)" ) => 3096268766 )
      
    
    rule  ( selector ( "setApprovalForAll(address,bool)" ) => 2720838757 )
      
    
    rule  ( selector ( "supportsInterface(bytes4)" ) => 33540519 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "tokenURI(uint256)" ) => 3363526365 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module ERC721-VERIFICATION
    imports public ERC721-CONTRACT
    
    

endmodule

